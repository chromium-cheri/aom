{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f4832ad7_4f3801d1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-11-03T19:30:05Z",
      "side": 1,
      "message": "If this is a local modification, ideally we should set up a way to document our local modifications. I guess we can:\n  - add a README file,\n  - document them at the top of the file, or\n  - enclose the local modifications with special comments\n    (such as \"// libaom specific\").",
      "revId": "34747ffa1d43e9f8a3af0ea2a32e5c4cf694638f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61f14bc0_b47119c8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-11-03T19:30:05Z",
      "side": 1,
      "message": "Should we link to bug aomedia:3178?",
      "revId": "34747ffa1d43e9f8a3af0ea2a32e5c4cf694638f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6f019831_746f1774",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5020
      },
      "writtenOn": "2021-11-01T23:32:18Z",
      "side": 1,
      "message": "Not critical and it doesn\u0027t cover every situation, so we can skip it if you\u0027d prefer.",
      "revId": "34747ffa1d43e9f8a3af0ea2a32e5c4cf694638f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4216a5f5_1ecdf193",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-11-03T19:30:05Z",
      "side": 1,
      "message": "Please see my comment in tools/cpplint.py.",
      "revId": "34747ffa1d43e9f8a3af0ea2a32e5c4cf694638f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e7aca522_b8330d27",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-11-03T19:33:43Z",
      "side": 1,
      "message": "I didn\u0027t see this comment earlier. If you are also not sure, then I think we can skip this check, which will also avoid the need to document local modifications.",
      "parentUuid": "6f019831_746f1774",
      "revId": "34747ffa1d43e9f8a3af0ea2a32e5c4cf694638f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e03bcca_217e832b",
        "filename": "tools/cpplint.py",
        "patchSetId": 1
      },
      "lineNbr": 5297,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-11-03T19:30:05Z",
      "side": 1,
      "message": "In general it is better to use sizeof(varname) instead of sizeof(type). But in malloc and calloc calls, I think sizeof(type) looks nicer, because we often cast the returned pointer (the cast is not required in C). Compare:\n\n    T *p \u003d (T *)malloc(sizeof(T));\n\nwith:\n\n    T *p \u003d (T *)malloc(sizeof(*p));\n\nAnd a common mistake is to pass sizeof(p):\n\n    T *p \u003d (T *)malloc(sizeof(p));\n\nI wonder if this is one of the reasons why the runtime/sizeof check was removed.\n\nI leave the decision to you.",
      "revId": "34747ffa1d43e9f8a3af0ea2a32e5c4cf694638f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
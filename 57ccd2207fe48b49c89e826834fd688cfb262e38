{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bc24a2e0_206097e5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-08-17T18:26:00Z",
      "side": 1,
      "message": "LGTM.",
      "revId": "57ccd2207fe48b49c89e826834fd688cfb262e38",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "76aa2d35_19f6049f",
        "filename": "av1/encoder/mcomp.c",
        "patchSetId": 6
      },
      "lineNbr": 2148,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-08-17T18:26:00Z",
      "side": 1,
      "message": "When these aom_malloc() calls fail, CHECK_MEM_ERROR calls aom_internal_error(), which does a long jump out of this function. So we will leak memory when the second or later aom_malloc() call fails.\n\nYou don\u0027t need to address this issue in this CL. The solution requires rewriting these lines of code without using the CHECK_MEM_ERROR macro, something like this:\n\n```\n  int16_t *hbuf \u003d (int16_t *)aom_malloc(search_width * sizeof(*hbuf));\n  ...\n  int16_t *src_vbuf \u003d (int16_t *)aom_malloc(bh * sizeof(*src_vbuf));\n  if (!hbuf || !vbuf || !src_hbuf || !src_vbuf) {\n    aom_free(hbuf);\n    ...\n    aom_free(src_vbuf);\n    aom_internal_error(...);\n  }\n```",
      "revId": "57ccd2207fe48b49c89e826834fd688cfb262e38",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f0190b7_124de4cf",
        "filename": "av1/encoder/mcomp.c",
        "patchSetId": 6
      },
      "lineNbr": 2148,
      "author": {
        "id": 5190
      },
      "writtenOn": "2023-08-17T18:55:38Z",
      "side": 1,
      "message": "Ok thanks, acknowledged",
      "parentUuid": "76aa2d35_19f6049f",
      "revId": "57ccd2207fe48b49c89e826834fd688cfb262e38",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "57ccd2207fe48b49c89e826834fd688cfb262e38",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "57ccd2207fe48b49c89e826834fd688cfb262e38",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "57ccd2207fe48b49c89e826834fd688cfb262e38",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
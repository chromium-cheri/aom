{
  "comments": [
    {
      "key": {
        "uuid": "7323ef26_3758e555",
        "filename": "av1/encoder/block.h",
        "patchSetId": 12
      },
      "lineNbr": 470,
      "author": {
        "id": 5185
      },
      "writtenOn": "2019-11-01T04:07:41Z",
      "side": 1,
      "message": "Seems predict_skip_level is unsigned int in other places. Better to use same type and be consistent.",
      "range": {
        "startLine": 470,
        "startChar": 2,
        "endLine": 470,
        "endChar": 5
      },
      "revId": "d375eb954739452dd75f6f5d9908455f9441d7a6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1afcfa74_4e48ffbb",
        "filename": "av1/encoder/block.h",
        "patchSetId": 12
      },
      "lineNbr": 470,
      "author": {
        "id": 13265
      },
      "writtenOn": "2019-11-01T09:30:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7323ef26_3758e555",
      "range": {
        "startLine": 470,
        "startChar": 2,
        "endLine": 470,
        "endChar": 5
      },
      "revId": "d375eb954739452dd75f6f5d9908455f9441d7a6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05dfb360_154344b1",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 12
      },
      "lineNbr": 4025,
      "author": {
        "id": 5185
      },
      "writtenOn": "2019-11-01T04:07:41Z",
      "side": 1,
      "message": "Can these lines be combined?",
      "range": {
        "startLine": 4014,
        "startChar": 0,
        "endLine": 4025,
        "endChar": 33
      },
      "revId": "d375eb954739452dd75f6f5d9908455f9441d7a6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cea3376d_f0defb00",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 12
      },
      "lineNbr": 4025,
      "author": {
        "id": 13265
      },
      "writtenOn": "2019-11-01T09:37:54Z",
      "side": 1,
      "message": "Yunqing,\nWe are using *dist for the threshold check when (skip_pred_level \u003e\u003d 2) and mse otherwise. We chose *dist for the (skip_pred_level \u003e\u003d 2) so as to eliminate the truncation losses in the computation of mse. \nTo combine the lines, the *dist has to be changed to mse (or mse to *dist). However, this will not be bit-exact with the current patch for presets 3 and 4 when *dist is changed to mse (or for presets 0, 1, 2 if mse is changed to *dist). \nPlease let us know if we should change the condition to use mse instead of *dist.",
      "parentUuid": "05dfb360_154344b1",
      "range": {
        "startLine": 4014,
        "startChar": 0,
        "endLine": 4025,
        "endChar": 33
      },
      "revId": "d375eb954739452dd75f6f5d9908455f9441d7a6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "128ceee0_6ad64bf0",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 12
      },
      "lineNbr": 4025,
      "author": {
        "id": 5185
      },
      "writtenOn": "2019-11-01T16:21:34Z",
      "side": 1,
      "message": "Hi Nithya, thanks for the reply. I can see what you mean. using *dist instead of mse wouldn\u0027t give bit-exact result, but the impact should be negligible.\nAlso, in original code, *dist is used to terminate this test(if it is too large, skip\u003d0). Here, it is also used to force skip \u003d 1. mse_thresh * AOMMIN(bw, bh) - why multiply by AOMMIN(bw, bh)? Seems risky if bsize is large?",
      "parentUuid": "cea3376d_f0defb00",
      "range": {
        "startLine": 4014,
        "startChar": 0,
        "endLine": 4025,
        "endChar": 33
      },
      "revId": "d375eb954739452dd75f6f5d9908455f9441d7a6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ffb6c84_002ce3d4",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 12
      },
      "lineNbr": 4025,
      "author": {
        "id": 13265
      },
      "writtenOn": "2019-11-04T10:27:08Z",
      "side": 1,
      "message": "Hi Yunqing,\n\nWe changed the metric to mse so as to be consistent with the existing condition, while also keeping the block dimension factor in the threshold comparison when predict_skip_level \u003e\u003d 2. We also made the block size dependent factor as sqrt(block size) for the threshold comparison in the current patch.\n\nRegarding the use of block size dependent factor in the threshold comparsion, our motivation was to use a simpler skip decision based only on mse. However, we observed from the stats collected from the existing function that the early exit as non-skip (return as 0 if mse \u003e mse_thresh) was happening very less number of times for bigger block sizes. For example, for 64x64, the condition (mse \u003e mse_thresh) was hit only 3.7% of the cases, and for 4x4 it was hit for 89% of the cases. Hence if we were to use the opposite condition as is for marking as skip, it would have resulted in aggressive skip decision for larger block sizes. It was also observed that when skip was set as 1 in parent version (after DCT_DCT transform and threshold checks on the coefficients), the bulk of the histogram of the ratio of mse_thresh/mse was directly proportional to the block dimensions. This made us arrive at the block size dependent factor.",
      "parentUuid": "128ceee0_6ad64bf0",
      "range": {
        "startLine": 4014,
        "startChar": 0,
        "endLine": 4025,
        "endChar": 33
      },
      "revId": "d375eb954739452dd75f6f5d9908455f9441d7a6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0693136_492f8848",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 12
      },
      "lineNbr": 4025,
      "author": {
        "id": 5185
      },
      "writtenOn": "2019-11-04T20:17:30Z",
      "side": 1,
      "message": "Thanks for the detailed explanation. My concern here is the skip\u003d1 part. Returning 0 wouldn\u0027t hurt quality, but returning 1 would. You can see the original code is very conservative about returning 1. For example, a 64x64 residual block with only dc signal, so all energy(*dist, but not *dist/bw) will go to the dc coefficient. If you use *dist/64 to make skip\u003d1 decision, it would be wrong.",
      "parentUuid": "7ffb6c84_002ce3d4",
      "range": {
        "startLine": 4014,
        "startChar": 0,
        "endLine": 4025,
        "endChar": 33
      },
      "revId": "d375eb954739452dd75f6f5d9908455f9441d7a6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22bd34ff_fc31cd68",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 12
      },
      "lineNbr": 4025,
      "author": {
        "id": 13265
      },
      "writtenOn": "2019-11-05T11:00:22Z",
      "side": 1,
      "message": "Hi Yunqing,\n\nIf we compare the first check to mark as non-skip (based on mse), the following conditions are used to decide if the block is marked as non-skip in the parent version and current patch, considering a block of 64x64:\nParent version\t\t\t\tCurrent version\n--------------\t\t\t\t         ---------------\n*dist/64/64 \u003e mse_thresh\t\t*dist/64 \u003e mse_thresh\nSo the current patch marks more cases as non-skip compared to the parent version.\n\nRegarding the prediction of skip \u003d 1, considering a DC only case\nParent version\t\t\t\tCurrent version\n--------------\t\t\t\t         ---------------\ndc \u003c dc_thresh/128/128\t\t  dc \u003c\u003d sqrt(mse_thresh/64)\n\nOn average over all QP values, we have seen that sqrt(mse_thresh/64) is 25% higher than dc_thresh/128/128. Hence a bit more aggressiveness is introduced by the current patch, to obtain speed-up by eliminating the overhead of transform based prediction.\n\nHowever, in overall sense, we notice that lower number of cases are marked as skip in the current patch compared to the parent version. This is due to the less aggressiveness of the first check of non-skip prediction (*dist based) for all block sizes. For example, in the parent version, for 64x64, 37% of the cases were predicted as skip, while the current patch predicts only 14% of the cases as skip. Similar trend is seen for all block sizes.",
      "parentUuid": "b0693136_492f8848",
      "range": {
        "startLine": 4014,
        "startChar": 0,
        "endLine": 4025,
        "endChar": 33
      },
      "revId": "d375eb954739452dd75f6f5d9908455f9441d7a6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3472b51d_3489479f",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 12
      },
      "lineNbr": 6225,
      "author": {
        "id": 5185
      },
      "writtenOn": "2019-11-01T16:21:34Z",
      "side": 1,
      "message": "this is not needed since x is already passed in?",
      "range": {
        "startLine": 6225,
        "startChar": 24,
        "endLine": 6225,
        "endChar": 45
      },
      "revId": "d375eb954739452dd75f6f5d9908455f9441d7a6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64477ac4_1482abff",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 12
      },
      "lineNbr": 6225,
      "author": {
        "id": 13265
      },
      "writtenOn": "2019-11-04T10:27:08Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3472b51d_3489479f",
      "range": {
        "startLine": 6225,
        "startChar": 24,
        "endLine": 6225,
        "endChar": 45
      },
      "revId": "d375eb954739452dd75f6f5d9908455f9441d7a6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6f5da4f0_73e70b81",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-05-04T23:03:18Z",
      "side": 1,
      "message": "I suggest some changes.",
      "revId": "c045dfb8cd41443a90d9c0305984c3a50031fe5f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e25db50d_a724dd22",
        "filename": "av1/decoder/grain_synthesis.c",
        "patchSetId": 1
      },
      "lineNbr": 310,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-05-04T23:03:18Z",
      "side": 1,
      "message": "Nit/optional: It looks nicer if we initialize these in the same order they are listed in the function parameter list.\n\nI guess the current order comes from dealloc_arrays().",
      "revId": "c045dfb8cd41443a90d9c0305984c3a50031fe5f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b4b23aa_4e41acf4",
        "filename": "av1/decoder/grain_synthesis.c",
        "patchSetId": 1
      },
      "lineNbr": 310,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-05-04T23:43:46Z",
      "side": 1,
      "message": "\u003e Nit/optional: It looks nicer if we initialize these in the same order they are listed in the function parameter list.\n\u003e \n\u003e I guess the current order comes from dealloc_arrays().\n\nI agree, I picked this up from the assignment order below and did a simple replacement.",
      "parentUuid": "e25db50d_a724dd22",
      "revId": "c045dfb8cd41443a90d9c0305984c3a50031fe5f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7367209a_a29f95cf",
        "filename": "av1/decoder/grain_synthesis.c",
        "patchSetId": 1
      },
      "lineNbr": 329,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-05-04T23:03:18Z",
      "side": 1,
      "message": "The largest value of i should be row - 1, not row.\n\nI am curious why do you count down? Why not for (int i \u003d 0; i \u003c row, ++i)?",
      "revId": "c045dfb8cd41443a90d9c0305984c3a50031fe5f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2083956a_588f075c",
        "filename": "av1/decoder/grain_synthesis.c",
        "patchSetId": 1
      },
      "lineNbr": 329,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-05-04T23:43:46Z",
      "side": 1,
      "message": "\u003e The largest value of i should be row - 1, not row.\n\u003e \n\nTrue, the [row] value is NULL so it won\u0027t matter.\n\n\u003e I am curious why do you count down? Why not for (int i \u003d 0; i \u003c row, ++i)?\n\nI probably meant to reuse row and just decrement that, but a new counter makes it clear enough.",
      "parentUuid": "7367209a_a29f95cf",
      "revId": "c045dfb8cd41443a90d9c0305984c3a50031fe5f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a01efad0_688dd380",
        "filename": "av1/decoder/grain_synthesis.c",
        "patchSetId": 1
      },
      "lineNbr": 348,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-05-04T23:03:18Z",
      "side": 1,
      "message": "IMPORTANT: We should free pred_pos_chroma[i], not pred_pos_chroma[row]. Also, the largest value of \u0027i\u0027 should be row - 1, not row.",
      "revId": "c045dfb8cd41443a90d9c0305984c3a50031fe5f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f3eaea2_e6c3110b",
        "filename": "av1/decoder/grain_synthesis.c",
        "patchSetId": 1
      },
      "lineNbr": 348,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-05-04T23:43:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a01efad0_688dd380",
      "revId": "c045dfb8cd41443a90d9c0305984c3a50031fe5f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57c43961_09ee4a44",
        "filename": "av1/decoder/grain_synthesis.c",
        "patchSetId": 1
      },
      "lineNbr": 351,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-05-04T23:03:18Z",
      "side": 1,
      "message": "Optional: Instead of handling these special cases, I think it is possible to make dealloc_arrays() more general and call dealloc_arrays() for these special cases.\n\ndealloc_arrays() will need to handle a null *pred_pos_luma or *pred_pos_chroma, and we will need to use aom_calloc instead of aom_malloc to allocate those two arrays here, so that they are initialized with null pointers.",
      "revId": "c045dfb8cd41443a90d9c0305984c3a50031fe5f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "270351e0_e12c6e5b",
        "filename": "av1/decoder/grain_synthesis.c",
        "patchSetId": 1
      },
      "lineNbr": 351,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-05-04T23:43:46Z",
      "side": 1,
      "message": "\u003e Optional: Instead of handling these special cases, I think it is possible to make dealloc_arrays() more general and call dealloc_arrays() for these special cases.\n\u003e \n\u003e dealloc_arrays() will need to handle a null *pred_pos_luma or *pred_pos_chroma, and we will need to use aom_calloc instead of aom_malloc to allocate those two arrays here, so that they are initialized with null pointers.\n\ndealloc would need additional parameters to signal the number of luma/chroma too. I was trying to keep the change somewhat simple, that\u0027s the reason for the special case.",
      "parentUuid": "57c43961_09ee4a44",
      "revId": "c045dfb8cd41443a90d9c0305984c3a50031fe5f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "def5f1bf_004eb859",
        "filename": "av1/decoder/grain_synthesis.c",
        "patchSetId": 1
      },
      "lineNbr": 351,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-05-05T17:15:51Z",
      "side": 1,
      "message": "I think something like this should work:\n```\n  bool failed;\n  ...\n  pred_pos_luma \u003d (int **)aom_malloc(sizeof(*pred_pos_luma) * num_pos_luma);\n  if (!pred_pos_luma) {\n    dealloc_arrays(params, pred_pos_luma_p, pred_pos_chroma_p, luma_grain_block,\n                   cb_grain_block, cr_grain_block, y_line_buf, cb_line_buf,\n                   cr_line_buf, y_col_buf, cb_col_buf, cr_col_buf);\n    return false;\n  }\n  failed \u003d false;\n  for (int row \u003d 0; row \u003c num_pos_luma; row++) {\n    pred_pos_luma[row] \u003d (int *)aom_malloc(sizeof(**pred_pos_luma) * 3);\n    if (!pred_pos_luma[row]) failed \u003d true;\n  }\n  if (failed) {\n    dealloc_arrays(params, pred_pos_luma_p, pred_pos_chroma_p, luma_grain_block,\n                   cb_grain_block, cr_grain_block, y_line_buf, cb_line_buf,\n                   cr_line_buf, y_col_buf, cb_col_buf, cr_col_buf);\n    return false;\n  }\n```\n \nAnd in dealloc_arrays(), we do:\n \n```\n  if (*pred_pos_luma) {\n    for (int row \u003d 0; row \u003c num_pos_luma; row++) {\n      aom_free((*pred_pos_luma)[row]);\n    }\n    aom_free(*pred_pos_luma);\n    *pred_pos_luma \u003d NULL;\n  }\n```",
      "parentUuid": "270351e0_e12c6e5b",
      "revId": "c045dfb8cd41443a90d9c0305984c3a50031fe5f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "264f42be_a509e12c",
        "filename": "av1/decoder/grain_synthesis.c",
        "patchSetId": 1
      },
      "lineNbr": 351,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-05-05T19:18:53Z",
      "side": 1,
      "message": "\u003e I think something like this should work:\n\u003e ```\n\u003e   bool failed;\n\u003e   ...\n\u003e   pred_pos_luma \u003d (int **)aom_malloc(sizeof(*pred_pos_luma) * num_pos_luma);\n\u003e   if (!pred_pos_luma) {\n\u003e     dealloc_arrays(params, pred_pos_luma_p, pred_pos_chroma_p, luma_grain_block,\n\u003e                    cb_grain_block, cr_grain_block, y_line_buf, cb_line_buf,\n\u003e                    cr_line_buf, y_col_buf, cb_col_buf, cr_col_buf);\n\u003e     return false;\n\u003e   }\n\u003e   failed \u003d false;\n\u003e   for (int row \u003d 0; row \u003c num_pos_luma; row++) {\n\u003e     pred_pos_luma[row] \u003d (int *)aom_malloc(sizeof(**pred_pos_luma) * 3);\n\u003e     if (!pred_pos_luma[row]) failed \u003d true;\n\u003e   }\n\u003e   if (failed) {\n\u003e     dealloc_arrays(params, pred_pos_luma_p, pred_pos_chroma_p, luma_grain_block,\n\u003e                    cb_grain_block, cr_grain_block, y_line_buf, cb_line_buf,\n\u003e                    cr_line_buf, y_col_buf, cb_col_buf, cr_col_buf);\n\u003e     return false;\n\u003e   }\n\u003e ```\n\u003e  \n\u003e And in dealloc_arrays(), we do:\n\u003e  \n\u003e ```\n\u003e   if (*pred_pos_luma) {\n\u003e     for (int row \u003d 0; row \u003c num_pos_luma; row++) {\n\u003e       aom_free((*pred_pos_luma)[row]);\n\u003e     }\n\u003e     aom_free(*pred_pos_luma);\n\u003e     *pred_pos_luma \u003d NULL;\n\u003e   }\n\u003e ```\n\nI didn\u0027t look closely enough, something like this and an added calloc could work.",
      "parentUuid": "def5f1bf_004eb859",
      "revId": "c045dfb8cd41443a90d9c0305984c3a50031fe5f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fcf62c5b_6337e9c5",
        "filename": "av1/decoder/grain_synthesis.c",
        "patchSetId": 1
      },
      "lineNbr": 351,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-05-05T19:28:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "264f42be_a509e12c",
      "revId": "c045dfb8cd41443a90d9c0305984c3a50031fe5f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7227c2c_81907f55",
        "filename": "av1/decoder/grain_synthesis.c",
        "patchSetId": 1
      },
      "lineNbr": 351,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-05-05T20:47:32Z",
      "side": 1,
      "message": "Yes, allocating those two arrays with calloc is another solution. In addition, we could use goto statements to share the error return path.",
      "parentUuid": "fcf62c5b_6337e9c5",
      "revId": "c045dfb8cd41443a90d9c0305984c3a50031fe5f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
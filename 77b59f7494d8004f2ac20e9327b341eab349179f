{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f7dea744_16d1eefe",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 13,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-10-01T00:27:35Z",
      "side": 1,
      "message": "Nit: add \"subsequent\" to \"post-processing\", because deblocking is also a post-processing filter.",
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c46a6d7_f7efaafb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 13,
      "author": {
        "id": 9616
      },
      "writtenOn": "2022-10-03T15:53:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f7dea744_16d1eefe",
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c3c80d7_ede40872",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 9616
      },
      "writtenOn": "2022-09-30T16:25:50Z",
      "side": 1,
      "message": "Hi Wan-Teh,\n\nIn the latest patchset, we have also addressed your comments in https://aomedia-review.googlesource.com/c/aom/+/163801/ to rename the function loopfilter_frame() and modify its documentation. Please review.\n\nRegards,\nRemya",
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49f05503_6f234de3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-09-30T20:47:00Z",
      "side": 1,
      "message": "Cheng: Please review. Thanks.",
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "779aeb2a_cf899c62",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 6585
      },
      "writtenOn": "2022-09-30T21:26:09Z",
      "side": 1,
      "message": "Have you consider film grain synthesize?\n\nStrictly speaking, deblocking filter, CDEF, superres, loop restoration are all in-loop filters, while film grain synthesize is out of loop.\n\nTraditionally \"loop filter\" is often used and refers to deblocking filter only.\nTherefore using \"in-loop filters\" to stand for deblocking filter, CDEF, superres, loop restoration is correct but sometimes confusing.\nSo I would agree to use post processing filter to refer to them.\n\nHowever, if you want to take film grain into consideration and disable it for ALLINTRA mode as well, the naming should be more carefully considered.",
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b85eede0_901a7ce8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 9616
      },
      "writtenOn": "2022-10-03T15:53:33Z",
      "side": 1,
      "message": "Hi Cheng,\nThank you for the clarification. \nAs per our understanding, the parameters related to film grain synthesis are estimated using source frames (denoised vs original) and there is no dependency of the estimation on the reconstructed frame. Also, we see that film grain is not applied on the reconstructed frame in the encoder. Hence we feel that this logic is not applicable for film grain case. Please let us know if our understanding is correct.",
      "parentUuid": "779aeb2a_cf899c62",
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc39f27b_18b69e78",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 6585
      },
      "writtenOn": "2022-10-04T01:11:26Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b85eede0_901a7ce8",
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87b42222_4a8b19c0",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 15
      },
      "lineNbr": 2215,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-10-01T00:27:35Z",
      "side": 1,
      "message": "If we follow the following principles:\n```\n  // ... the application of these filters can be skipped when\n  // 1. filter parameters of the subsequent stages are not dependent on the\n  // filtered output of the current stage or\n  // 2. subsequent filtering stages are disabled\n```\n\nshould we add something like the following here?\n\n```\n    if (cpi-\u003eoxcf.algo_cfg.skip_postproc_filtering \u0026\u0026\n        !cpi-\u003eppi-\u003eb_calculate_psnr \u0026\u0026\n        !av1_superres_scaled(cm) \u0026\u0026 !use_restoration) {\n      return;\n    }\n```",
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "639ebe7a_8283c7a4",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 15
      },
      "lineNbr": 2215,
      "author": {
        "id": 9616
      },
      "writtenOn": "2022-10-03T15:53:33Z",
      "side": 1,
      "message": "Please find the response along with the explanation to the query in line 2313.",
      "parentUuid": "87b42222_4a8b19c0",
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1eccba12_c4b7a411",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 15
      },
      "lineNbr": 2235,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-10-01T00:27:35Z",
      "side": 1,
      "message": "Inside this function, it seems that we can also skip applying superres if `cpi-\u003eoxcf.algo_cfg.skip_postproc_filtering \u0026\u0026 !cpi-\u003eppi-\u003eb_calculate_psnr \u0026\u0026 !use_restoration` is true.",
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcd3f6b1_5d15f1f1",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 15
      },
      "lineNbr": 2235,
      "author": {
        "id": 9616
      },
      "writtenOn": "2022-10-03T15:53:33Z",
      "side": 1,
      "message": "Please find the response along with the explanation to the query in line 2313.",
      "parentUuid": "1eccba12_c4b7a411",
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "124ab66d_ef4f86e8",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 15
      },
      "lineNbr": 2245,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-10-01T00:27:35Z",
      "side": 1,
      "message": "Should we add something like the following after this line?\n\n```\n    if (cpi-\u003eoxcf.algo_cfg.skip_postproc_filtering \u0026\u0026\n        !cpi-\u003eppi-\u003eb_calculate_psnr) {\n      return;\n    }\n```",
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "603e2612_3ab50981",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 15
      },
      "lineNbr": 2245,
      "author": {
        "id": 9616
      },
      "writtenOn": "2022-10-03T15:53:33Z",
      "side": 1,
      "message": "Please find the response along with the explanation to the query in line 2313.",
      "parentUuid": "124ab66d_ef4f86e8",
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59b54ff2_b8f385be",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 15
      },
      "lineNbr": 2313,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-10-01T00:27:35Z",
      "side": 1,
      "message": "The name of the function is \"should skip post-processing filtering\", but this comment talks about skipping \"deblocking filters\". These do not seem to match.\n\nIf the comment is correct, should this function be renamed \"should_skip_deblocking_filters\"?",
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4dde84e6_2e4935b5",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 15
      },
      "lineNbr": 2313,
      "author": {
        "id": 9616
      },
      "writtenOn": "2022-10-03T15:53:33Z",
      "side": 1,
      "message": "The function should_skip_postproc_filtering() is aimed to be a generic function which can be modified to decide all possible cases when different post-processing filtering stages can be skipped for different encoding modes. \n\nSince CDEF is disabled by default in case of ALLINTRA encode and loop restoration is disabled for speed \u003e\u003d 5, currently the case of skipping  the application of deblocking filters is only handled.\n\nYour comments in line 2215, 2235 and 2245 can be incorporated into this function but they are not required to be handled (for speed \u003e\u003d 5) due to the above mentioned reasons. Handling for speed \u003c\u003d 4 and other encoding modes would require further improvement to this logic. Hence we considered the current approach.\nPlease let us know your opinion.",
      "parentUuid": "59b54ff2_b8f385be",
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83296db7_bb7b4862",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 15
      },
      "lineNbr": 2313,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-10-04T18:24:42Z",
      "side": 1,
      "message": "Thank you for the reply. I finally understand it now -- the `skip_postproc_filtering` feature is only partially implemented in this CL.\n\nUntil `should_skip_postproc_filtering()` becomes a generic function, it would be good to add a concise version of your answer (could be based on the second paragraph of your answer) as a comment. Both Marco and I were confused about this: if the function\u0027s name says \"skip post-processing filtering\", why does it only skip deblocking filters?",
      "parentUuid": "4dde84e6_2e4935b5",
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ada1a66_ac2b7cb6",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 15
      },
      "lineNbr": 2341,
      "author": {
        "id": 6585
      },
      "writtenOn": "2022-09-30T21:26:09Z",
      "side": 1,
      "message": "const",
      "range": {
        "startLine": 2341,
        "startChar": 2,
        "endLine": 2341,
        "endChar": 6
      },
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5fa81853_2a9f724f",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 15
      },
      "lineNbr": 2341,
      "author": {
        "id": 9616
      },
      "writtenOn": "2022-10-03T15:53:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3ada1a66_ac2b7cb6",
      "range": {
        "startLine": 2341,
        "startChar": 2,
        "endLine": 2341,
        "endChar": 6
      },
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f34b551a_38a831cf",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 15
      },
      "lineNbr": 2342,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-10-01T00:27:35Z",
      "side": 1,
      "message": "Move these two lines right before line 2346.",
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94c1425a_e4bdcb83",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 15
      },
      "lineNbr": 2342,
      "author": {
        "id": 9616
      },
      "writtenOn": "2022-10-03T15:53:33Z",
      "side": 1,
      "message": "Though currently should_skip_postproc_filtering() is only handling whether the application of deblocking filters can be skipped or not, the current place is recommended as it can be in future modified to handle all possible cases when different post-processing filtering stages can be skipped. Hence, we feel that this function call should not be localized within if (use_loopfilter){}.",
      "parentUuid": "f34b551a_38a831cf",
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "356e849e_03b3fe26",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 15
      },
      "lineNbr": 2342,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-10-03T23:41:31Z",
      "side": 1,
      "message": "Optional: Thanks for the explanation. The problem is that someone who reads this code won\u0027t know about your future plans and therefore will see that the variable `skip_postproc_filtering` is set but not used when `use_loopfilter` is false. This is why I think it\u0027s better to move `skip_postproc_filtering` to the place where it is used. We can move it back when we modify `should_skip_postproc_filtering()` to handle all possible cases.",
      "parentUuid": "94c1425a_e4bdcb83",
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef077fba_d68ab0c7",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 15
      },
      "lineNbr": 2342,
      "author": {
        "id": 9616
      },
      "writtenOn": "2022-10-04T14:58:17Z",
      "side": 1,
      "message": "Done. We shall analyze the conditions for handling all possible cases along with relevant impact and get back to you.",
      "parentUuid": "356e849e_03b3fe26",
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea7ffc91_2ea80e5b",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 15
      },
      "lineNbr": 2342,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-10-04T18:06:34Z",
      "side": 1,
      "message": "Thank you.",
      "parentUuid": "ef077fba_d68ab0c7",
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cc7e0eb_28670bb4",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 15
      },
      "lineNbr": 2346,
      "author": {
        "id": 6585
      },
      "writtenOn": "2022-09-30T21:26:09Z",
      "side": 1,
      "message": "Move this line up before av1_pick_filter_level, to save unnecesary computation.",
      "range": {
        "startLine": 2346,
        "startChar": 0,
        "endLine": 2346,
        "endChar": 40
      },
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9dc1c0a_e641eb26",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 15
      },
      "lineNbr": 2346,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-10-01T00:27:35Z",
      "side": 1,
      "message": "Cheng: I suggested the same thing before. Here is Remya\u0027s answer:\n\n     The [av1_pick_filter_level()] call cannot be skipped as the filter\n     levels that are signaled in the bitstream are calculated in\n     av1_pick_filter_level().\n\nRemya: Since both Cheng and I asked about this, it would be good to add your answer as a comment.",
      "parentUuid": "8cc7e0eb_28670bb4",
      "range": {
        "startLine": 2346,
        "startChar": 0,
        "endLine": 2346,
        "endChar": 40
      },
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7dfa5029_8160b3b8",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 15
      },
      "lineNbr": 2346,
      "author": {
        "id": 9616
      },
      "writtenOn": "2022-10-03T15:53:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b9dc1c0a_e641eb26",
      "range": {
        "startLine": 2346,
        "startChar": 0,
        "endLine": 2346,
        "endChar": 40
      },
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4140d353_3475fc54",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 15
      },
      "lineNbr": 2374,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-10-01T00:27:35Z",
      "side": 1,
      "message": "I think we should find a way to skip this `extend_frame_borders(cpi)` call when `cpi-\u003ertc_ref.non_reference_frame` is true.\n\nOptional: I also think it\u0027s clearer if we move this `extend_frame_borders(cpi)` call out of this function so that this function only applies post-processing filters. This requires more thought.",
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fb79ba1_4e211c94",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 15
      },
      "lineNbr": 2374,
      "author": {
        "id": 9616
      },
      "writtenOn": "2022-10-03T15:53:33Z",
      "side": 1,
      "message": "We shall validate this and plan for a separate CL.",
      "parentUuid": "4140d353_3475fc54",
      "revId": "77b59f7494d8004f2ac20e9327b341eab349179f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
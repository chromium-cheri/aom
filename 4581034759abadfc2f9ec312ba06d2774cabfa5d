{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "67ac9320_3f5254cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 25857
      },
      "writtenOn": "2023-10-10T15:07:06Z",
      "side": 1,
      "message": "In this CL, a `longjmp` target has been introduced in `loop_restoration_row_worker()` to facilitate the error propagation in case of loop restoration multithreading. \n\nAs a thread specific `xd` is not available in the loop restoration filter stage, we introduced `error_info` in `LRWorkerData`. The same `error_info` needs to be used by the low-level functions in order to handle error propagation in multi-threaded scenarios.\n\nA flag `lr_mt_exit ` is introduced in the structure `AV1LrSync` which will be set to true in case a main/worker thread encounters an error. The other workers will terminate their jobs by checking the status of this flag.  The sync of lr workers has been abstracted into a function `sync_lr_workers()` which also reads the error status of each thread and propagates the error details in case of an error.\n\nIn case of loop restoration multithreading, each worker assigned to an even numbered filter block row waits for the completion of the filtering of the top-right and bottom-right blocks. If one of the threads encounters an error, `set_loop_restoration_done()` is invoked before returning from the hook function to avoid dependent workers from waiting indefinitely in `av1_foreach_rest_unit_in_row()`.\n\nThis change is bit-exact and has been verified using bitstream-match tests for a combination of various configuration values for --threads, --tile-rows, --tile-columns, --cpu-used, --end-usage, --row-mt, --fp-mt, etc. Validated all unit-tests with sanitizers (address and thread) and valgrind.",
      "revId": "4581034759abadfc2f9ec312ba06d2774cabfa5d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c2fc7fd4_3273efab",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-10-19T00:51:30Z",
      "side": 1,
      "message": "Nit/optional: prototypes \u003d\u003e definitions ?\n\nIn C, the word \"prototype\" is usually used with a function.",
      "revId": "3fc02a84fe5a0397a5c0df5fba3c7cacff55824c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "330d822f_7e95118e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 9611
      },
      "writtenOn": "2021-10-20T12:00:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c2fc7fd4_3273efab",
      "revId": "3fc02a84fe5a0397a5c0df5fba3c7cacff55824c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "786db22d_a34e5fbe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9611
      },
      "writtenOn": "2021-10-16T05:46:11Z",
      "side": 1,
      "message": "Hi Yunqing and Wan-Teh,\n\nThe structure MB_RD_RECORD is used to store a partition block\u0027s inter-mode txfm results under use_mb_rd_hash sf. Hence, this patch allocates the memory for MB_RD_RECORD conditionally using the sf use_mb_rd_hash. And also as a part of clean-up, we have removed  prototypes of the structures RD_RECORD_IDX_NODE and TxbRdRecords and the code related to TxbRdRecords is cleaned-up.\n\nWe have also introduced an assert to check inter block in tx_type_rd(), which was missed during the below patch submission.\nhttps://aomedia-review.googlesource.com/c/aom/+/146161/2/av1/encoder/tx_search.c#b2641\n\nFor libaom AV1 video encode, bit-match is verified (w.r.t. parent commit) for \u0027GOOD\u0027, \u0027RT\u0027 and \u0027ALLINTRA\u0027 encoding modes for a few contents with different encoding configurations. It was also verified that the output of AVIF encode is bit-exact w.r.t. parent version for a typical image dataset.\n\nWe observed ~0.33% heap memory reduction for AVIF encode with cpu-used 6 and 4 threads for 360p-720p resolutions.\n\nHEAP memory reduction was measured using the command below. \n$valgrind --tool\u003dmassif ./avifenc â€¦\n\nPlease review this patch.\n\nThanks \u0026 Regards,\nVenkata.",
      "revId": "3fc02a84fe5a0397a5c0df5fba3c7cacff55824c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37802061_55218109",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-10-19T00:14:15Z",
      "side": 1,
      "message": "Chi Yo, Fyodor: Please review. Thanks!",
      "revId": "3fc02a84fe5a0397a5c0df5fba3c7cacff55824c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b55ca470_85ea7a6b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-10-19T00:51:30Z",
      "side": 1,
      "message": "Hi Venkata,\n\nI suggest moving the cleanup changes in this CL into two new CLs.\n\nThe first one covers these two simple changes:\n1. Add back an assertion that was accidentally deleted from tx_type_rd() in https://aomedia-review.googlesource.com/c/aom/+/146161.\n2. Remove the definition of struct RD_RECORD_IDX_NODE, which is unused after https://aomedia-review.googlesource.com/c/aom/+/146161.\n\nThe second one removes struct TxbRdRecords.\n\nThen, this CL can focus on allocating MB_RD_RECORD conditionally.",
      "revId": "3fc02a84fe5a0397a5c0df5fba3c7cacff55824c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49488527_ab62b056",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-10-19T01:05:53Z",
      "side": 1,
      "message": "The removal of struct TxbRdRecords should have been done in https://aomedia-review.googlesource.com/c/aom/+/146303.",
      "parentUuid": "b55ca470_85ea7a6b",
      "revId": "3fc02a84fe5a0397a5c0df5fba3c7cacff55824c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e14417b_a9224dc3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9611
      },
      "writtenOn": "2021-10-20T12:00:55Z",
      "side": 1,
      "message": "Hi Wan-Teh,\n\nAs per the suggestion, we have segregated the current CL into following CL\u0027s.\n\n1) https://aomedia-review.googlesource.com/c/aom/+/147504\n\nThis CL, removes unused structure definition \"RD_RECORD_IDX_NODE\" and reintroduces the assert check that was removed in an earlier patch related to hash cleanup.\n \n2) https://aomedia-review.googlesource.com/c/aom/+/147505\n\nThis CL, removes the structure definition of \"TxbRdRecords\" and cleans up the code related to the same.\n\n3) The current CL, handles changes corresponding to allocating memory for MB_RD_RECORD conditionally based on sf use_mb_rd_hash.",
      "parentUuid": "49488527_ab62b056",
      "revId": "3fc02a84fe5a0397a5c0df5fba3c7cacff55824c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "250e66c8_70cc2729",
        "filename": "av1/encoder/block.h",
        "patchSetId": 1
      },
      "lineNbr": 252,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-10-19T00:51:30Z",
      "side": 1,
      "message": "Nit: This doesn\u0027t really matter, but I am just curious why you added the word \"whole\" to this comment. Is it to contrast with a partial partition block?",
      "range": {
        "startLine": 252,
        "startChar": 4,
        "endLine": 252,
        "endChar": 9
      },
      "revId": "3fc02a84fe5a0397a5c0df5fba3c7cacff55824c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38ca0bb2_c549bbe2",
        "filename": "av1/encoder/block.h",
        "patchSetId": 1
      },
      "lineNbr": 252,
      "author": {
        "id": 9611
      },
      "writtenOn": "2021-10-20T12:00:55Z",
      "side": 1,
      "message": "Hi Wan-Teh,\n\nAs per our understanding, earlier hash logic correspoding to intra/inter stores records at txfm size/type level (partial partition block level), where as the hash records of MB_RD_RECORD are stored at partition level which consists whole txfm partition tree for the correspoding whole partition block. Currenlty, as hash records are not stored at partial partition block level we can remove whole word from comment, but we thought of keeping it for better understanding \n\nThanks\u0026 Regards,\nVenkata",
      "parentUuid": "250e66c8_70cc2729",
      "range": {
        "startLine": 252,
        "startChar": 4,
        "endLine": 252,
        "endChar": 9
      },
      "revId": "3fc02a84fe5a0397a5c0df5fba3c7cacff55824c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f16dc51_9cf51a20",
        "filename": "av1/encoder/block.h",
        "patchSetId": 1
      },
      "lineNbr": 255,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-10-19T00:51:30Z",
      "side": 1,
      "message": "Nit: Also change \"txfm search\" to \"inter-mode txfm\" here?",
      "range": {
        "startLine": 255,
        "startChar": 38,
        "endLine": 255,
        "endChar": 49
      },
      "revId": "3fc02a84fe5a0397a5c0df5fba3c7cacff55824c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62b01715_bd4d0dad",
        "filename": "av1/encoder/block.h",
        "patchSetId": 1
      },
      "lineNbr": 255,
      "author": {
        "id": 9611
      },
      "writtenOn": "2021-10-20T12:00:55Z",
      "side": 1,
      "message": "Done. This change is addressed in https://aomedia-review.googlesource.com/c/aom/+/147505/1/av1/encoder/block.h#255",
      "parentUuid": "8f16dc51_9cf51a20",
      "range": {
        "startLine": 255,
        "startChar": 38,
        "endLine": 255,
        "endChar": 49
      },
      "revId": "3fc02a84fe5a0397a5c0df5fba3c7cacff55824c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cd097e4_22bdd19a",
        "filename": "av1/encoder/block.h",
        "patchSetId": 1
      },
      "lineNbr": 482,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-10-19T00:51:30Z",
      "side": 1,
      "message": "Nit: It seems better to name this field as \"mb_rd_records\" to imply that this is a dynamically-allocated array.",
      "range": {
        "startLine": 482,
        "startChar": 16,
        "endLine": 482,
        "endChar": 28
      },
      "revId": "3fc02a84fe5a0397a5c0df5fba3c7cacff55824c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a386b2a_452a8402",
        "filename": "av1/encoder/block.h",
        "patchSetId": 1
      },
      "lineNbr": 482,
      "author": {
        "id": 9611
      },
      "writtenOn": "2021-10-20T12:00:55Z",
      "side": 1,
      "message": "Done. This change is addressed in https://aomedia-review.googlesource.com/c/aom/+/147505/1/av1/encoder/block.h#482",
      "parentUuid": "3cd097e4_22bdd19a",
      "range": {
        "startLine": 482,
        "startChar": 16,
        "endLine": 482,
        "endChar": 28
      },
      "revId": "3fc02a84fe5a0397a5c0df5fba3c7cacff55824c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52dd951b_91924769",
        "filename": "av1/encoder/encodeframe_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 428,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-10-19T00:51:30Z",
      "side": 1,
      "message": "Declare this as const: const struct SPEED_FEATURES *sf,\n\nNote: It seems clearer to pass the two speed features than the whole \u0027sf\u0027 struct to this function.",
      "range": {
        "startLine": 428,
        "startChar": 41,
        "endLine": 428,
        "endChar": 66
      },
      "revId": "3fc02a84fe5a0397a5c0df5fba3c7cacff55824c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2989e363_5da9cf82",
        "filename": "av1/encoder/encodeframe_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 428,
      "author": {
        "id": 9611
      },
      "writtenOn": "2021-10-20T12:00:55Z",
      "side": 1,
      "message": "As per the suggestion, passing 2 speed features as an arguments rather than passing whole sf structure.",
      "parentUuid": "52dd951b_91924769",
      "range": {
        "startLine": 428,
        "startChar": 41,
        "endLine": 428,
        "endChar": 66
      },
      "revId": "3fc02a84fe5a0397a5c0df5fba3c7cacff55824c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
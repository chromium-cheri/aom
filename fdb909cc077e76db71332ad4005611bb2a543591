{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "aea4ceef_2b7e4599",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 9611
      },
      "writtenOn": "2021-02-05T12:38:21Z",
      "side": 1,
      "message": "Hi Wan-Teh,\n\nIn this patch, we tried reducing the bit stream buffer size for AVIF encode. \n\nIn parent version, the stream buffer is allocated as frame_size * 8. As per our understanding this should have been frame_size. Hence we tried understanding the modifications to this code (in the past) and found that the multiplication factor is introduced considering multiple no-show frames in succession. The relevant history (from VP9 encoder) can be found below:\n\nhttps://chromium-review.googlesource.com/c/webm/libvpx/+/47381/12/vp9/vp9_cx_iface.c\nhttps://chromium-review.googlesource.com/c/webm/libvpx/+/70949/2/vp9/vp9_cx_iface.c\n\nAs per our understanding, the buffer size can be reduced when lag-in-frames \u003c\u003d 1 as alt-ref frames are not enabled for this case. Also, pyramid height can be used to decide the maximum number of successive no-show frames, when lag-in-frames \u003e 1. The current patch limits the allocated stream size based on above, to reduce the HEAP memory requirements of AVIF encode. \n\nFor libaom AV1 video encode, bit match is verified (w.r.t parent commit) for few videos with different video encoding configurations.\nIt was verified that output of AVIF encode is bit-exact with parent version for a typical image dataset.\n\nFollowing are memory reduction results when AVIF encode was tested for ‘building.jpg’ (4032x3024) image at cq_level\u003d18.\n\n   Speed                 HEAP Memory\n   preset                Reduction(%)\n     6          ~21.5 (from 568.6 MB to 445.9 MB)\n\nAs this change is also applicable to both ‘good’ (with –lag-in-frames\u003d35) and ‘real-time’ (with –lag-in-frames\u003d0) configurations, we have measured the memory reduction for a 1280x720 content.\n\n   Encoding           Speed                 HEAP Memory\n   Configuration     preset                Reduction(%)\n     GOOD              6           ~1.1 (from 244.90 MB to 242.20 MB)\n     RT                7           ~14.8 (from 63.66 MB to 54.23 MB)\n\nHEAP memory reduction was measured using the command below.\n$valgrind --tool\u003dmassif ./avifenc ...\n\nThanks \u0026 Regards,\nVenkata.",
      "revId": "fdb909cc077e76db71332ad4005611bb2a543591",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "523203e0_a07b46c3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-02-08T20:04:53Z",
      "side": 1,
      "message": "Venkata: Nice reduction of heap memory consumption! I suggest adding some comments to explain how you determine the maximum number of no-show frames (or ARFs?) and why that number matters to this allocation.\n\nJingning: Please take a look. Thanks!",
      "revId": "fdb909cc077e76db71332ad4005611bb2a543591",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1cf48d0e_42084387",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 6
      },
      "lineNbr": 2132,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-02-08T20:04:53Z",
      "side": 1,
      "message": "While reviewing this CL, I found that this TODO comment should be removed. I wrote https://aomedia-review.googlesource.com/c/aom/+/129581 to do that. So you may need to update your source tree and resolve the merge conflicts.",
      "range": {
        "startLine": 2131,
        "startChar": 0,
        "endLine": 2132,
        "endChar": 74
      },
      "revId": "fdb909cc077e76db71332ad4005611bb2a543591",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cb4a98d_52274b3a",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 6
      },
      "lineNbr": 2136,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-02-08T20:04:53Z",
      "side": 1,
      "message": "Nit/optional: We can add a comment to note that this is the frame size. Alternatively, we can add a frame_sz variable:\n\n      size_t frame_sz \u003d ALIGN_POWER_OF_TWO(ctx-\u003ecfg.g_w, 5) *\n                        ALIGN_POWER_OF_TWO(ctx-\u003ecfg.g_h, 5) *\n                        get_image_bps(img) / 8;\n\nand change line 2144 to:\n\n      size_t data_sz \u003d frame_sz * max_successive_arfs_plus_1;",
      "range": {
        "startLine": 2134,
        "startChar": 0,
        "endLine": 2136,
        "endChar": 46
      },
      "revId": "fdb909cc077e76db71332ad4005611bb2a543591",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb537f4a_0cde5703",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 6
      },
      "lineNbr": 2138,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-02-08T20:04:53Z",
      "side": 1,
      "message": "Please add comments to address the following two points:\n\n1. Why do we need to multiply data_sz by the maximum number of successive ARFs plus 1 (i.e., line 2144)?\n\n2. Why is max_successive_arfs_plus_1 calculated this way? For example, you may want to describe how max_successive_arfs_plus_1 is related to the maximum number of no-show frames (which is mentioned in the commit message).\n\nI think you can just adapt your description below for a good comment here:\n\n  As per our understanding, the buffer size can be reduced when\n  lag-in-frames \u003c\u003d 1 as alt-ref frames are not enabled for this case.\n  Also, pyramid height can be used to decide the maximum number of\n  successive no-show frames, when lag-in-frames \u003e 1. The current patch\n  limits the allocated stream size based on above, to reduce the HEAP\n  memory requirements of AVIF encode.",
      "revId": "fdb909cc077e76db71332ad4005611bb2a543591",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f06ef137_6ec94142",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 6
      },
      "lineNbr": 2143,
      "author": {
        "id": 5022
      },
      "writtenOn": "2021-02-08T20:09:34Z",
      "side": 1,
      "message": "This parameter is deprecated and shall no longer have effect on the actual ARF numbers within a GOP.",
      "range": {
        "startLine": 2143,
        "startChar": 45,
        "endLine": 2143,
        "endChar": 62
      },
      "revId": "fdb909cc077e76db71332ad4005611bb2a543591",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "13cfc897_4c7a66b3",
        "filename": "av1/av1_dx_iface.c",
        "patchSetId": 5
      },
      "lineNbr": 154,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-02T21:43:46Z",
      "side": 1,
      "message": "To free the memory allocated by the aom_img_add_metadata() call at line 808, we need to call either of the following two functions here:\n\n  // Alternatively call aom_img_remove_metadata(\u0026ctx-\u003eimg).\n  aom_img_free(\u0026ctx-\u003eimg);\n\nThis leak was reported in bug oss-fuzz:19157.",
      "revId": "9bca352705baa7f5da83315780e97b6ccb6c20fa",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b8db3e2_c0ffe676",
        "filename": "av1/decoder/decoder.h",
        "patchSetId": 5
      },
      "lineNbr": 246,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-02T19:37:19Z",
      "side": 1,
      "message": "av1_decoder_remove() in av1/decoder/decoder.c needs to call aom_img_metadata_array_free(pbi-\u003emetadata).",
      "revId": "9bca352705baa7f5da83315780e97b6ccb6c20fa",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1705e65b_4f2b019e",
        "filename": "av1/decoder/decoder.h",
        "patchSetId": 5
      },
      "lineNbr": 246,
      "author": {
        "id": 14148
      },
      "writtenOn": "2019-12-02T21:21:05Z",
      "side": 1,
      "message": "Got it, this seems more general solution than my idea of freeing it on both cases of decoder_get_frame().",
      "parentUuid": "2b8db3e2_c0ffe676",
      "revId": "9bca352705baa7f5da83315780e97b6ccb6c20fa",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0e6375a_54f593ee",
        "filename": "av1/decoder/decoder.h",
        "patchSetId": 5
      },
      "lineNbr": 246,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-02T21:43:46Z",
      "side": 1,
      "message": "The aom_img_metadata_array_free(pbi-\u003emetadata) call I suggested is intended to free the memory allocated by the aom_img_metadata_array_alloc() calls in read_metadata_itut_t35(). This leak was reported in bug oss-fuzz:19118.",
      "parentUuid": "2b8db3e2_c0ffe676",
      "revId": "9bca352705baa7f5da83315780e97b6ccb6c20fa",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23f54083_3cb54536",
        "filename": "av1/decoder/decoder.h",
        "patchSetId": 5
      },
      "lineNbr": 246,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-02T21:56:08Z",
      "side": 1,
      "message": "Daniel: Just saw your reply. I did not look into your idea of freeing it on both cases of decoder_get_frame(). The fix I suggested is the general solution of freeing the memory in the \"destructor\" function. (av1_decoder_remove() is the \"destructor\" function for the AV1Decoder struct.) So the more general solution may be more robust to future changes.",
      "parentUuid": "f0e6375a_54f593ee",
      "revId": "9bca352705baa7f5da83315780e97b6ccb6c20fa",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0adba778_bcf9308b",
        "filename": "av1/decoder/obu.c",
        "patchSetId": 5
      },
      "lineNbr": 565,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-02T20:24:30Z",
      "side": 1,
      "message": "We need to check for aom_img_metadata_array_alloc() failure here.",
      "range": {
        "startLine": 562,
        "startChar": 0,
        "endLine": 565,
        "endChar": 60
      },
      "revId": "9bca352705baa7f5da83315780e97b6ccb6c20fa",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25ec9a42_1f8b0922",
        "filename": "av1/decoder/obu.c",
        "patchSetId": 5
      },
      "lineNbr": 565,
      "author": {
        "id": 14148
      },
      "writtenOn": "2019-12-02T21:21:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0adba778_bcf9308b",
      "range": {
        "startLine": 562,
        "startChar": 0,
        "endLine": 565,
        "endChar": 60
      },
      "revId": "9bca352705baa7f5da83315780e97b6ccb6c20fa",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2dcc3d1d_50ad9e5e",
        "filename": "av1/decoder/obu.c",
        "patchSetId": 5
      },
      "lineNbr": 577,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-02T19:37:19Z",
      "side": 1,
      "message": "This part seems wrong.\n\n1. If we want to copy the entire metadata OBU, we should pass \u0027sz\u0027, not \u0027sz - 1\u0027, as the third argument to aom_img_metadata_alloc().\n\n2. Ideally we should not copy the trailing bits in the metadata OBU. This requires using a variant of the code at lines 714-723 to find the beginning of the trailing bits, and then copying up to but not including the trailing bits.",
      "range": {
        "startLine": 575,
        "startChar": 0,
        "endLine": 577,
        "endChar": 16
      },
      "revId": "9bca352705baa7f5da83315780e97b6ccb6c20fa",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbd390a8_533ed447",
        "filename": "av1/decoder/obu.c",
        "patchSetId": 5
      },
      "lineNbr": 577,
      "author": {
        "id": 14148
      },
      "writtenOn": "2019-12-02T21:21:05Z",
      "side": 1,
      "message": "Thanks! Had solved with the same idea\n\n  size_t bytes_read \u003d get_last_nonzero_byte_index(data, sz); //new function that gets the index\n  pbi-\u003emetadata-\u003emetadata_array[pbi-\u003emetadata-\u003esz - 1] \u003d\n      aom_img_metadata_alloc(OBU_METADATA_TYPE_ITUT_T35, data, bytes_read);\n  return bytes_read;",
      "parentUuid": "2dcc3d1d_50ad9e5e",
      "range": {
        "startLine": 575,
        "startChar": 0,
        "endLine": 577,
        "endChar": 16
      },
      "revId": "9bca352705baa7f5da83315780e97b6ccb6c20fa",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1b0f316_2ca9a034",
        "filename": "av1/decoder/obu.c",
        "patchSetId": 5
      },
      "lineNbr": 577,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-02T21:56:08Z",
      "side": 1,
      "message": "This is exactly the fix I had in mind. Thanks!\n\nThe only improvement I want to suggest is error handling: the \u0027data\u0027 buffer may contain all zero bytes. In that case, there are no trailing bits. We need to report that as an error (by calling aom_internal_error()).",
      "parentUuid": "fbd390a8_533ed447",
      "range": {
        "startLine": 575,
        "startChar": 0,
        "endLine": 577,
        "endChar": 16
      },
      "revId": "9bca352705baa7f5da83315780e97b6ccb6c20fa",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    }
  ]
}
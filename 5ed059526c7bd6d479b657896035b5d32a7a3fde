{
  "comments": [
    {
      "key": {
        "uuid": "7ca94b78_b8c99ed5",
        "filename": "av1/decoder/decodeframe.c",
        "patchSetId": 8
      },
      "lineNbr": 2297,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-06-24T00:44:27Z",
      "side": 1,
      "message": "If you\u0027d like to avoid the division, something like\n\naom_cdf_prob ft \u003d CDF_PROB_TOP - c0;\naom_cdf_prob d \u003d CDF_PROB_TOP - (ft \u003c\u003c (CDF_PROB_BITS - get_msb(ft) - 1));\naom_cdf_prob p1 \u003d c1 - c0;\nright_e_cdf[0] \u003d AOM_ICDF(p1 + AOMMIN(p1, d));\n\nis relatively cheap to compute and should have minimal performance loss.\n\nHowever, both your code and my rewrite above make the probability of PARTITION_SPLIT proportional to the probability of PARTITION_VERT + PARTITION_SPLIT in this case, but in the block below, PARTITION_SPLIT is just proportional to the probability of PARTITION_SPLIT.\n\nWas that intentional, or did you mean to use (c1 - c0) + (CDF_PROB_TOP - AOM_ICDF(partition_cdf[2])) instead of (32768U - c0)?",
      "revId": "5ed059526c7bd6d479b657896035b5d32a7a3fde",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c29fab1c_5bd9a840",
        "filename": "av1/decoder/decodeframe.c",
        "patchSetId": 8
      },
      "lineNbr": 2297,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-06-24T00:58:37Z",
      "side": 1,
      "message": "\u003e aom_cdf_prob ft \u003d CDF_PROB_TOP - c0;\n \u003e aom_cdf_prob d \u003d CDF_PROB_TOP - (ft \u003c\u003c (CDF_PROB_BITS - get_msb(ft)\n \u003e - 1));\n \u003e aom_cdf_prob p1 \u003d c1 - c0;\n \u003e right_e_cdf[0] \u003d AOM_ICDF(p1 + AOMMIN(p1, d));\n\nSorry, this should work better:\n\naom_cdf_prob ft \u003d CDF_PROB_TOP - c0 /* or (c1 - c0) + (CDF_PROB_TOP - AOM_ICDF(partition_cdf[2]))*/;\nint s \u003d CDF_PROB_BITS - get_msb(ft) - 1;\naom_cdf_prob d \u003d CDF_PROB_TOP - (ft \u003c\u003c s);\naom_cdf_prob p1 \u003d (c1 - c0) \u003c\u003c s;\nright_e_cdf[0] \u003d AOM_ICDF(p1 + AOMMIN(p1, d));",
      "parentUuid": "7ca94b78_b8c99ed5",
      "revId": "5ed059526c7bd6d479b657896035b5d32a7a3fde",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0edb9ec_9da0e6a6",
        "filename": "av1/decoder/decodeframe.c",
        "patchSetId": 8
      },
      "lineNbr": 2297,
      "author": {
        "id": 5545
      },
      "writtenOn": "2017-06-26T19:48:42Z",
      "side": 1,
      "message": "Tim,\n\nThanks for the review. I have a couple of questions. First of all I am sorry for the division, I don\u0027t know how it sneaked into my code. I am not sure I understand the approximation you\u0027ve chosen though. The first thing that comes to my mind is replacing the division with a shift, but in that case it would be something like:\n\naom_cdf_prob den \u003d CDF_PROB_TOP - c0;\nright_e_cdf[0] \u003d AOM_ICDF( (c1 - c0) \u003c\u003c (CDF_PROB_BITS - get_msb(den)))\n\nAs for the right_e_cdf calculation I think in the original tree p1 is selecting between the PARTITION_HORZ and the subtree with both PATRITION_VERT + PARTITION_SPLIT on it (please correct me if I am wrong). So my implementation should pretty much match the original code. Since there\u0027s no second vertical stripe of that partition (due to the tile boundary) the HORZ is implied here, so both VERT and SPLIT fall into the same category.",
      "parentUuid": "c29fab1c_5bd9a840",
      "revId": "5ed059526c7bd6d479b657896035b5d32a7a3fde",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f897992c_a03ac84e",
        "filename": "av1/decoder/decodeframe.c",
        "patchSetId": 8
      },
      "lineNbr": 2298,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-06-24T00:44:27Z",
      "side": 1,
      "message": "If we still intend to support !CONFIG_EC_SMALLMUL, then this hard-coded 0 should be AOM_ICDF(CDF_PROB_TOP) instead.",
      "revId": "5ed059526c7bd6d479b657896035b5d32a7a3fde",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79f2e28f_ff5f26fb",
        "filename": "av1/decoder/decodeframe.c",
        "patchSetId": 8
      },
      "lineNbr": 2309,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-06-24T00:44:27Z",
      "side": 1,
      "message": "Same here.",
      "revId": "5ed059526c7bd6d479b657896035b5d32a7a3fde",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    }
  ]
}
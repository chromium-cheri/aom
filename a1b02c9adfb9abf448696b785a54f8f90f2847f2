{
  "comments": [
    {
      "key": {
        "uuid": "52c86833_e2258b48",
        "filename": "av1/decoder/decoder.c",
        "patchSetId": 6
      },
      "lineNbr": 263,
      "author": {
        "id": 5975
      },
      "writtenOn": "2018-05-09T13:29:26Z",
      "side": 1,
      "message": "Is the idea of this code to avoid re-saving the ref slots when we have a decoded frame followed by a skipped frame?\n\nIt seems that the inverse case (a skipped frame followed by a decoded frame) doesn\u0027t work - this case can arise in an S2T1 scalable stream, where we have two spatial layers which are coded independently, and we can choose between decoding the first layer only or the second layer only.\n\nThe issue is that, currently, pbi-\u003edropped_obus is set if we\u0027ve dropped any OBUs so far within the current temporal unit. If we\u0027re decoding the higher layer of an S2T1 stream, this will *always* be the case, even immediately after decoding a real frame. This is because we skip the frames in the first layer and decode the frames in the second second layer.\n\nI think this should be solvable by resetting pbi-\u003edropped_obus to 0 when we actually decode a frame. Does this match your understanding of this code?",
      "range": {
        "startLine": 263,
        "startChar": 0,
        "endLine": 263,
        "endChar": 27
      },
      "revId": "a1b02c9adfb9abf448696b785a54f8f90f2847f2",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65797d5b_1d3481db",
        "filename": "av1/decoder/decoder.c",
        "patchSetId": 6
      },
      "lineNbr": 263,
      "author": {
        "id": 8487
      },
      "writtenOn": "2018-05-09T13:34:36Z",
      "side": 1,
      "message": "Do you have a recipe for generating an S2T1 stream? It would be nice to test this with actual streams.",
      "parentUuid": "52c86833_e2258b48",
      "range": {
        "startLine": 263,
        "startChar": 0,
        "endLine": 263,
        "endChar": 27
      },
      "revId": "a1b02c9adfb9abf448696b785a54f8f90f2847f2",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13dcd4b4_1f04c8b9",
        "filename": "av1/decoder/decoder.c",
        "patchSetId": 6
      },
      "lineNbr": 263,
      "author": {
        "id": 5975
      },
      "writtenOn": "2018-05-09T13:56:11Z",
      "side": 1,
      "message": "Only with our proprietary encoder, I\u0027m afraid - but I will email you a stream which demonstrates the issue. Hope that helps!",
      "parentUuid": "65797d5b_1d3481db",
      "range": {
        "startLine": 263,
        "startChar": 0,
        "endLine": 263,
        "endChar": 27
      },
      "revId": "a1b02c9adfb9abf448696b785a54f8f90f2847f2",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0be5376_35f13a82",
        "filename": "av1/decoder/decoder.c",
        "patchSetId": 6
      },
      "lineNbr": 263,
      "author": {
        "id": 7963
      },
      "writtenOn": "2018-05-09T13:57:21Z",
      "side": 1,
      "message": "One possible way to generate an S2T1 stream is to slightly modify the existing scalable_encoder example.  When configuring the enhancement layer coding, after line 258, add the line\n\nflags |\u003d AOM_EFLAG_NO_REF_LAST;\n\nI believe this will create an S2T1 frame, albeit somewhat dumb  (the enhancement layer will be coded as INTER frames but all blocks will be intra mode)",
      "parentUuid": "65797d5b_1d3481db",
      "range": {
        "startLine": 263,
        "startChar": 0,
        "endLine": 263,
        "endChar": 27
      },
      "revId": "a1b02c9adfb9abf448696b785a54f8f90f2847f2",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79974e17_b61cb53f",
        "filename": "av1/decoder/decoder.c",
        "patchSetId": 6
      },
      "lineNbr": 263,
      "author": {
        "id": 5975
      },
      "writtenOn": "2018-05-09T14:02:42Z",
      "side": 1,
      "message": "Would that set the correct operating points for S2T1 mode? The issue is due to having an operating point which only decodes spatial layer 1 and not spatial layer 0. So if you wanted to generate a test stream that way, you might also have to hack up the operating points generated by libaom.\n\nI\u0027ll still send a test stream, just to be sure we\u0027re looking at the same thing",
      "parentUuid": "c0be5376_35f13a82",
      "range": {
        "startLine": 263,
        "startChar": 0,
        "endLine": 263,
        "endChar": 27
      },
      "revId": "a1b02c9adfb9abf448696b785a54f8f90f2847f2",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52ccf31b_33b32f92",
        "filename": "av1/decoder/decoder.c",
        "patchSetId": 6
      },
      "lineNbr": 263,
      "author": {
        "id": 8487
      },
      "writtenOn": "2018-05-09T14:03:30Z",
      "side": 1,
      "message": "David: please email that stream. Would be very helpful.\nSoo-Chul: would that actually qualify as an S2T1 stream? There may still be dependencies related to entropy coding?",
      "parentUuid": "c0be5376_35f13a82",
      "range": {
        "startLine": 263,
        "startChar": 0,
        "endLine": 263,
        "endChar": 27
      },
      "revId": "a1b02c9adfb9abf448696b785a54f8f90f2847f2",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f969812_2ca123d0",
        "filename": "av1/decoder/decoder.c",
        "patchSetId": 6
      },
      "lineNbr": 263,
      "author": {
        "id": 7963
      },
      "writtenOn": "2018-05-09T14:20:01Z",
      "side": 1,
      "message": "Frank:  That is a good point.  I am assuming that setting the AOM_EFLAG_NO_UPD_ENTROPY flag removes the entropy-coding dependencies, but it is merely an assumption.",
      "parentUuid": "52ccf31b_33b32f92",
      "range": {
        "startLine": 263,
        "startChar": 0,
        "endLine": 263,
        "endChar": 27
      },
      "revId": "a1b02c9adfb9abf448696b785a54f8f90f2847f2",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86a28380_781774ab",
        "filename": "av1/decoder/decoder.c",
        "patchSetId": 6
      },
      "lineNbr": 263,
      "author": {
        "id": 8487
      },
      "writtenOn": "2018-05-09T15:05:23Z",
      "side": 1,
      "message": "Soo-Chul: you are right. AOM_EFLAG_NO_UPD_ENTROPY should remove the entropy-coding dependency. However I think that the scalable_encoder example would still not generate a stream where an operating point is defined such as to exclude the \"base\" layer, which is the case that David pointed out as being problematic.",
      "parentUuid": "1f969812_2ca123d0",
      "range": {
        "startLine": 263,
        "startChar": 0,
        "endLine": 263,
        "endChar": 27
      },
      "revId": "a1b02c9adfb9abf448696b785a54f8f90f2847f2",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d6a19b7_f669bed3",
        "filename": "av1/decoder/decoder.c",
        "patchSetId": 6
      },
      "lineNbr": 263,
      "author": {
        "id": 7963
      },
      "writtenOn": "2018-05-09T15:54:12Z",
      "side": 1,
      "message": "Yes, I agree that the scalable stream generated according to my suggestion would only be decodable according to operating_point_idc[0] (all layers), which really doesn\u0027t help with the purpose of this patch (unless we hack the setting of the operating point, as David said).  It would still be a valid bitstream, I think.",
      "parentUuid": "86a28380_781774ab",
      "range": {
        "startLine": 263,
        "startChar": 0,
        "endLine": 263,
        "endChar": 27
      },
      "revId": "a1b02c9adfb9abf448696b785a54f8f90f2847f2",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f521e3d_14d64a8f",
        "filename": "av1/decoder/obu.c",
        "patchSetId": 6
      },
      "lineNbr": 571,
      "author": {
        "id": 5975
      },
      "writtenOn": "2018-05-09T13:56:11Z",
      "side": 1,
      "message": "Related to my other comment, everything seems to decode properly if we add a line \"pbi-\u003edropped_obus \u003d 0;\" at the start of this block",
      "range": {
        "startLine": 568,
        "startChar": 0,
        "endLine": 571,
        "endChar": 36
      },
      "revId": "a1b02c9adfb9abf448696b785a54f8f90f2847f2",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1ae4de27_6b121bc8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-11T20:01:56Z",
      "side": 1,
      "message": "LGTM. I have some questions.\n\nPlease make the function parameter type change in a separate CL.",
      "revId": "3273418e1294e3db52c27be78a94e279da8305f4",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a23d326_3db54606",
        "filename": "aom_dsp/flow_estimation/arm/disflow_neon.c",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-11T20:01:56Z",
      "side": 1,
      "message": "Declare the `kernel` parameter as `double kernel[4]`.\n\nSome compilers (such as GCC) can check the buffer passed to the function is at least that size.",
      "revId": "3273418e1294e3db52c27be78a94e279da8305f4",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc0f7a17_f3df043e",
        "filename": "aom_dsp/flow_estimation/arm/disflow_neon.c",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-11T20:01:56Z",
      "side": 1,
      "message": "Declare the `kernel` parameter as `int kernel[4]`.\n\nSome compilers (such as GCC) can check the buffer passed to the function is at least that size.",
      "revId": "3273418e1294e3db52c27be78a94e279da8305f4",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6922ebbf_80f8f769",
        "filename": "aom_dsp/flow_estimation/arm/disflow_neon.c",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-11T20:01:56Z",
      "side": 1,
      "message": "Should we use the libc `modf` function?\n\nhttps://en.cppreference.com/w/c/numeric/math/modf",
      "revId": "3273418e1294e3db52c27be78a94e279da8305f4",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "92ea37f5_0a568f84",
        "filename": "aom_dsp/flow_estimation/arm/disflow_neon.c",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 29052
      },
      "writtenOn": "2023-12-11T20:12:11Z",
      "side": 1,
      "message": "Unfortunately that doesn\u0027t do what we want. This page makes it a bit clearer: https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/modf-modff-modfl?view\u003dmsvc-170\n\n\u003e For -14.876543, the fraction [computed by modf] is -0.876543 and the integer is -14\n\nwhereas what we want in this situation is for the integer part to be -15 and the fractional part to be +0.123457.\n\nUnfortunately I don\u0027t think there is a single function which does what we want, I\u0027m reasonably sure that what I have written is the simplest way to do it.",
      "parentUuid": "6922ebbf_80f8f769",
      "revId": "3273418e1294e3db52c27be78a94e279da8305f4",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e99ba37f_c231a52c",
        "filename": "aom_dsp/flow_estimation/arm/disflow_neon.c",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-11T20:01:56Z",
      "side": 1,
      "message": "It makes me wonder if it would be better to check if `u_frac` is 1 here and change it to 0 and add 1 to `u_int`.",
      "revId": "3273418e1294e3db52c27be78a94e279da8305f4",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27afa858_0864526e",
        "filename": "aom_dsp/flow_estimation/arm/disflow_neon.c",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 29052
      },
      "writtenOn": "2023-12-11T20:12:11Z",
      "side": 1,
      "message": "We could do this in theory, but honestly there\u0027s no reason to. The kernel construction function still constructs the correct kernel when passed x\u003d1.",
      "parentUuid": "e99ba37f_c231a52c",
      "revId": "3273418e1294e3db52c27be78a94e279da8305f4",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "3273418e1294e3db52c27be78a94e279da8305f4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "3273418e1294e3db52c27be78a94e279da8305f4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "3273418e1294e3db52c27be78a94e279da8305f4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
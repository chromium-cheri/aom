{
  "comments": [
    {
      "key": {
        "uuid": "10fdb13a_6eec0445",
        "filename": "av1/encoder/cost.c",
        "patchSetId": 4
      },
      "lineNbr": 68,
      "author": {
        "id": 5046
      },
      "writtenOn": "2017-06-21T16:46:37Z",
      "side": 1,
      "message": "This can be replaced with:\n\n    const aom_cdf_prob p15 \u003d OD_ICDF(cdf[i]) - (i \u003e 0 ? OD_ICDF(cdf[i - 1]) : 0);\n\nwhich encapsulates the CONFIG_EC_SMALLMUL #define.",
      "revId": "5b0f5174a38fbd165c2c4ca64bab5c3e8f1c01f1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "278f9c36_f5e8a273",
        "filename": "av1/encoder/cost.c",
        "patchSetId": 4
      },
      "lineNbr": 68,
      "author": {
        "id": 5975
      },
      "writtenOn": "2017-06-21T17:29:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "10fdb13a_6eec0445",
      "revId": "5b0f5174a38fbd165c2c4ca64bab5c3e8f1c01f1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0de639db_9f8c492c",
        "filename": "av1/encoder/cost.c",
        "patchSetId": 4
      },
      "lineNbr": 73,
      "author": {
        "id": 5046
      },
      "writtenOn": "2017-06-21T16:46:37Z",
      "side": 1,
      "message": "Eventually it would be nice to reorder all of the CDFs so that we do not need the ind/inv mappings, but this is a perfectly fine workaround for now.",
      "revId": "5b0f5174a38fbd165c2c4ca64bab5c3e8f1c01f1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff6c30db_fdfd36d7",
        "filename": "av1/encoder/cost.c",
        "patchSetId": 4
      },
      "lineNbr": 73,
      "author": {
        "id": 5975
      },
      "writtenOn": "2017-06-21T17:29:51Z",
      "side": 1,
      "message": "The mappings do provide a convenient way to make options impossible to encode even if they\u0027re at the start/in the middle of an enum. Otherwise you either have to assign a probability of 0 (and hope nothing breaks) or 1/2^15 (and waste a bit of space).\n\nThat said, if the entropy coder explicitly supported zero probabilities for this case, then we could remove the maps. Probably after this patch + the dead-code-removal patch which will land soon, so that we don\u0027t have to also deal with coding trees.",
      "parentUuid": "0de639db_9f8c492c",
      "revId": "5b0f5174a38fbd165c2c4ca64bab5c3e8f1c01f1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "159e0477_4351925a",
        "filename": "av1/encoder/cost.c",
        "patchSetId": 4
      },
      "lineNbr": 73,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-06-21T23:52:01Z",
      "side": 1,
      "message": "Making options impossible to encode on a symbol-by-symbol basis within a single CDF is incompatible with per-symbol adaptation.\n\nIt\u0027s particularly never going to work with ec_adapt, which structurally guarantees probabilities never go to zero and always sum to CDF_PROB_TOP.\n\nIf you want to change the set of values that can be coded, you either need a separate context or you need to map the full CDF to a subset (rescaling to maintain the sum to CDF_PROB_TOP). The latter option is relatively expensive, and re-ordering the symbols doesn\u0027t make it any cheaper.",
      "parentUuid": "ff6c30db_fdfd36d7",
      "revId": "5b0f5174a38fbd165c2c4ca64bab5c3e8f1c01f1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0248e4ba_a4aae6c4",
        "filename": "av1/encoder/cost.c",
        "patchSetId": 4
      },
      "lineNbr": 80,
      "author": {
        "id": 5046
      },
      "writtenOn": "2017-06-21T16:46:37Z",
      "side": 1,
      "message": "This can be replaced with:\n\n    if (cdf[i] \u003d\u003d OD_ICDF(0)) {\n\nwhich encapsulates the CONFIG_EC_SMALLMUL #define.",
      "revId": "5b0f5174a38fbd165c2c4ca64bab5c3e8f1c01f1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6dae3ae6_6d5885c0",
        "filename": "av1/encoder/cost.c",
        "patchSetId": 4
      },
      "lineNbr": 80,
      "author": {
        "id": 5046
      },
      "writtenOn": "2017-06-21T17:16:23Z",
      "side": 1,
      "message": "Apologies, this should use AOM_ICDF() instead of OD_ICDF() and should have also used the CDF_PROB_TOP constant, e.g.,\n\nif (cdf[i] \u003d\u003d AOM_ICDF(CDF_PROB_TOP)) break;\n\nFor clarity, it might be better to compute the p15 value in the same iterative manner done in av1/common/entropy.c:5342 build_tail_cdfs().  Maybe something like:\n\nint i;\naom_cdf_prob prev_cdf;\nprev_cdf \u003d 0;\nfor (i \u003d 0; ; i++) {\n  const aom_cdf_prob p15 \u003d AOM_ICDF(cdf[i]) - prev_cdf;\n  prev_cdf \u003d AOM_ICDF(cdf[i]);\n\n  if (inv_map) {\n    costs[inv_map[i]] \u003d av1_cost_symbol(p15);\n  }\n  else {\n    costs[i] \u003d av1_cost_symbol(p15);\n  }\n\n  if (cdf[i] \u003d\u003d AOM_ICDF(CDF_PROB_TOP)) {\n    break;\n  }\n}",
      "parentUuid": "0248e4ba_a4aae6c4",
      "revId": "5b0f5174a38fbd165c2c4ca64bab5c3e8f1c01f1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c153b1cf_eec5028b",
        "filename": "av1/encoder/cost.c",
        "patchSetId": 4
      },
      "lineNbr": 80,
      "author": {
        "id": 5975
      },
      "writtenOn": "2017-06-21T17:29:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6dae3ae6_6d5885c0",
      "revId": "5b0f5174a38fbd165c2c4ca64bab5c3e8f1c01f1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34e31207_da23f577",
        "filename": "av1/encoder/cost.h",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 5046
      },
      "writtenOn": "2017-06-21T16:46:37Z",
      "side": 1,
      "message": "Can this happen?  If you are seeing this, it means two adjacent CDF values are the same which would mean that the probability of that symbol is 0 (which seems bad).\n\nMaybe replace this with assert(p15 \u003e 0 \u0026\u0026 p15 \u003c 32768)",
      "revId": "5b0f5174a38fbd165c2c4ca64bab5c3e8f1c01f1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09215942_60612e83",
        "filename": "av1/encoder/cost.h",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 5975
      },
      "writtenOn": "2017-06-21T17:29:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "34e31207_da23f577",
      "revId": "5b0f5174a38fbd165c2c4ca64bab5c3e8f1c01f1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    }
  ]
}
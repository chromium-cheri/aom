{
  "comments": [
    {
      "key": {
        "uuid": "7a77297c_21849ab8",
        "filename": "av1/common/av1_rtcd_defs.pl",
        "patchSetId": 3
      },
      "lineNbr": 151,
      "author": {
        "id": 5435
      },
      "writtenOn": "2018-04-16T14:46:18Z",
      "side": 1,
      "message": "These should be on the same line\nspecialize qw/av1_build_compound_diffwtd_mask_highbd ssse3 avx2/;\n\nThey functions should also be grouped together:\nadd_proto qw/void av1_build_compound_diffwtd_mask/, \"uint8_t *mask, DIFFWTD_MASK_TYPE mask_type, const uint8_t *src0, int src0_stride, const uint8_t *src1, int src1_stride, int h, int w\";\nspecialize qw/av1_build_compound_diffwtd_mask sse4_1/;\n\nadd_proto qw/void av1_build_compound_diffwtd_mask_highbd/, \"uint8_t *mask, DIFFWTD_MASK_TYPE mask_type, const uint8_t *src0, int src0_stride, const uint8_t *src1, int src1_stride, int h, int w, int bd\";\nspecialize qw/av1_build_compound_diffwtd_mask_highbd ssse3 avx2/;",
      "range": {
        "startLine": 151,
        "startChar": 53,
        "endLine": 151,
        "endChar": 58
      },
      "revId": "cab1e7e8250de7377040bde1dfabd74e925d9e04",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "830588aa_266ed706",
        "filename": "av1/common/av1_rtcd_defs.pl",
        "patchSetId": 3
      },
      "lineNbr": 151,
      "author": {
        "id": 9370
      },
      "writtenOn": "2018-04-17T18:46:36Z",
      "side": 1,
      "message": "Thank you for the review.\nI updated the file with Patch Set 4.",
      "parentUuid": "7a77297c_21849ab8",
      "range": {
        "startLine": 151,
        "startChar": 53,
        "endLine": 151,
        "endChar": 58
      },
      "revId": "cab1e7e8250de7377040bde1dfabd74e925d9e04",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1aa6bb73_1243ac05",
        "filename": "av1/common/x86/reconinter_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 19,
      "author": {
        "id": 5435
      },
      "writtenOn": "2018-04-16T14:46:18Z",
      "side": 1,
      "message": "Are you sure you want FORCE_INLINE? Why is INLINE not sufficient?",
      "range": {
        "startLine": 19,
        "startChar": 7,
        "endLine": 19,
        "endChar": 23
      },
      "revId": "cab1e7e8250de7377040bde1dfabd74e925d9e04",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c9014f9_d65a6673",
        "filename": "av1/common/x86/reconinter_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 19,
      "author": {
        "id": 9370
      },
      "writtenOn": "2018-04-17T18:42:11Z",
      "side": 1,
      "message": "Only the value of `which_inverse` argument varies and it\u0027s simply decided based on `mask_type` value of caller function. So compilers should simply inline this function but sometimes they are conservative to do so.\n\nPlease refer\nhttps://aomedia-review.googlesource.com/c/aom/+/55421\n\nI optimized `diffwtd_mask_highbd` function in file `av1/common/reconinter.c` and I think it\u0027s related to this change. It seems like the compiler I use (VC++ 14.1) is conservative about optimizing loops.\n\nI guess leaving INLINE keyword isn\u0027t much of a problem as it only adds call instructions outside of inner loops. But I\u0027d rather abuse the overriding keyword to squeeze a little bif of performance.",
      "parentUuid": "1aa6bb73_1243ac05",
      "range": {
        "startLine": 19,
        "startChar": 7,
        "endLine": 19,
        "endChar": 23
      },
      "revId": "cab1e7e8250de7377040bde1dfabd74e925d9e04",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    }
  ]
}
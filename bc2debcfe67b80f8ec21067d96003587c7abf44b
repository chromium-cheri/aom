{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cb5510a4_9c2e6682",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 3
      },
      "lineNbr": 886,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-10-06T16:58:06Z",
      "side": 0,
      "message": "is lr_sync used somewhere outside of a check on this? Could some value just be zeroed if this is false?",
      "revId": "bc2debcfe67b80f8ec21067d96003587c7abf44b",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12ed67c2_9b72901c",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 3
      },
      "lineNbr": 886,
      "author": {
        "id": 6585
      },
      "writtenOn": "2023-10-06T17:20:53Z",
      "side": 0,
      "message": "It is tricky. Is_restoration_used depends on if this frame is coded losslessly, which the encoder would make a decision during coding.\n\nIn the unit test, the input is all zero, so the encoder will code it losslesly.\nAnd then the encoder will change is_restoration_used to false.\n\nNow the problem comes: when coding the next resized image, this condition will block the execution of this section of code, where the number of workers are not properly reallocated, leading to potential failures.\n\nTherefore, I think instead of depending on encoder\u0027s inner loop to determine whether to execute (de)allocation of loop restoration workers, we\u0027d better just always do the reallocation.",
      "parentUuid": "cb5510a4_9c2e6682",
      "revId": "bc2debcfe67b80f8ec21067d96003587c7abf44b",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
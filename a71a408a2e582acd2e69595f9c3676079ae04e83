{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ab0ba875_7c73ad7f",
        "filename": "aom_dsp/grain_table.c",
        "patchSetId": 4
      },
      "lineNbr": 251,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-05-05T16:54:46Z",
      "side": 1,
      "message": "A problem with returning 0 (false) here is that out-of-memory error is indistinguishable from \"not found\". I don\u0027t have a good solution. We can return -1 to indicate out-of-memory error, but we will need to update test/film_grain_table_test.cc to not use EXPECT_FALSE and EXPECT_TRUE with aom_film_grain_table_lookup().",
      "revId": "a71a408a2e582acd2e69595f9c3676079ae04e83",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3fb911c_d6d179dd",
        "filename": "aom_dsp/grain_table.c",
        "patchSetId": 4
      },
      "lineNbr": 251,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-05-05T19:11:24Z",
      "side": 1,
      "message": "\u003e A problem with returning 0 (false) here is that out-of-memory error is indistinguishable from \"not found\". I don\u0027t have a good solution. We can return -1 to indicate out-of-memory error, but we will need to update test/film_grain_table_test.cc to not use EXPECT_FALSE and EXPECT_TRUE with aom_film_grain_table_lookup().\n\nYou\u0027re right, I played it safe in this pass. The only use in the encoder is to set \u0027film_grain_params_present\u0027 so it shouldn\u0027t harm anything and presumably there would be other issues if we\u0027re OOM\u0027ing here.",
      "parentUuid": "ab0ba875_7c73ad7f",
      "revId": "a71a408a2e582acd2e69595f9c3676079ae04e83",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "a71a408a2e582acd2e69595f9c3676079ae04e83",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "a71a408a2e582acd2e69595f9c3676079ae04e83",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "a71a408a2e582acd2e69595f9c3676079ae04e83",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
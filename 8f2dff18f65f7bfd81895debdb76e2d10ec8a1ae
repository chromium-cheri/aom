{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3a737c65_c47fe575",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-04-06T22:17:18Z",
      "side": 1,
      "message": "PTAL. Thanks.",
      "revId": "8f2dff18f65f7bfd81895debdb76e2d10ec8a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6fe837e4_ba3cb1c6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-04-07T13:42:29Z",
      "side": 1,
      "message": "IIUC, this CL assumes that the file format has the same byte order as the CPU that the code is running on. Is that a valid assumption?",
      "revId": "8f2dff18f65f7bfd81895debdb76e2d10ec8a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18d23f0d_5753a9ab",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-04-07T13:54:51Z",
      "side": 1,
      "message": "Mark: Yes, this CL assumes that the file format has the same byte order as the CPU that the code is running on. That\u0027s a valid assumption. I annotated the relevant code in common/rawenc.c to help answer this question.",
      "parentUuid": "6fe837e4_ba3cb1c6",
      "revId": "8f2dff18f65f7bfd81895debdb76e2d10ec8a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd660216_df489e1f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-04-07T14:06:13Z",
      "side": 1,
      "message": "Frankly, I don\u0027t really know it there\u0027s any point to this batching up 4 samples. That\u0027s how it was done in https://aomedia.git.corp.google.com/aom/+/330444dd, so I left it that way, but this may well be an unnecessary optimization. Or if you\u0027re really going to batch, them why not do more?\n\nBut it also may not be worth worrying that much about, one way or the other. This isn\u0027t really code that gets exercised much. (Obviously, since it\u0027s been broken since 2018!)",
      "revId": "8f2dff18f65f7bfd81895debdb76e2d10ec8a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "226677a1_779f585b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-04-07T18:41:04Z",
      "side": 1,
      "message": "I agree that this code could be improved but it may not be worth spending much time on this code. So when I wrote this CL I focused on changing the little-endian byte order to the host byte order.",
      "parentUuid": "fd660216_df489e1f",
      "revId": "8f2dff18f65f7bfd81895debdb76e2d10ec8a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52a43ee7_0a67efec",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-04-07T18:41:04Z",
      "side": 1,
      "message": "Mark: Thanks for the review!",
      "revId": "8f2dff18f65f7bfd81895debdb76e2d10ec8a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "335f90ca_7a834a4e",
        "filename": "common/rawenc.c",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-04-07T14:06:13Z",
      "side": 1,
      "message": "nit: You could move the definition of samples_per_batch up before this, and then use it in both loops.",
      "range": {
        "startLine": 45,
        "startChar": 24,
        "endLine": 45,
        "endChar": 38
      },
      "revId": "8f2dff18f65f7bfd81895debdb76e2d10ec8a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c7501ed6_70cd26b4",
        "filename": "common/rawenc.c",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-04-07T18:41:04Z",
      "side": 1,
      "message": "This one is probably a matter of preference. By comparing with the array declarations at lines 40-41, we can easily see both loops use the correct array sizes.",
      "parentUuid": "335f90ca_7a834a4e",
      "range": {
        "startLine": 45,
        "startChar": 24,
        "endLine": 45,
        "endChar": 38
      },
      "revId": "8f2dff18f65f7bfd81895debdb76e2d10ec8a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edf60264_6894093b",
        "filename": "common/rawenc.c",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 5960
      },
      "writtenOn": "2022-04-06T23:28:07Z",
      "side": 1,
      "message": "this is not used?",
      "range": {
        "startLine": 46,
        "startChar": 14,
        "endLine": 46,
        "endChar": 17
      },
      "revId": "8f2dff18f65f7bfd81895debdb76e2d10ec8a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "380f171b_d753a2ae",
        "filename": "common/rawenc.c",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-04-06T23:31:45Z",
      "side": 1,
      "message": "\u0027batched\u0027 is a union. The \u0027u8\u0027 and \u0027u16\u0027 members of the union are at the same memory location. A union is often used to reinterpret a block of memory as a different type, without using type cast.",
      "parentUuid": "edf60264_6894093b",
      "range": {
        "startLine": 46,
        "startChar": 14,
        "endLine": 46,
        "endChar": 17
      },
      "revId": "8f2dff18f65f7bfd81895debdb76e2d10ec8a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f09acdd_ef9e919b",
        "filename": "common/rawenc.c",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-04-07T14:06:13Z",
      "side": 1,
      "message": "optional: This could just be \u0026batched, not that it really matters much one way or the other.",
      "range": {
        "startLine": 57,
        "startChar": 29,
        "endLine": 57,
        "endChar": 39
      },
      "revId": "8f2dff18f65f7bfd81895debdb76e2d10ec8a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc628ea1_9859a950",
        "filename": "common/rawenc.c",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-04-07T18:41:04Z",
      "side": 1,
      "message": "The type of the second parameter of writer_func is const uint8_t *, so we can\u0027t use \u0026batched without changing the prototype of writer_func.",
      "parentUuid": "7f09acdd_ef9e919b",
      "range": {
        "startLine": 57,
        "startChar": 29,
        "endLine": 57,
        "endChar": 39
      },
      "revId": "8f2dff18f65f7bfd81895debdb76e2d10ec8a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7045c56f_0c8d6c91",
        "filename": "common/rawenc.c",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-04-07T20:03:24Z",
      "side": 1,
      "message": "Ah, good point.",
      "parentUuid": "bc628ea1_9859a950",
      "range": {
        "startLine": 57,
        "startChar": 29,
        "endLine": 57,
        "endChar": 39
      },
      "revId": "8f2dff18f65f7bfd81895debdb76e2d10ec8a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "db9136c6_38567398",
        "filename": "common/rawenc.c",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-04-07T13:54:51Z",
      "side": 1,
      "message": "The code here (lines 82-87) is the primary code path. Note that we write the bytes in the img-\u003eplanes[plane] buffer directly to the file. For high bit depth, the samples in img-\u003eplanes[plane] buffer are 16-bit words in the CPU\u0027s byte order (called the \"host byte order\" in networking jargon).\n\nThe write_greyscale() call at lines 78-81 needs to emulate the img-\u003eplanes[plane] buffer when the buffer doesn\u0027t exist. Therefore, for high bit depth, write_greyscale() needs to generate 16-bit words in the CPU\u0027s byte order.",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 87,
        "endChar": 5
      },
      "revId": "8f2dff18f65f7bfd81895debdb76e2d10ec8a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b7113e4_8b09cde3",
        "filename": "common/rawenc.c",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-04-07T14:06:13Z",
      "side": 1,
      "message": "Okay, yeah, I see that now. That makes sense.\n\nMy CL was an attempt to do something slightly more generic (e.g. support 12 bit as well as 10 bit) than the gChips patch I based it on at http://google3/third_party/webm_hw_bigwave/hardware/configurations/libaom07a46fd12.patch?l\u003d89-99\u0026rcl\u003d437371175, but it hadn\u0027t occurred to me that the file format was native endian.\n\nThanks for fixing this.",
      "parentUuid": "db9136c6_38567398",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 87,
        "endChar": 5
      },
      "revId": "8f2dff18f65f7bfd81895debdb76e2d10ec8a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "8f2dff18f65f7bfd81895debdb76e2d10ec8a1ae",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "8f2dff18f65f7bfd81895debdb76e2d10ec8a1ae",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "8f2dff18f65f7bfd81895debdb76e2d10ec8a1ae",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
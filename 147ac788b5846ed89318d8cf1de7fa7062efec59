{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f82d07ff_8004923c",
        "filename": "av1/encoder/partition_strategy.c",
        "patchSetId": 3
      },
      "lineNbr": 1440,
      "author": {
        "id": 5188
      },
      "writtenOn": "2021-11-29T19:44:23Z",
      "side": 1,
      "message": "Do we need to do the same thing as what is done for max size?\nLike: (bsize_1d \u003e\u003d block_height) || (bsize_1d \u003e\u003d block_width)",
      "range": {
        "startLine": 1440,
        "startChar": 32,
        "endLine": 1440,
        "endChar": 80
      },
      "revId": "147ac788b5846ed89318d8cf1de7fa7062efec59",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ebcef9a3_b2b6953b",
        "filename": "av1/encoder/partition_strategy.c",
        "patchSetId": 3
      },
      "lineNbr": 1440,
      "author": {
        "id": 9823
      },
      "writtenOn": "2021-11-29T20:04:08Z",
      "side": 1,
      "message": "This condition needs to be an \u0026\u0026 and not ||.\nSupposed the min bsize is BLOCK_16X16, and the current bsize is BLOCK_32X16. If we were to use an ||, the condition would get triggered. So we would not be able to reach BLOCK_16X16.",
      "parentUuid": "f82d07ff_8004923c",
      "range": {
        "startLine": 1440,
        "startChar": 32,
        "endLine": 1440,
        "endChar": 80
      },
      "revId": "147ac788b5846ed89318d8cf1de7fa7062efec59",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bbc46d89_02d49120",
        "filename": "av1/encoder/partition_strategy.c",
        "patchSetId": 3
      },
      "lineNbr": 1440,
      "author": {
        "id": 5188
      },
      "writtenOn": "2021-11-29T20:41:39Z",
      "side": 1,
      "message": "Got it thank you. My concern is that all the 1:4/4:1 blocks have indices greater than the square ones, so we may need to play with the widths and heights instead of the bsizes. But since those blocks are not splittable, maybe this function won\u0027t be reached at all so it doesn\u0027t matter, would you please confirm?",
      "parentUuid": "ebcef9a3_b2b6953b",
      "range": {
        "startLine": 1440,
        "startChar": 32,
        "endLine": 1440,
        "endChar": 80
      },
      "revId": "147ac788b5846ed89318d8cf1de7fa7062efec59",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dde7e9e2_ed19b17f",
        "filename": "av1/encoder/partition_strategy.c",
        "patchSetId": 3
      },
      "lineNbr": 1440,
      "author": {
        "id": 9823
      },
      "writtenOn": "2021-11-29T20:50:11Z",
      "side": 1,
      "message": "\u003e My concern is that all the 1:4/4:1 blocks have indices greater than the square ones, so we may need to play with the widths and heights instead of the bsizes.\n\nThe is_bsize_geq function actually tests each dimension individually.\nHere\u0027s the function definition:\nstatic AOM_INLINE bool is_bsize_geq(BLOCK_SIZE bsize1, BLOCK_SIZE bsize2) {                                                                                                                                                               \n   if (bsize1 \u003d\u003d BLOCK_INVALID || bsize2 \u003d\u003d BLOCK_INVALID) {                                                                                                                                                                               \n     return false;                                                                                                                                                                                                                         \n   }                                                                                                                                                                                                                                       \n   return block_size_wide[bsize1] \u003e\u003d block_size_wide[bsize2] \u0026\u0026                                                                                                                                                                            \n          block_size_high[bsize1] \u003e\u003d block_size_high[bsize2];                                                                                                                                                                              \n}    \n\n\u003e But since those blocks are not splittable, maybe this function won\u0027t be reached at all\n\nI think the 1:4 blocks can get to av1_prune_partitions_by_max_min_bsize, so there might still be some issues with the is_gt_max_sq_part condition.\nFor example, if max_bsize is BLOCK_32X32, and the current bsize is BLOCK_16X64, then we\u0027ll be forced to split, even though splitting is not allowed for 1:4 blocks.",
      "parentUuid": "bbc46d89_02d49120",
      "range": {
        "startLine": 1440,
        "startChar": 32,
        "endLine": 1440,
        "endChar": 80
      },
      "revId": "147ac788b5846ed89318d8cf1de7fa7062efec59",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e4d6650d_c7634202",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 33002
      },
      "writtenOn": "2023-09-15T13:22:27Z",
      "side": 1,
      "message": "In this CL, the memory allocations done during global motion estimation are handled correctly. In case of an allocation failure, the error status is propagated after freeing the local buffers up to the caller function `aom_compute_global_motion()` where `aom_internal_error()` is invoked for the encoder to exit gracefully without any memory leaks. `av1_compute_gm_for_valid_ref_frames()` has been modified to pass the correct `xd` in case of single thread and multi thread encodes which will be used by `aom_internal_error()`. Since the function `av1_resize_plane()` is also invoked by modules other than GM, we have also taken care of handling those calls correctly in this CL.\n\nThe patch/script shared in the bug report aomedia:3276(https://bugs.chromium.org/p/aomedia/issues/detail?id\u003d3276#c47) causes specific allocations to fail and tests if the encoder exits gracefully without any memory leaks. We modified this patch to contain the memory allocation failures within global motion computation and used it to validate our CL.\n\nThis change is bit-exact and has been verified using bitstream-match tests for a combination of various configuration values for --threads, --tile-rows, --tile-columns, --cpu-used, --end-usage, --row-mt, --fp-mt, etc. Validated all unit-tests with sanitizers (address and thread) and valgrind.",
      "revId": "c01e018565b50ecaec07bc6ca519672abe8e10be",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80ac109a_392bae79",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5185
      },
      "writtenOn": "2023-09-15T18:08:54Z",
      "side": 1,
      "message": "Thanks for the effort to take care of every mem allocation in GM! It is good to keep the logic straightforward and consistent through the change. Overall looks good to me.",
      "parentUuid": "e4d6650d_c7634202",
      "revId": "c01e018565b50ecaec07bc6ca519672abe8e10be",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e06642e0_da2a5302",
        "filename": "av1/common/resize.c",
        "patchSetId": 2
      },
      "lineNbr": 1441,
      "author": {
        "id": 5185
      },
      "writtenOn": "2023-09-15T18:08:54Z",
      "side": 1,
      "message": "The error handling in this part looks good.",
      "range": {
        "startLine": 1441,
        "startChar": 11,
        "endLine": 1441,
        "endChar": 51
      },
      "revId": "c01e018565b50ecaec07bc6ca519672abe8e10be",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8247ab1c_199fc4e8",
        "filename": "av1/encoder/global_motion_facade.c",
        "patchSetId": 2
      },
      "lineNbr": 204,
      "author": {
        "id": 5185
      },
      "writtenOn": "2023-09-15T18:08:54Z",
      "side": 1,
      "message": "Why does xd need to be passed in if cpi is already passed in?",
      "revId": "c01e018565b50ecaec07bc6ca519672abe8e10be",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12976e7a_a9244580",
        "filename": "av1/encoder/global_motion_facade.c",
        "patchSetId": 2
      },
      "lineNbr": 221,
      "author": {
        "id": 5185
      },
      "writtenOn": "2023-09-15T18:08:54Z",
      "side": 1,
      "message": "same here",
      "range": {
        "startLine": 221,
        "startChar": 45,
        "endLine": 221,
        "endChar": 47
      },
      "revId": "c01e018565b50ecaec07bc6ca519672abe8e10be",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "520cb218_4762f7b8",
        "filename": "third_party/fastfeat/fast.c",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 5185
      },
      "writtenOn": "2023-09-15T18:08:54Z",
      "side": 1,
      "message": "The change here looks necessary since we couldn\u0027t tell if mem allocation failed from the return value. But, since this is third party code, please add an explanation of the change to README.libaom file (within \"Local Modifications\" section) under this folder.",
      "range": {
        "startLine": 56,
        "startChar": 9,
        "endLine": 56,
        "endChar": 15
      },
      "revId": "c01e018565b50ecaec07bc6ca519672abe8e10be",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "47a7d3ef_77eda791",
        "filename": "aom_dsp/x86/synonyms_avx2.h",
        "patchSetId": 3
      },
      "lineNbr": 2,
      "author": {
        "id": 5185
      },
      "writtenOn": "2018-01-10T23:20:07Z",
      "side": 1,
      "message": "2018",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 21
      },
      "revId": "05421a0a4fc36d21f3022a874b1c993e5e915253",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3258380d_614e76d7",
        "filename": "aom_dsp/x86/synonyms_avx2.h",
        "patchSetId": 3
      },
      "lineNbr": 2,
      "author": {
        "id": 8213
      },
      "writtenOn": "2018-01-11T10:49:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "47a7d3ef_77eda791",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 21
      },
      "revId": "05421a0a4fc36d21f3022a874b1c993e5e915253",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25fa209d_c4706c5b",
        "filename": "av1/common/x86/selfguided_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 5185
      },
      "writtenOn": "2018-01-10T23:20:07Z",
      "side": 1,
      "message": "Add the license statement",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 22
      },
      "revId": "05421a0a4fc36d21f3022a874b1c993e5e915253",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf2c066c_ad59485f",
        "filename": "av1/common/x86/selfguided_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 8213
      },
      "writtenOn": "2018-01-11T10:49:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "25fa209d_c4706c5b",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 22
      },
      "revId": "05421a0a4fc36d21f3022a874b1c993e5e915253",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a1cf781_06a9f9f7",
        "filename": "av1/common/x86/selfguided_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 5185
      },
      "writtenOn": "2018-01-10T23:20:07Z",
      "side": 1,
      "message": "\"static INLINE\" ?",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 11,
        "endChar": 6
      },
      "revId": "05421a0a4fc36d21f3022a874b1c993e5e915253",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a59b789e_a44f1363",
        "filename": "av1/common/x86/selfguided_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 7560
      },
      "writtenOn": "2018-01-11T10:22:00Z",
      "side": 1,
      "message": "This function does not need marking as inline.\n\nThat\u0027s only needed for headers. Reply again if you need more clarification here, but this is a general point about C semantics, not an AOM thing.",
      "parentUuid": "4a1cf781_06a9f9f7",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 11,
        "endChar": 6
      },
      "revId": "05421a0a4fc36d21f3022a874b1c993e5e915253",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29c07faa_bc309bb9",
        "filename": "av1/common/x86/selfguided_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 5185
      },
      "writtenOn": "2018-01-10T23:20:07Z",
      "side": 1,
      "message": "same as above",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 6
      },
      "revId": "05421a0a4fc36d21f3022a874b1c993e5e915253",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5c6fa04_8c415dc0",
        "filename": "av1/common/x86/selfguided_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 7560
      },
      "writtenOn": "2018-01-11T10:22:00Z",
      "side": 1,
      "message": "As above",
      "parentUuid": "29c07faa_bc309bb9",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 6
      },
      "revId": "05421a0a4fc36d21f3022a874b1c993e5e915253",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "69e3e06e_05e89d8d",
        "filename": "av1/common/x86/selfguided_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 209,
      "author": {
        "id": 5185
      },
      "writtenOn": "2018-01-10T23:20:07Z",
      "side": 1,
      "message": "May be better to remove CONFIG_DEBUG\u003d0 version.",
      "range": {
        "startLine": 209,
        "startChar": 4,
        "endLine": 209,
        "endChar": 16
      },
      "revId": "05421a0a4fc36d21f3022a874b1c993e5e915253",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3960e871_db8189aa",
        "filename": "av1/common/x86/selfguided_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 209,
      "author": {
        "id": 7560
      },
      "writtenOn": "2018-01-11T10:22:00Z",
      "side": 1,
      "message": "This code is roughly the same as for the SSE code.\n\nBasically, the CONFIG_DEBUG\u003d0 version is correct but is a bit too clever and confuses Valgrind so we have to do this silly thing which increases register pressure and adds some spurious instructions to avoid Valgrind complaining.\n\nIf you believe that the CONFIG_DEBUG\u003d0 branch should be removed (I don\u0027t really have strong feelings) maybe you could post a follow-up patch that removes it from this code and also from the SSE code. I think discussion on that probably belongs elsewhere - this patch is following the \"status quo\", so maybe we could keep it in for now.",
      "parentUuid": "69e3e06e_05e89d8d",
      "range": {
        "startLine": 209,
        "startChar": 4,
        "endLine": 209,
        "endChar": 16
      },
      "revId": "05421a0a4fc36d21f3022a874b1c993e5e915253",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "202d3c4c_3e866c66",
        "filename": "av1/common/x86/selfguided_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 209,
      "author": {
        "id": 5185
      },
      "writtenOn": "2018-01-11T20:43:28Z",
      "side": 1,
      "message": "Which variable is the uninitialized one? Is it possible that you can declare and initialize the variables outside the for loop and use them here to reduce overhead? If the uninitialized issue can be handled, it is better.",
      "parentUuid": "3960e871_db8189aa",
      "range": {
        "startLine": 209,
        "startChar": 4,
        "endLine": 209,
        "endChar": 16
      },
      "revId": "05421a0a4fc36d21f3022a874b1c993e5e915253",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc0d9a0f_60ed224f",
        "filename": "av1/common/x86/selfguided_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 209,
      "author": {
        "id": 8213
      },
      "writtenOn": "2018-01-17T17:14:48Z",
      "side": 1,
      "message": "pre_sum1 and pre_sum2 can contain some uninitialised data if j is close to width, as the boxsum_from_ii function may read off the edge of the image.\n\nI have implemented a new version where the possible masks are all calculated before the for loop so that recalculation does not occur, and the CONFIG_DEBUG\u003d0 section has been removed (https://aomedia-review.googlesource.com/c/aom/+/42341). This increases the speed by ~3%-5% (compared to the current CONFIG_DEBUG\u003d1 section), at the expense of a little extra register pressure.",
      "parentUuid": "202d3c4c_3e866c66",
      "range": {
        "startLine": 209,
        "startChar": 4,
        "endLine": 209,
        "endChar": 16
      },
      "revId": "05421a0a4fc36d21f3022a874b1c993e5e915253",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23595443_9884d3bc",
        "filename": "av1/common/x86/selfguided_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 422,
      "author": {
        "id": 5185
      },
      "writtenOn": "2018-01-10T23:20:07Z",
      "side": 1,
      "message": "If we can write a separate lowbd version, will it be faster?",
      "range": {
        "startLine": 422,
        "startChar": 6,
        "endLine": 422,
        "endChar": 19
      },
      "revId": "05421a0a4fc36d21f3022a874b1c993e5e915253",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef6683cc_0eedac13",
        "filename": "av1/common/x86/selfguided_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 422,
      "author": {
        "id": 7560
      },
      "writtenOn": "2018-01-11T10:22:00Z",
      "side": 1,
      "message": "When I profiled the SSE version, this test wasn\u0027t a significant fraction of cycles.\n\nThe branch gets predicted perfectly (since highbd is constant across the function call and the loop runs lots of times) so this basically just adds two instructions of front-end work and costs a single general-purpose register (there are lots free). This is cheap enough that the work seems to get lost in the noise.",
      "parentUuid": "23595443_9884d3bc",
      "range": {
        "startLine": 422,
        "startChar": 6,
        "endLine": 422,
        "endChar": 19
      },
      "revId": "05421a0a4fc36d21f3022a874b1c993e5e915253",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ebfadf3e_2f352005",
        "filename": "av1/common/x86/selfguided_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 422,
      "author": {
        "id": 5185
      },
      "writtenOn": "2018-01-11T20:43:28Z",
      "side": 1,
      "message": "Sorry that I didn\u0027t state it clearly. I was thinking we could have a separate lbd version of av1_selfguided_restoration. Currently, it seems you always unpack the pixel data to 32 bits. If we know the pixel is 1 byte(lbd case), in selfguided function (or at least part of the function), 16 bits might be enough for the calculation result. Namely, processing more in 1 simd instruction. Do you think if it is possible?",
      "parentUuid": "ef6683cc_0eedac13",
      "range": {
        "startLine": 422,
        "startChar": 6,
        "endLine": 422,
        "endChar": 19
      },
      "revId": "05421a0a4fc36d21f3022a874b1c993e5e915253",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1460051e_c27e81ed",
        "filename": "av1/common/x86/selfguided_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 422,
      "author": {
        "id": 8213
      },
      "writtenOn": "2018-01-17T17:14:48Z",
      "side": 1,
      "message": "Thanks for explaining! I\u0027ve gone through it all in detail, and I don\u0027t think that anything can be improved for lowbd. A few of my notes are below:\n\n- integral_images already has a low and a high bd version\n- boxsum_from_ii can generate values as high as 2^20 in the lowbd version, and so needs 32 bits\n- This, therefore, means that almost all of calc_ab needs to be done with 32 bits.\n- In calc_ab, a_res and b_res can be stored in 8 bits, but would have to be unpacked again to deal with all the calculations in final_filter, in which v can be as much as 2^22. I think all of the packing (which actually can\u0027t be done in the SSE4.1 version) and unpacking will ultimately slow the algorithm down.\n- In apply_selfguided_restoration_sse4_1 there\u0027s lots of left shifting for extra accuracy that brings values up to around 2^20 even in the lowbd version.\n\nAll in all, I\u0027m afraid I don\u0027t think the lowbd version can be optimised any further!",
      "parentUuid": "ebfadf3e_2f352005",
      "range": {
        "startLine": 422,
        "startChar": 6,
        "endLine": 422,
        "endChar": 19
      },
      "revId": "05421a0a4fc36d21f3022a874b1c993e5e915253",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    }
  ]
}
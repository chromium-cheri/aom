{
  "comments": [
    {
      "key": {
        "uuid": "02afbed9_3ffb6014",
        "filename": "av1/encoder/bitstream.c",
        "patchSetId": 17
      },
      "lineNbr": 3818,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-11-11T19:14:52Z",
      "side": 1,
      "message": "Optional: Daniel: I saw your response to my suggestion of just using a default case for all the other metadata types. Instead of a TODO comment, I think it would be more useful to have the default case call aom_internal_error with an error message that says something like:\n\n            aom_internal_error(\u0026cpi-\u003ecommon.error, AOM_CODEC_ERROR,\n                               \"Writing of metadata type %u is not implemented\", type);\n\nNote: I did not find a \"not implemented\" error code. The closest error codes I could find were  AOM_CODEC_INCAPABLE and AOM_CODEC_UNSUP_FEATURE. AOM_CODEC_UNSUP_FEATURE seems appropriate, but its comment seems to imply it is an error code for the decoder.",
      "range": {
        "startLine": 3818,
        "startChar": 0,
        "endLine": 3818,
        "endChar": 23
      },
      "revId": "7345411ac240220758b919cd9b693133d44d2b92",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e916e09_c58bd10d",
        "filename": "test/metadata_test.cc",
        "patchSetId": 17
      },
      "lineNbr": 17,
      "author": {
        "id": 5215
      },
      "writtenOn": "2019-11-11T18:43:53Z",
      "side": 1,
      "message": "Add a TODO here:\n\n    // TODO(daniel.vt@samsung.com): Make this const when the metadata API allows it.",
      "revId": "7345411ac240220758b919cd9b693133d44d2b92",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4fc82e38_d324b640",
        "filename": "test/metadata_test.cc",
        "patchSetId": 17
      },
      "lineNbr": 17,
      "author": {
        "id": 14148
      },
      "writtenOn": "2019-11-11T19:54:19Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7e916e09_c58bd10d",
      "revId": "7345411ac240220758b919cd9b693133d44d2b92",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2759fcd8_35ca3296",
        "filename": "test/metadata_test.cc",
        "patchSetId": 17
      },
      "lineNbr": 51,
      "author": {
        "id": 5215
      },
      "writtenOn": "2019-11-11T18:43:53Z",
      "side": 1,
      "message": "C++ style cast please: static_cast or reinterpret_cast. Apologies for missing this earlier.",
      "range": {
        "startLine": 51,
        "startChar": 33,
        "endLine": 51,
        "endChar": 70
      },
      "revId": "7345411ac240220758b919cd9b693133d44d2b92",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0906a4ac_1617fcfc",
        "filename": "test/metadata_test.cc",
        "patchSetId": 17
      },
      "lineNbr": 51,
      "author": {
        "id": 14148
      },
      "writtenOn": "2019-11-11T19:54:19Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2759fcd8_35ca3296",
      "range": {
        "startLine": 51,
        "startChar": 33,
        "endLine": 51,
        "endChar": 70
      },
      "revId": "7345411ac240220758b919cd9b693133d44d2b92",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "71d13fdc_2cb23ebd",
        "filename": "test/metadata_test.cc",
        "patchSetId": 17
      },
      "lineNbr": 57,
      "author": {
        "id": 5215
      },
      "writtenOn": "2019-11-11T18:43:53Z",
      "side": 1,
      "message": "This should just be a memcmp call, no?",
      "range": {
        "startLine": 52,
        "startChar": 6,
        "endLine": 57,
        "endChar": 7
      },
      "revId": "7345411ac240220758b919cd9b693133d44d2b92",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdaf5fb6_47bf0a3b",
        "filename": "test/metadata_test.cc",
        "patchSetId": 17
      },
      "lineNbr": 57,
      "author": {
        "id": 14148
      },
      "writtenOn": "2019-11-11T19:54:19Z",
      "side": 1,
      "message": "Is this what you have in mind?\nI don\u0027t think I can make sure the exact position of the metadata OBU everytime, so I have to look for it.\n\n// look for expected metadata in bitstream\nbool found_metadata \u003d false;\nfor (size_t i \u003d 0; i \u003c bitstream_size; ++i) {\n  if (memcmp(bitstream + i, metadata_obu, metadata_obu_size) \u003d\u003d 0) {\n    found_metadata \u003d true;\n    break;\n  }\n}\nEXPECT_TRUE(found_metadata);",
      "parentUuid": "71d13fdc_2cb23ebd",
      "range": {
        "startLine": 52,
        "startChar": 6,
        "endLine": 57,
        "endChar": 7
      },
      "revId": "7345411ac240220758b919cd9b693133d44d2b92",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    }
  ]
}
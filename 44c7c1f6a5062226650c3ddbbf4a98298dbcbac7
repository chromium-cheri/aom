{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "101fa2b7_fe3aafa4",
        "filename": "av1/arg_defs.c",
        "patchSetId": 4
      },
      "lineNbr": 50,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-02-23T00:37:29Z",
      "side": 1,
      "message": "The other tuning modes use underscores as word separators, it\u0027s good to be consistent here. Should this be named `vmaf_...` if the intent is to tune for vmaf using a saliency map?",
      "revId": "44c7c1f6a5062226650c3ddbbf4a98298dbcbac7",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1bb04542_3ff00fa3",
        "filename": "av1/arg_defs.c",
        "patchSetId": 4
      },
      "lineNbr": 50,
      "author": {
        "id": 31132
      },
      "writtenOn": "2023-02-23T15:16:58Z",
      "side": 1,
      "message": "Thanks for noticing it James. The reasons not to follow the \"vmaf...\" name convention are:\n\n1) Actually this saliency_map tuning for vmaf algorithm is very different from the existing vmaf tuning modes. Although all of them are optimizing vmaf score, but they do it in different approaches.\n\nOn one hand, the existing \"vmaf_...\" tuning modes require to include vmaf model to trigger vmaf calculation on the fly. \n\nOn the other hand, this saliency_map tuning is more like ssim tuning approach -- neither need to set vmaf model path nor initialize the vmaf tuning mode exclusive data structures (this is why we didn\u0027t combine it with CONFIG_TUNE_VMAF referring to your earlier comments). \n\n2) Since the existing tune vmaf modes require to set vmaf model path, in the Borg testing script, we need some special handlings for \"vmaf_...\" tuning mode: \n\nhttps://source.corp.google.com/piper///depot/google3/third_party/libvpx/tools/encode.sh;l\u003d665?q\u003dvmaf-model-path\u0026sq\u003dpackage:piper%20file:%2F%2Fdepot%2Fgoogle3%20-file:google3%2Fexperimental\n\nHowever, it won\u0027t be applied to our saliency_map tuning mode. If we name it following \"vmaf_...\", the existing script doesn\u0027t work as is.\n\n3) Therefore, to distinguish this mode from the existing \"vmaf_...\" tuning modes, as well as to keep the existing script working, we chose to rename this mode not to follow the \"vmaf_...\" convention.",
      "parentUuid": "101fa2b7_fe3aafa4",
      "revId": "44c7c1f6a5062226650c3ddbbf4a98298dbcbac7",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20f7f622_5fabcb53",
        "filename": "av1/arg_defs.c",
        "patchSetId": 4
      },
      "lineNbr": 50,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-02-23T21:06:10Z",
      "side": 1,
      "message": "\u003e Thanks for noticing it James. The reasons not to follow the \"vmaf...\" name convention are:\n\u003e \n\u003e 1) Actually this saliency_map tuning for vmaf algorithm is very different from the existing vmaf tuning modes. Although all of them are optimizing vmaf score, but they do it in different approaches.\n\u003e \n\u003e On one hand, the existing \"vmaf_...\" tuning modes require to include vmaf model to trigger vmaf calculation on the fly. \n\u003e \n\u003e On the other hand, this saliency_map tuning is more like ssim tuning approach -- neither need to set vmaf model path nor initialize the vmaf tuning mode exclusive data structures (this is why we didn\u0027t combine it with CONFIG_TUNE_VMAF referring to your earlier comments). \n\u003e \n\u003e 2) Since the existing tune vmaf modes require to set vmaf model path, in the Borg testing script, we need some special handlings for \"vmaf_...\" tuning mode: \n\u003e \n\u003e https://source.corp.google.com/piper///depot/google3/third_party/libvpx/tools/encode.sh;l\u003d665?q\u003dvmaf-model-path\u0026sq\u003dpackage:piper%20file:%2F%2Fdepot%2Fgoogle3%20-file:google3%2Fexperimental\n\u003e \n\u003e However, it won\u0027t be applied to our saliency_map tuning mode. If we name it following \"vmaf_...\", the existing script doesn\u0027t work as is.\n\u003e \n\nThat sounds like a bug in the test script and not a good reason to have a confusing name in the API.\n\n\u003e 3) Therefore, to distinguish this mode from the existing \"vmaf_...\" tuning modes, as well as to keep the existing script working, we chose to rename this mode not to follow the \"vmaf_...\" convention.",
      "parentUuid": "1bb04542_3ff00fa3",
      "revId": "44c7c1f6a5062226650c3ddbbf4a98298dbcbac7",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "78a599d5_e6e79689",
        "filename": "av1/arg_defs.c",
        "patchSetId": 4
      },
      "lineNbr": 50,
      "author": {
        "id": 31132
      },
      "writtenOn": "2023-02-24T19:19:18Z",
      "side": 1,
      "message": "Per discussion offline, we agreed to change the API name to \"vmaf_saliency_map\" following the convention.",
      "parentUuid": "20f7f622_5fabcb53",
      "revId": "44c7c1f6a5062226650c3ddbbf4a98298dbcbac7",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "114fe79b_79741657",
        "filename": "build/cmake/aom_config_defaults.cmake",
        "patchSetId": 4
      },
      "lineNbr": 118,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-02-22T18:21:36Z",
      "side": 1,
      "message": "Unless we add another config, this won\u0027t be compiled:\n  https://build.aomedia.org/jenkins/job/libaom__compile/\n  \nMarking it as an experiment would work (see the examples below, the description should contain \u0027AV1 experiment\u0027):\n  https://build.aomedia.org/jenkins/job/libaom__compile_experiments/\n \nIf this is more of a permanent feature then can it be bundled under CONFIG_TUNE_VMAF?",
      "revId": "44c7c1f6a5062226650c3ddbbf4a98298dbcbac7",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f89f3431_141e964f",
        "filename": "build/cmake/aom_config_defaults.cmake",
        "patchSetId": 4
      },
      "lineNbr": 118,
      "author": {
        "id": 5022
      },
      "writtenOn": "2023-02-22T23:24:02Z",
      "side": 1,
      "message": "This intends to be a feature that will be enabled in prod. It doesn\u0027t require VMAF lib to work.\n\nProbably a good idea to move it as a standalone experiment, and get unit tests coverage.",
      "parentUuid": "114fe79b_79741657",
      "revId": "44c7c1f6a5062226650c3ddbbf4a98298dbcbac7",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b26fa226_ed646c91",
        "filename": "build/cmake/aom_config_defaults.cmake",
        "patchSetId": 4
      },
      "lineNbr": 118,
      "author": {
        "id": 31132
      },
      "writtenOn": "2023-02-22T23:45:17Z",
      "side": 1,
      "message": "Thanks James and Jingning. I will update the code.",
      "parentUuid": "f89f3431_141e964f",
      "revId": "44c7c1f6a5062226650c3ddbbf4a98298dbcbac7",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8e7c637_64b7dde9",
        "filename": "build/cmake/aom_config_defaults.cmake",
        "patchSetId": 4
      },
      "lineNbr": 118,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-02-23T00:37:29Z",
      "side": 1,
      "message": "\u003e Probably a good idea to move it as a standalone experiment, and get unit tests coverage.\n\nThat\u0027s compile coverage, not unit test, for any experiment.",
      "parentUuid": "b26fa226_ed646c91",
      "revId": "44c7c1f6a5062226650c3ddbbf4a98298dbcbac7",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4015af6b_51712245",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-09-04T23:18:12Z",
      "side": 1,
      "message": "I propose we formalize experimental features in the API so that we can let early adopters try them out and iterate, before we promote the new features to the stable API with backward compatibility guarantee.",
      "revId": "f09df890e37181dd79ca77f10e3d678b83eb99eb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "132b7e36_f7de729a",
        "filename": "aom/aom_codec.h",
        "patchSetId": 1
      },
      "lineNbr": 230,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-09-04T23:18:12Z",
      "side": 1,
      "message": "Right now only two `AOM_CODEC_USE_` macros are defined:\n\n```\naom/aom_encoder.h:#define AOM_CODEC_USE_PSNR 0x10000         /**\u003c Calculate PSNR on each frame */\naom/aom_encoder.h:#define AOM_CODEC_USE_HIGHBITDEPTH 0x40000 /**\u003c Use high bitdepth */\n```\n\nI allocated the bits among codec, decoder, and encoder so that these two `AOM_CODEC_USE_` macros conform to the allocation.",
      "revId": "f09df890e37181dd79ca77f10e3d678b83eb99eb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53bf7281_6bf349e8",
        "filename": "aom/aom_codec.h",
        "patchSetId": 1
      },
      "lineNbr": 230,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-09-05T18:55:44Z",
      "side": 1,
      "message": "\u003e Right now only two `AOM_CODEC_USE_` macros are defined:\n\u003e \n\u003e ```\n\u003e aom/aom_encoder.h:#define AOM_CODEC_USE_PSNR 0x10000         /**\u003c Calculate PSNR on each frame */\n\u003e aom/aom_encoder.h:#define AOM_CODEC_USE_HIGHBITDEPTH 0x40000 /**\u003c Use high bitdepth */\n\u003e ```\n\u003e \n\u003e I allocated the bits among codec, decoder, and encoder so that these two `AOM_CODEC_USE_` macros conform to the allocation.\n\nThe decoder and encoder flags can overlap, but it\u0027s fine to keep them separate since we don\u0027t anticipate having too many.",
      "parentUuid": "132b7e36_f7de729a",
      "revId": "f09df890e37181dd79ca77f10e3d678b83eb99eb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "f09df890e37181dd79ca77f10e3d678b83eb99eb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval. Using a trusted device is required, see go/gerrit-onboarding#review-enforcement."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforcement-satisfied_gerrit"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f09df890e37181dd79ca77f10e3d678b83eb99eb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "f09df890e37181dd79ca77f10e3d678b83eb99eb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
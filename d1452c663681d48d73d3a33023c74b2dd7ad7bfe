{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "16652d49_f645e945",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-06T18:47:51Z",
      "side": 1,
      "message": "It would be good to describe the bug fix. It isn\u0027t obvious to me.\n\nI noticed that several changes are to use the right number of threads.\n\nOne change is to initialize the loop restoration MT object unconditionally, not just when `allocate is_restoration_used(cm)` is true.\n\nAn early return is added to `av1_create_workers()`.",
      "revId": "d1452c663681d48d73d3a33023c74b2dd7ad7bfe",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "24857e68_cc094fd9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 6585
      },
      "writtenOn": "2023-10-06T19:17:49Z",
      "side": 1,
      "message": "The description will be added to the issue tracker.",
      "parentUuid": "16652d49_f645e945",
      "revId": "d1452c663681d48d73d3a33023c74b2dd7ad7bfe",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0205ef5_7b4bb7e2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-06T18:47:51Z",
      "side": 1,
      "message": "Cheng: I have some questions and suggested changes. Please treat my review as supplemental.",
      "revId": "d1452c663681d48d73d3a33023c74b2dd7ad7bfe",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a595372b_bdd2590d",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 4
      },
      "lineNbr": 3088,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-10-06T18:09:46Z",
      "side": 1,
      "message": "Initializing this to 0 is unnecessary given they should be the same size. Even if they aren\u0027t the comparison below uses the same size as the copy.",
      "revId": "d1452c663681d48d73d3a33023c74b2dd7ad7bfe",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c4af293_0149674d",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 4
      },
      "lineNbr": 3088,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-06T18:47:51Z",
      "side": 1,
      "message": "I agree the initialization should be omitted.\n\nIt is more useful to assert the two arrays are of the same size:\n\n```\n  assert(sizeof(prev_num_mod_workers) \u003d\u003d sizeof(ppi-\u003ep_mt_info.num_mod_workers));\n```",
      "parentUuid": "a595372b_bdd2590d",
      "revId": "d1452c663681d48d73d3a33023c74b2dd7ad7bfe",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7cf5eb68_8770f31b",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 4
      },
      "lineNbr": 3088,
      "author": {
        "id": 6585
      },
      "writtenOn": "2023-10-06T19:17:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8c4af293_0149674d",
      "revId": "d1452c663681d48d73d3a33023c74b2dd7ad7bfe",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6fe388f_fc4eafe7",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 4
      },
      "lineNbr": 3108,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-06T18:47:51Z",
      "side": 1,
      "message": "To avoid dangling pointers, set a pointer to null after freeing it (unless it\u0027s clear that we immediately set the pointer to a new value):\n\n```\n      for (int j \u003d 0; j \u003c ppi-\u003enum_fp_contexts; j++) {\n        aom_free(ppi-\u003eparallel_cpi[j]-\u003etd.tctx);\n        ppi-\u003eparallel_cpi[j]-\u003etd.tctx \u003d NULL;\n      }\n```",
      "revId": "d1452c663681d48d73d3a33023c74b2dd7ad7bfe",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96f7e06b_6f005cd7",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 4
      },
      "lineNbr": 3108,
      "author": {
        "id": 6585
      },
      "writtenOn": "2023-10-06T19:17:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c6fe388f_fc4eafe7",
      "revId": "d1452c663681d48d73d3a33023c74b2dd7ad7bfe",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b781a51_0a2963d2",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 4
      },
      "lineNbr": 3135,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-06T18:47:51Z",
      "side": 1,
      "message": "Make the same change here:\n\n```\n      for (int j \u003d 0; j \u003c ppi-\u003enum_fp_contexts; j++) {\n        aom_free(ppi-\u003eparallel_cpi[j]-\u003etd.tctx);\n        ppi-\u003eparallel_cpi[j]-\u003etd.tctx \u003d NULL;\n      }\n```",
      "revId": "d1452c663681d48d73d3a33023c74b2dd7ad7bfe",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7a6d05b_b83bca86",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 4
      },
      "lineNbr": 3135,
      "author": {
        "id": 6585
      },
      "writtenOn": "2023-10-06T19:17:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2b781a51_0a2963d2",
      "revId": "d1452c663681d48d73d3a33023c74b2dd7ad7bfe",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56468618_de66fca3",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 4
      },
      "lineNbr": 1059,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-06T18:47:51Z",
      "side": 1,
      "message": "Could you explain the reason for this early return?\n\nWhy do we need to check `p_mt_info-\u003enum_workers \u003e 0`? Do we call this function with `num_workers` equal to 0?",
      "revId": "d1452c663681d48d73d3a33023c74b2dd7ad7bfe",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "952f39cb_1224c2f2",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 4
      },
      "lineNbr": 1059,
      "author": {
        "id": 6585
      },
      "writtenOn": "2023-10-06T19:17:49Z",
      "side": 1,
      "message": "When p_mt_info is not initialized, i.e. the first time av1_create_workers is called, p_mt_info-\u003enum_workers \u003d 0.\nSo, we need to make sure the first time av1_create_workers is called, it should not early exit.\nFrom av1_cx_iface.c line 3105, you can see that initially, p_mt_info-\u003enum_workers \u003d 0.",
      "parentUuid": "56468618_de66fca3",
      "revId": "d1452c663681d48d73d3a33023c74b2dd7ad7bfe",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "739f2fc3_2991475c",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 4
      },
      "lineNbr": 1059,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-06T21:24:58Z",
      "side": 1,
      "message": "I was asking about the `num_workers` input parameter of `av1_create_workers()`. Do we ever call `av1_create_workers()` with the `num_workers` input parameter equal to 0?\n\nThe reason I asked is that, if we can assume `num_workers \u003e 0`, then the condition\n\n```\np_mt_info-\u003enum_workers \u003e\u003d num_workers \u0026\u0026 p_mt_info-\u003enum_workers \u003e 0\n```\n\ncan be simplified to\n\n```\np_mt_info-\u003enum_workers \u003e\u003d num_workers\n```",
      "parentUuid": "952f39cb_1224c2f2",
      "revId": "d1452c663681d48d73d3a33023c74b2dd7ad7bfe",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34c5ccf6_6bd8cc0f",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 4
      },
      "lineNbr": 1059,
      "author": {
        "id": 6585
      },
      "writtenOn": "2023-10-06T22:07:41Z",
      "side": 1,
      "message": "Yes. We require num_workers \u003e 1. I simplified this line.",
      "parentUuid": "739f2fc3_2991475c",
      "revId": "d1452c663681d48d73d3a33023c74b2dd7ad7bfe",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4b8719e_5e3198b7",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 4
      },
      "lineNbr": 1066,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-06T18:47:51Z",
      "side": 1,
      "message": "The early return implies that we may reach here with `p_mt_info-\u003enum_workers \u003c num_workers \u0026\u0026 p_mt_info-\u003enum_workers \u003e 0`. If so, we should free `p_mt_info-\u003eworkers`  and `p_mt_info-\u003etile_thr_data` first, otherwise they will be leaked. Right?",
      "revId": "d1452c663681d48d73d3a33023c74b2dd7ad7bfe",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9018b063_6c7ae2fc",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 4
      },
      "lineNbr": 1066,
      "author": {
        "id": 6585
      },
      "writtenOn": "2023-10-06T19:17:49Z",
      "side": 1,
      "message": "That\u0027s a good catch!\nnote that tile_thr_data has been freed at line 3106 in av1_cx_iface.c\nI added free of p_mt_info-\u003eworkers here.",
      "parentUuid": "d4b8719e_5e3198b7",
      "revId": "d1452c663681d48d73d3a33023c74b2dd7ad7bfe",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e52dbbf_b4d823c9",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 4
      },
      "lineNbr": 1066,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-06T21:24:58Z",
      "side": 1,
      "message": "\u003e note that tile_thr_data has been freed at line 3106 in av1_cx_iface.c\n\nAre you referring to the `free_thread_data(ppi)` call?\n\n`free_thread_data()` does not free the `tile_thr_data` array.",
      "parentUuid": "9018b063_6c7ae2fc",
      "revId": "d1452c663681d48d73d3a33023c74b2dd7ad7bfe",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85c823f9_08579a5f",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 4
      },
      "lineNbr": 1066,
      "author": {
        "id": 6585
      },
      "writtenOn": "2023-10-06T22:07:41Z",
      "side": 1,
      "message": "You are right. In the new version, tile_thr_data array is also freed.",
      "parentUuid": "2e52dbbf_b4d823c9",
      "revId": "d1452c663681d48d73d3a33023c74b2dd7ad7bfe",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a523340f_f3f315ea",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 25857
      },
      "writtenOn": "2023-11-20T17:06:58Z",
      "side": 1,
      "message": "In the parent commit, `lf_sync` is accessed inside the `enc_row_mt_worker_hook()` function if `cpi-\u003emt_info.pipeline_lpf_mt_with_enc` is set to true. But `lf_sync` is initialized inside `lpf_pipeline_mt_init()` based on `lf.filter_level[]`. This can result in invalid access of `lf_sync` inside the setjmp target in case an error is encountered. This CL resolves this issue by accessing `lf_sync` with the same condition as it is initialized. \n\nWe have also abstracted the condition to a new function `lpf_mt_with_enc_enabled()`. Also avoided the use of enums `PLANE_TYPE_Y` and `PLANE_TYPE_UV` with `lf.filter_level` as `lf.filter_level(0,1)` corresponds to horizontal and vertical filter.\n\nThis change is bit-exact and has been verified using bitstream-match tests for a combination of various configuration values for --threads, --tile-rows, --tile-columns, --cpu-used, --end-usage, --row-mt, --fp-mt, etc. Validated all unit-tests with sanitizers (address and thread) and valgrind.",
      "revId": "c19bd268271a06e40915a1cbb00c9b8f0e1b2c76",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b31fb2a7_a4e6a87e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-11-20T22:39:54Z",
      "side": 1,
      "message": "Cheng: Please review this CL. Thanks.\n\nMudassir: Please my review as supplemental. Cheng should be the primary reviewer.",
      "revId": "c19bd268271a06e40915a1cbb00c9b8f0e1b2c76",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07d64b59_6d47bba9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-11-20T22:49:35Z",
      "side": 1,
      "message": "\u003e Also avoided the use of enums `PLANE_TYPE_Y` and `PLANE_TYPE_UV` with `lf.filter_level` as `lf.filter_level(0,1)` corresponds to horizontal and vertical filter.\n\nNit: This sentence (from the second paragraph) can be copied to the commit message.\n\nAlso, the first paragraph is more informative than the commit message. I think it is fine to add this level of detail to the commit message. The last paragraph, which summarizes the testing you did, does not need to go into the commit message.",
      "parentUuid": "a523340f_f3f315ea",
      "revId": "c19bd268271a06e40915a1cbb00c9b8f0e1b2c76",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68dfbb94_47fb48eb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 25857
      },
      "writtenOn": "2023-11-21T17:00:21Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "07d64b59_6d47bba9",
      "revId": "c19bd268271a06e40915a1cbb00c9b8f0e1b2c76",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01a0e5a3_9b3dcc5d",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 7
      },
      "lineNbr": 12,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-11-20T22:39:54Z",
      "side": 1,
      "message": "Nit: Add `#include \u003cstdbool.h\u003e`. (This is a preexisting problem.)",
      "revId": "c19bd268271a06e40915a1cbb00c9b8f0e1b2c76",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ff2a839_afb7163d",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 7
      },
      "lineNbr": 12,
      "author": {
        "id": 25857
      },
      "writtenOn": "2023-11-21T17:00:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "01a0e5a3_9b3dcc5d",
      "revId": "c19bd268271a06e40915a1cbb00c9b8f0e1b2c76",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50da88a3_92000bcc",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 7
      },
      "lineNbr": 585,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-11-20T22:39:54Z",
      "side": 1,
      "message": "Nit: Add `const`:  `const int *filter_level`\n\nBetter yet, use the array notation: `const int filter_level[2]`\n\nEven though the array size is ignored in a function parameter, it serves as documentation of the array size expected by the function:",
      "revId": "c19bd268271a06e40915a1cbb00c9b8f0e1b2c76",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0960cb03_83dda6fd",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 7
      },
      "lineNbr": 585,
      "author": {
        "id": 25857
      },
      "writtenOn": "2023-11-21T17:00:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "50da88a3_92000bcc",
      "revId": "c19bd268271a06e40915a1cbb00c9b8f0e1b2c76",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "785d51e3_5f28774d",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 7
      },
      "lineNbr": 586,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-11-20T22:39:54Z",
      "side": 1,
      "message": "Nit: The original code uses `PLANE_TYPE_Y` and `PLANE_TYPE_UV` instead of 0 and 1. Should we also do that here?",
      "revId": "c19bd268271a06e40915a1cbb00c9b8f0e1b2c76",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b7caff2_8e2347dc",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 7
      },
      "lineNbr": 586,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-11-20T22:49:35Z",
      "side": 1,
      "message": "Please disregard this comment. You explained this in a comment. So the answer is No.",
      "parentUuid": "785d51e3_5f28774d",
      "revId": "c19bd268271a06e40915a1cbb00c9b8f0e1b2c76",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75686501_a86b7714",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 7
      },
      "lineNbr": 604,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-11-20T22:18:56Z",
      "side": 1,
      "message": "Is a warning produced without the use of volatile on this const?",
      "revId": "c19bd268271a06e40915a1cbb00c9b8f0e1b2c76",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21180da2_3e7e0447",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 7
      },
      "lineNbr": 604,
      "author": {
        "id": 25857
      },
      "writtenOn": "2023-11-21T17:00:21Z",
      "side": 1,
      "message": "Yes, we observed the warning below in [jenkins build](https://build.aomedia.org/jenkins/job/libaom__compile/58464/arch\u003dgeneric-gnu,config\u003dinternal-stats/consoleFull) (patchset 3).\n```\n15:40:06 /var/jenkins/workspace/libaom__compile/arch/generic-gnu/config/internal-stats/aom/av1/encoder/ethread.c:605:14: warning: variable ‘is_lpf_pipelined’ might be clobbered by ‘longjmp’ or ‘vfork’ [-Wclobbered]\n```",
      "parentUuid": "75686501_a86b7714",
      "revId": "c19bd268271a06e40915a1cbb00c9b8f0e1b2c76",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ec305bd_923e789c",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 7
      },
      "lineNbr": 604,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-11-21T22:32:42Z",
      "side": 1,
      "message": "James: I have seen GCC warn about variables that should not need to be declared as volatile. On the other hand, I have also seen compilers NOT warn about variables that should be declared as volatile (these variables were all structs if I remember correctly). So after painstakingly understanding setjmp\u0027s documentation, we still need to appease the compilers.",
      "parentUuid": "21180da2_3e7e0447",
      "revId": "c19bd268271a06e40915a1cbb00c9b8f0e1b2c76",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17074f06_f1f27ee4",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 7
      },
      "lineNbr": 1861,
      "author": {
        "id": 25857
      },
      "writtenOn": "2023-11-20T17:10:15Z",
      "side": 1,
      "message": "Moved this function below as the check `if (lf-\u003efilter_level[PLANE_TYPE_Y] || lf-\u003efilter_level[PLANE_TYPE_UV])` inside the function `lpf_mt_with_enc_enabled()` is sufficient.",
      "range": {
        "startLine": 1861,
        "startChar": 4,
        "endLine": 1861,
        "endChar": 74
      },
      "revId": "c19bd268271a06e40915a1cbb00c9b8f0e1b2c76",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2baf12d_dcdfcad2",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 7
      },
      "lineNbr": 1861,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-11-20T22:39:54Z",
      "side": 1,
      "message": "We should document why it is fine to discard the return value of `check_planes_to_loop_filter()` here.\n\nIt may be better to create a new function for the first three statements of `check_planes_to_loop_filter()`:\n\n```\n  // For each luma and chroma plane, whether to filter it or not.\n  planes_to_lf[0] \u003d (lf-\u003efilter_level[0] || lf-\u003efilter_level[1]) \u0026\u0026\n                    plane_start \u003c\u003d 0 \u0026\u0026 0 \u003c plane_end;\n  planes_to_lf[1] \u003d lf-\u003efilter_level_u \u0026\u0026 plane_start \u003c\u003d 1 \u0026\u0026 1 \u003c plane_end;\n  planes_to_lf[2] \u003d lf-\u003efilter_level_v \u0026\u0026 plane_start \u003c\u003d 2 \u0026\u0026 2 \u003c plane_end;\n```",
      "revId": "c19bd268271a06e40915a1cbb00c9b8f0e1b2c76",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd06adf4_912912cf",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 7
      },
      "lineNbr": 1861,
      "author": {
        "id": 25857
      },
      "writtenOn": "2023-11-21T17:00:21Z",
      "side": 1,
      "message": "Done. We have abstracted it to a new function `set_planes_to_loop_filter()`.",
      "parentUuid": "b2baf12d_dcdfcad2",
      "revId": "c19bd268271a06e40915a1cbb00c9b8f0e1b2c76",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e3f703cf_bf290dd5",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 7
      },
      "lineNbr": 1861,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-11-21T22:32:42Z",
      "side": 1,
      "message": "It took me a while to understand this change. I proved that the `check_planes_to_loop_filter()` call in the original code always returns 1 because `plane_start` is 0 and `plane_end` is 1 or 3, and `(lf-\u003efilter_level[0] || lf-\u003efilter_level[1])` is true. This is why we can move the `check_planes_to_loop_filter()` call inside the if block.",
      "parentUuid": "17074f06_f1f27ee4",
      "range": {
        "startLine": 1861,
        "startChar": 4,
        "endLine": 1861,
        "endChar": 74
      },
      "revId": "c19bd268271a06e40915a1cbb00c9b8f0e1b2c76",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
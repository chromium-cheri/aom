{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6cb6b8bc_c1ebdaac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-04-22T20:12:18Z",
      "side": 1,
      "message": "Please review. Thanks!",
      "revId": "fadce3f2fdef6645c9ce8b01bba1ead7a2f98a5f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f6d93e8_dbf72544",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 10704
      },
      "writtenOn": "2021-04-22T20:16:58Z",
      "side": 1,
      "message": "We can do this, but I am not sure I understand why are we afraid of breaking binary compatibility?\nIn a public release we are exposing libaom version and the users can determine which version it is in run time. Is there a promise that we maintain binary compatibility between versions?\n\nThanks,\n-Fyodor",
      "revId": "fadce3f2fdef6645c9ce8b01bba1ead7a2f98a5f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35bb604d_f249962b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 10704
      },
      "writtenOn": "2021-04-22T21:31:43Z",
      "side": 1,
      "message": "marking as unresolved",
      "parentUuid": "2f6d93e8_dbf72544",
      "revId": "fadce3f2fdef6645c9ce8b01bba1ead7a2f98a5f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3dfe7c6_ee8b2579",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-04-22T21:47:03Z",
      "side": 1,
      "message": "Hi Fyodor,\n\nIt is common for a C library to maintain binary compatibility in new releases.\nThis is critical for libraries that are installed as system libraries. Some\nLinux distributions provide libaom as a system package. A system package for\na C library typically sticks with the same major version of that library.\nFor example, if a system package for libaom starts with libaom v3.0.0, it\ncan typically update to libaom v3.0.1, libaom v3.1.0, libaom v3.5.0, etc.,\nbut it will not update to libaom v4.0.0. This is why we need to avoid\nbreaking binary compatibility if possible.\n\nIf we don\u0027t revert this change, the libaom release that I am working on will\nneed to be libaom v4.0.0 (with the major version number bumped to indicate an\nincompatible change to the public API). Another reason to avoid the 4.0.0 version\nnumber is that libaom v3.0.0 was released only a month ago (on Mar 23, 2021).\nIt would look bad to bump the major version number so soon.",
      "parentUuid": "35bb604d_f249962b",
      "revId": "fadce3f2fdef6645c9ce8b01bba1ead7a2f98a5f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e80287f9_ff470bd2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 10704
      },
      "writtenOn": "2021-04-22T22:12:46Z",
      "side": 1,
      "message": "Thanks",
      "revId": "fadce3f2fdef6645c9ce8b01bba1ead7a2f98a5f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "222a66db_f9e8413a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 10704
      },
      "writtenOn": "2021-04-22T22:12:57Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b3dfe7c6_ee8b2579",
      "revId": "fadce3f2fdef6645c9ce8b01bba1ead7a2f98a5f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71c08aba_c317ab92",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5960
      },
      "writtenOn": "2021-04-22T22:24:48Z",
      "side": 1,
      "message": "I agree we shouldn\u0027t break compatibility on this release since 3.0.0 (which breaks compatibility) was just released a while ago.\n\nBut at some point we have to bump up the major version to accommodate new features where it is very difficult to keep the release compatible.\n\nIt\u0027s probably better to have a guideline how often we can do that. I added a comment in the Frank\u0027s release process document.",
      "parentUuid": "222a66db_f9e8413a",
      "revId": "fadce3f2fdef6645c9ce8b01bba1ead7a2f98a5f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80894c7e_7e3df208",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-04-22T22:34:34Z",
      "side": 1,
      "message": "I am surprised to discover that neither the aom_codec_enc_cfg_t struct nor the cfg_options_t struct can be extended without breaking binary compatibility.\n\nDoes this mean in order to add a new encoder option, we can only extend the av1_extracfg struct (which is a private type defined in av1/av1_cx_iface.c) and set its members using aom_codec_control() or the new Key \u0026 Value API function aom_codec_set_option()?",
      "parentUuid": "222a66db_f9e8413a",
      "revId": "fadce3f2fdef6645c9ce8b01bba1ead7a2f98a5f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
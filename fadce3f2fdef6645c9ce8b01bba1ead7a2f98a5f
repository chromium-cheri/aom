{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6cb6b8bc_c1ebdaac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-04-22T20:12:18Z",
      "side": 1,
      "message": "Please review. Thanks!",
      "revId": "fadce3f2fdef6645c9ce8b01bba1ead7a2f98a5f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f6d93e8_dbf72544",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 10704
      },
      "writtenOn": "2021-04-22T20:16:58Z",
      "side": 1,
      "message": "We can do this, but I am not sure I understand why are we afraid of breaking binary compatibility?\nIn a public release we are exposing libaom version and the users can determine which version it is in run time. Is there a promise that we maintain binary compatibility between versions?\n\nThanks,\n-Fyodor",
      "revId": "fadce3f2fdef6645c9ce8b01bba1ead7a2f98a5f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35bb604d_f249962b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 10704
      },
      "writtenOn": "2021-04-22T21:31:43Z",
      "side": 1,
      "message": "marking as unresolved",
      "parentUuid": "2f6d93e8_dbf72544",
      "revId": "fadce3f2fdef6645c9ce8b01bba1ead7a2f98a5f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3dfe7c6_ee8b2579",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-04-22T21:47:03Z",
      "side": 1,
      "message": "Hi Fyodor,\n\nIt is common for a C library to maintain binary compatibility in new releases.\nThis is critical for libraries that are installed as system libraries. Some\nLinux distributions provide libaom as a system package. A system package for\na C library typically sticks with the same major version of that library.\nFor example, if a system package for libaom starts with libaom v3.0.0, it\ncan typically update to libaom v3.0.1, libaom v3.1.0, libaom v3.5.0, etc.,\nbut it will not update to libaom v4.0.0. This is why we need to avoid\nbreaking binary compatibility if possible.\n\nIf we don\u0027t revert this change, the libaom release that I am working on will\nneed to be libaom v4.0.0 (with the major version number bumped to indicate an\nincompatible change to the public API). Another reason to avoid the 4.0.0 version\nnumber is that libaom v3.0.0 was released only a month ago (on Mar 23, 2021).\nIt would look bad to bump the major version number so soon.",
      "parentUuid": "35bb604d_f249962b",
      "revId": "fadce3f2fdef6645c9ce8b01bba1ead7a2f98a5f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5535f87f_8393667b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-03-24T17:44:01Z",
      "side": 1,
      "message": "Jerome: I checked the code carefully and found the code can be cleaned up further.",
      "revId": "1a90088269f2ff9a3ee7ccaaffbf0190dfa4d388",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d9a51ff0_e40bedfd",
        "filename": "examples/svc_encoder_rtc.c",
        "patchSetId": 2
      },
      "lineNbr": 1169,
      "author": {
        "id": 5960
      },
      "writtenOn": "2023-03-24T15:01:36Z",
      "side": 1,
      "message": "this is for ```AOM_CODEC_ERROR```, whose error message is \"Unspecified internal error\".\n\nI feel like mismatch could have its own error code / message.",
      "range": {
        "startLine": 1169,
        "startChar": 19,
        "endLine": 1169,
        "endChar": 20
      },
      "revId": "1a90088269f2ff9a3ee7ccaaffbf0190dfa4d388",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "76f5412d_5b4215f5",
        "filename": "examples/svc_encoder_rtc.c",
        "patchSetId": 2
      },
      "lineNbr": 1169,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-03-24T17:02:31Z",
      "side": 1,
      "message": "\u003e this is for ```AOM_CODEC_ERROR```, whose error message is \"Unspecified internal error\".\n\u003e \n\u003e I feel like mismatch could have its own error code / message.\n\nUsing the constant here should be fine since it\u0027s public. As for the mismatch return, that\u0027s debatable since this is more for development rather than a user facing feature. Rethinking return values could be added to the list of things to consider for 4.0.0: https://crbug.com/aomedia/3228",
      "parentUuid": "d9a51ff0_e40bedfd",
      "range": {
        "startLine": 1169,
        "startChar": 19,
        "endLine": 1169,
        "endChar": 20
      },
      "revId": "1a90088269f2ff9a3ee7ccaaffbf0190dfa4d388",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cc936f3_cf313516",
        "filename": "examples/svc_encoder_rtc.c",
        "patchSetId": 2
      },
      "lineNbr": 1660,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-03-24T17:44:01Z",
      "side": 1,
      "message": "`test_decode()` can be simplified to return a bool, which means mismatch. Note that the return value no longer means \"mismatch seen\", because now we never call `test_decode()` after having seen a mismatch.",
      "revId": "1a90088269f2ff9a3ee7ccaaffbf0190dfa4d388",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e847497_36c1618f",
        "filename": "examples/svc_encoder_rtc.c",
        "patchSetId": 2
      },
      "lineNbr": 1661,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-03-24T17:44:01Z",
      "side": 1,
      "message": "Please see line 1693. I think we should include the frame number in the error message:\n\n```\n          if (mismatch_seen) die_codec(\u0026decoder, \"Mismatch seen in frame %d\", frame_cnt);\n```",
      "revId": "1a90088269f2ff9a3ee7ccaaffbf0190dfa4d388",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98d56de0_852d24df",
        "filename": "examples/svc_encoder_rtc.c",
        "patchSetId": 2
      },
      "lineNbr": 1696,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-03-24T17:44:01Z",
      "side": 1,
      "message": "Please check this if-else statement. Given the new line 1661, perhaps this if-else statement should become simply:\n\n```\n  fprintf(stats_file, \"No mismatch detected in recon buffers\\n\");\n```",
      "revId": "1a90088269f2ff9a3ee7ccaaffbf0190dfa4d388",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "1a90088269f2ff9a3ee7ccaaffbf0190dfa4d388",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "1a90088269f2ff9a3ee7ccaaffbf0190dfa4d388",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "1a90088269f2ff9a3ee7ccaaffbf0190dfa4d388",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
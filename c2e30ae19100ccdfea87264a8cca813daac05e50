{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fc866a68_9d5efe0e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-06-14T19:02:04Z",
      "side": 1,
      "message": "Thanks, you beat me to it. I forgot to check avx2 in my change.",
      "revId": "c2e30ae19100ccdfea87264a8cca813daac05e50",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "454cd032_c5b6a052",
        "filename": "aom_dsp/aom_dsp_rtcd_defs.pl",
        "patchSetId": 1
      },
      "lineNbr": 1157,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-06-14T19:04:37Z",
      "side": 1,
      "message": "for those wondering, this is necessary because of:\n\nhttps://aomedia.googlesource.com/aom/+/21d45ae5dfcf55e010f6cd9b619b4ffc1014f856/aom_dsp/sad.c#279\n\n```\n// Call SIMD version of aom_highbd_sad_mxnx4d if the 3d version is unavailable.\n#define HIGHBD_SAD_MXNX3D(m, n)                                              \\\n  void aom_highbd_sad##m##x##n##x3d_c(const uint8_t *src, int src_stride,    \\\n                                      const uint8_t *const ref_array[],      \\\n                                      int ref_stride, uint32_t *sad_array) { \\\n    aom_highbd_sad##m##x##n##x4d(src, src_stride, ref_array, ref_stride,     \\\n                                 sad_array);                                 \\\n  }\n```\n\nThe call sites pass arrays of size 4 to the 3d function.",
      "range": {
        "startLine": 1157,
        "startChar": 165,
        "endLine": 1157,
        "endChar": 168
      },
      "revId": "c2e30ae19100ccdfea87264a8cca813daac05e50",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "c2e30ae19100ccdfea87264a8cca813daac05e50",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "c2e30ae19100ccdfea87264a8cca813daac05e50",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "c2e30ae19100ccdfea87264a8cca813daac05e50",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
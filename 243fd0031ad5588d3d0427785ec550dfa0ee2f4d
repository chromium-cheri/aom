{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8643fa09_6ebbfb59",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-01-23T19:20:51Z",
      "side": 1,
      "message": "I haven\u0027t checked this on 2017 or 2019 yet.",
      "revId": "243fd0031ad5588d3d0427785ec550dfa0ee2f4d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "493b9676_64cf2661",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-01-23T19:31:17Z",
      "side": 1,
      "message": "Me either. I only have 2022 installed on my Windows laptop.\n\nIs your Visual Studio nightly build doing RelWithDebInfo builds? If so, it will test this CL with 2017 and 2019 after it is committed.",
      "parentUuid": "8643fa09_6ebbfb59",
      "revId": "243fd0031ad5588d3d0427785ec550dfa0ee2f4d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6c63c01_109b660c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-01-23T20:59:39Z",
      "side": 1,
      "message": "\u003e Me either. I only have 2022 installed on my Windows laptop.\n\u003e \n\u003e Is your Visual Studio nightly build doing RelWithDebInfo builds? If so, it will test this CL with 2017 and 2019 after it is committed.\n\n2019 worked, but 2017 fails with various versions of:\n\n```\naom_dsp\\simd\\v64_intrinsics_c.h(261): fatal error C1002: compiler is out of heap space in pass 2\naom_dsp\\simd\\v64_intrinsics_c.h(759): fatal error C1002: compiler is out of heap space in pass 2\naom_dsp\\simd\\v64_intrinsics_c.h(874): fatal error C1002: compiler is out of heap space in pass 2\n```",
      "parentUuid": "493b9676_64cf2661",
      "revId": "243fd0031ad5588d3d0427785ec550dfa0ee2f4d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d89ef0da_ec6166bb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-01-23T21:32:38Z",
      "side": 1,
      "message": "Thank you for testing. Then this CL still needs work.",
      "parentUuid": "a6c63c01_109b660c",
      "revId": "243fd0031ad5588d3d0427785ec550dfa0ee2f4d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4fa450d5_c4ff2638",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-01-25T04:40:43Z",
      "side": 1,
      "message": "James: 2017 works for me if I use x64_x86 cross tools, although my laptop does struggle while compiling av1\\common\\x86\\cdef_block_avx2.c.\n\nDid you use x64_x86 cross tools or x86 native tools?",
      "parentUuid": "d89ef0da_ec6166bb",
      "revId": "243fd0031ad5588d3d0427785ec550dfa0ee2f4d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a240c438_973d0cbc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-01-25T19:51:53Z",
      "side": 1,
      "message": "\u003e James: 2017 works for me if I use x64_x86 cross tools, although my laptop does struggle while compiling av1\\common\\x86\\cdef_block_avx2.c.\n\u003e \n\u003e Did you use x64_x86 cross tools or x86 native tools?\n\nNative.",
      "parentUuid": "4fa450d5_c4ff2638",
      "revId": "243fd0031ad5588d3d0427785ec550dfa0ee2f4d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33e7e589_5b59280e",
        "filename": "av1/common/cdef_block_simd.h",
        "patchSetId": 1
      },
      "lineNbr": 267,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-01-23T17:44:57Z",
      "side": 1,
      "message": "1934 is the value of `_MSC_VER` in Visual Studio 2022 version 17.4.\n\nAlternatively, we can test `_MSC_VER \u003c 1940`, assuming future versions of Visual Studio 2022 have `_MSC_VER` equal to 193*. Would that be better?",
      "revId": "243fd0031ad5588d3d0427785ec550dfa0ee2f4d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be662dcd_8e781976",
        "filename": "av1/common/cdef_block_simd.h",
        "patchSetId": 1
      },
      "lineNbr": 267,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-01-23T19:20:51Z",
      "side": 1,
      "message": "\u003e 1934 is the value of `_MSC_VER` in Visual Studio 2022 version 17.4.\n\u003e \n\u003e Alternatively, we can test `_MSC_VER \u003c 1940`, assuming future versions of Visual Studio 2022 have `_MSC_VER` equal to 193*. Would that be better?\n\nIt\u0027s probably safer to check `\u003c 1940` for now assuming the bug will continue through those versions.",
      "parentUuid": "33e7e589_5b59280e",
      "revId": "243fd0031ad5588d3d0427785ec550dfa0ee2f4d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd318c2d_942079b1",
        "filename": "av1/common/cdef_block_simd.h",
        "patchSetId": 1
      },
      "lineNbr": 267,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-01-23T19:31:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "be662dcd_8e781976",
      "revId": "243fd0031ad5588d3d0427785ec550dfa0ee2f4d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9c986bd_93845cc0",
        "filename": "av1/common/cdef_block_simd.h",
        "patchSetId": 1
      },
      "lineNbr": 270,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-01-23T17:44:57Z",
      "side": 1,
      "message": "In aom_dsp/aom_simd_inline.h, `SIMD_INLINE` is defined as follows:\n\n```\n#ifndef SIMD_INLINE\n#define SIMD_INLINE static AOM_FORCE_INLINE\n#endif\n```",
      "revId": "243fd0031ad5588d3d0427785ec550dfa0ee2f4d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e9408c7_0b93180d",
        "filename": "av1/common/cdef_block_simd.h",
        "patchSetId": 1
      },
      "lineNbr": 691,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-01-23T17:44:57Z",
      "side": 1,
      "message": "Note that `filter_block_8x8()` and `filter_block_4x4()` are called these `cdef_filter_d_n` functions, where `d` \u003d 8, 16 and `n` \u003d 0, 1, 2. So there are six calls to each of `filter_block_8x8()` and `filter_block_4x4()`.\n\nIf these `filter_block_8x8()` and `filter_block_4x4()` calls are all inlined, MSVC runs out of heap space in x86 release builds.",
      "revId": "243fd0031ad5588d3d0427785ec550dfa0ee2f4d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "15abf64e_bbe6d47a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 8612
      },
      "writtenOn": "2021-08-27T17:02:54Z",
      "side": 1,
      "message": "Thanks for fixing.",
      "revId": "4f01785d369e8fba6fe5c7ad912dee59f1f10206",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93503e36_5949e0bc",
        "filename": "test/fft_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 135,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-08-25T22:17:27Z",
      "side": 1,
      "message": "Neil: An obvious fix is to remove the local variable \u0027sum\u0027. Since these tests are named \"Benchmark\", I am wondering if summing the output_[0] values is an important part of the benchmarks. So I simply added a void cast to discard the final \u0027sum\u0027 value.",
      "revId": "4f01785d369e8fba6fe5c7ad912dee59f1f10206",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc4726b6_82ab23a7",
        "filename": "test/fft_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 135,
      "author": {
        "id": 5020
      },
      "writtenOn": "2021-08-25T22:20:08Z",
      "side": 1,
      "message": "\u003e Neil: An obvious fix is to remove the local variable \u0027sum\u0027. Since these tests are named \"Benchmark\", I am wondering if summing the output_[0] values is an important part of the benchmarks. So I simply added a void cast to discard the final \u0027sum\u0027 value.\n\nif the result is unused it\u0027s likely that an optimized build might remove the addition if it doesn\u0027t have other side effects like calling a function, etc.",
      "parentUuid": "93503e36_5949e0bc",
      "revId": "4f01785d369e8fba6fe5c7ad912dee59f1f10206",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "657a79c9_ab58b674",
        "filename": "test/fft_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 135,
      "author": {
        "id": 8612
      },
      "writtenOn": "2021-08-27T17:02:54Z",
      "side": 1,
      "message": "For this test, we can check that the sum is equal to the num_trials:\n  const int num_trials \u003d 1000 * (64 - n);\n  for (int i \u003d 0; i \u003c num_trials; ++i) {...}\n \n  EXPECT_NEAR(sum, num_trials, 1e-3);",
      "parentUuid": "dc4726b6_82ab23a7",
      "revId": "4f01785d369e8fba6fe5c7ad912dee59f1f10206",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "149dedcf_cabdc088",
        "filename": "test/fft_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 231,
      "author": {
        "id": 8612
      },
      "writtenOn": "2021-08-27T17:02:54Z",
      "side": 1,
      "message": "This one, the input is complex (and indexing doesn\u0027t exercise the entire input space), but the following check should still hold:\n  const int num_trials \u003d 1000 * (64 - n);\n  for (int i \u003d 0; i \u003c num_trials; ++i) {...}\n  \n  EXPECT_GE(sum, num_trials / 2);",
      "revId": "4f01785d369e8fba6fe5c7ad912dee59f1f10206",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
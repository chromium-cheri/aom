/*
 * Copyright (c) 2016, Alliance for Open Media. All rights reserved
 *
 * This source code is subject to the terms of the BSD 2 Clause License and
 * the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License
 * was not distributed with this source code in the LICENSE file, you can
 * obtain it at www.aomedia.org/license/software. If the Alliance for Open
 * Media Patent License 1.0 was not distributed with this source code in the
 * PATENTS file, you can obtain it at www.aomedia.org/license/patent.
 */

#ifndef AOM_DSP_TXFM_COMMON_H_
#define AOM_DSP_TXFM_COMMON_H_

#include "aom_dsp/aom_dsp_common.h"

// Constants and Macros used by all idct/dct functions
#define DCT_CONST_BITS 14
#define DCT_CONST_ROUNDING (1 << (DCT_CONST_BITS - 1))

#define UNIT_QUANT_SHIFT 2
#define UNIT_QUANT_FACTOR (1 << UNIT_QUANT_SHIFT)

typedef struct txfm_param {
  // for both forward and inverse transforms
  int tx_type;
  int tx_size;
  int lossless;
  int bd;
#if CONFIG_MRC_TX || CONFIG_LGT
  int stride;
  uint8_t *dst;
#endif  // CONFIG_MRC_TX || CONFIG_LGT
#if CONFIG_LGT
  int is_inter;
  int mode;
  int use_lgt;
#endif
// for inverse transforms only
#if CONFIG_ADAPT_SCAN
  const int16_t *eob_threshold;
#endif
  int eob;
} TxfmParam;

// Constants:
//  for (int i = 1; i< 32; ++i)
//    printf("static const int cospi_%d_64 = %.0f;\n", i,
//           round(16384 * cos(i*M_PI/64)));
// Note: sin(k*Pi/64) = cos((32-k)*Pi/64)
static const tran_high_t cospi_1_64 = 16364;
static const tran_high_t cospi_2_64 = 16305;
static const tran_high_t cospi_3_64 = 16207;
static const tran_high_t cospi_4_64 = 16069;
static const tran_high_t cospi_5_64 = 15893;
static const tran_high_t cospi_6_64 = 15679;
static const tran_high_t cospi_7_64 = 15426;
static const tran_high_t cospi_8_64 = 15137;
static const tran_high_t cospi_9_64 = 14811;
static const tran_high_t cospi_10_64 = 14449;
static const tran_high_t cospi_11_64 = 14053;
static const tran_high_t cospi_12_64 = 13623;
static const tran_high_t cospi_13_64 = 13160;
static const tran_high_t cospi_14_64 = 12665;
static const tran_high_t cospi_15_64 = 12140;
static const tran_high_t cospi_16_64 = 11585;
static const tran_high_t cospi_17_64 = 11003;
static const tran_high_t cospi_18_64 = 10394;
static const tran_high_t cospi_19_64 = 9760;
static const tran_high_t cospi_20_64 = 9102;
static const tran_high_t cospi_21_64 = 8423;
static const tran_high_t cospi_22_64 = 7723;
static const tran_high_t cospi_23_64 = 7005;
static const tran_high_t cospi_24_64 = 6270;
static const tran_high_t cospi_25_64 = 5520;
static const tran_high_t cospi_26_64 = 4756;
static const tran_high_t cospi_27_64 = 3981;
static const tran_high_t cospi_28_64 = 3196;
static const tran_high_t cospi_29_64 = 2404;
static const tran_high_t cospi_30_64 = 1606;
static const tran_high_t cospi_31_64 = 804;

//  16384 * sqrt(2) * sin(kPi/9) * 2 / 3
static const tran_high_t sinpi_1_9 = 5283;
static const tran_high_t sinpi_2_9 = 9929;
static const tran_high_t sinpi_3_9 = 13377;
static const tran_high_t sinpi_4_9 = 15212;

// 16384 * sqrt(2)
static const tran_high_t Sqrt2 = 23170;

static INLINE tran_high_t fdct_round_shift(tran_high_t input) {
  tran_high_t rv = ROUND_POWER_OF_TWO(input, DCT_CONST_BITS);
  return rv;
}

#if CONFIG_LGT
#define LGT_PRESMOOTH 0
// diff threshould for applying LGT
#define LGT_THR1 40
#define LGT_THR2 10
// 1 for a fixed intra LGT (lgt_140 for length-4, lgt_150 for length-8)
#define LGT_FIXED_INTRA 0
// 1 for LGT for intra directional modes
#define LGT_USE_PRED 1
// 1 for LGT with varying weights
#define LGT_VAR_WEIGHT 1
#define LGT_SL_ADST 0

// 000, 050, 100
#define LGT_WEIGHT_TYPES 3
static INLINE int get_weight_idx(int i, int ntx, int diff) {
#if LGT_VAR_WEIGHT
  return diff > LGT_THR2 ? 0 : 2;
  // return i * LGT_WEIGHT_TYPES / ntx;
  // return i >= 16 ? 1 : 0;
  (void)ntx;
  (void)i;
  // return i >= ntx*9/10 ? 1 : 0;
#else
  (void)diff;
  (void)i;
  (void)ntx;
  return 0;
#endif
}

// Use negative numbers so they do not coincide with lgt*[0][0], which are
// always nonnegative. More transforms with fast algorithms can be added
// in the future.
typedef enum {
  DCT4 = -1,
  ADST4 = -2,
  DCT8 = -3,
  ADST8 = -4,
  DCT16 = -5,
  ADST16 = -6,
  DCT32 = -7,
  ADST32 = -8,
} ButterflyLgt;

/* These are some LGTs already implementated in the codec. When any of them
 * is chosen, the flgt or ilgt function will call the existing fast
 * transform instead of the inner product with the basis functions. Thus, we
 * do not need the actual basis functions here */
static const tran_high_t lgt4_000[1][1] = { { (tran_high_t)DCT4 } };
static const tran_high_t lgt4_100[1][1] = { { (tran_high_t)ADST4 } };
static const tran_high_t lgt8_000[1][1] = { { (tran_high_t)DCT8 } };
static const tran_high_t lgt8_200[1][1] = { { (tran_high_t)ADST8 } };
static const tran_high_t lgt16_000[1][1] = { { (tran_high_t)DCT16 } };
static const tran_high_t lgt16_200[1][1] = { { (tran_high_t)ADST16 } };
static const tran_high_t lgt32_000[1][1] = { { (tran_high_t)DCT32 } };
static const tran_high_t lgt32_200[1][1] = { { (tran_high_t)ADST32 } };

/* The Line Graph Transforms (LGTs) matrices are written as follows.
   Each 2D array is sqrt(2)*16384 times an LGT matrix, which is the
   matrix of eigenvectors of the graph Laplacian matrix of the associated
   line graph. Note: some of those transforms also have fast algorithms,
   but not implemented yet. Those can be done in the future if necessary. */

/* Length-4 LGTs: */

// LGT4 name: lgt4_000w3
// Self loops: 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 0.000
static const tran_high_t lgt4_000w3[4][4] = {
  { 0, 0, 0, 23170 },
  { 13377, 13377, 13377, 0 },
  { 16384, 0, -16384, 0 },
  { 9459, -18919, 9459, 0 },
};

// LGT4 name: lgt4_000w2
// Self loops: 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 0.000, 1.000
static const tran_high_t lgt4_000w2[4][4] = {
  { 16384, 16384, 0, 0 },
  { 16384, -16384, 0, 0 },
  { 0, 0, 16384, 16384 },
  { 0, 0, 16384, -16384 },
};

// LGT4 name: lgt4_000w1
// Self loops: 0.000, 0.000, 0.000, 0.000
// Edges: 0.000, 1.000, 1.000
static const tran_high_t lgt4_000w1[4][4] = {
  { 23170, 0, 0, 0 },
  { 0, 13377, 13377, 13377 },
  { 0, 16384, 0, -16384 },
  { 0, 9459, -18919, 9459 },
};

// LGT4 name: lgt4_050w3
// Self loops: 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 0.500
static const tran_high_t lgt4_050w3[4][4] = {
  { 11585, 11585, 11585, 11585 },
  { 12747, 7029, -1843, -17933 },
  { 12989, -5544, -16167, 8722 },
  { 8453, -17959, 11743, -2237 },
};

// LGT4 name: lgt4_050w2
// Self loops: 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 0.500, 1.000
static const tran_high_t lgt4_050w2[4][4] = {
  { 11585, 11585, 11585, 11585 },
  { 13937, 8614, -8614, -13937 },
  { 11585, -11585, -11585, 11585 },
  { 8614, -13937, 13937, -8614 },
};

// LGT4 name: lgt4_050w1
// Self loops: 0.000, 0.000, 0.000, 0.000
// Edges: 0.500, 1.000, 1.000
static const tran_high_t lgt4_050w1[4][4] = {
  { 11585, 11585, 11585, 11585 },
  { 17933, 1843, -7029, -12747 },
  { 8722, -16167, -5544, 12989 },
  { 2237, -11743, 17959, -8453 },
};

// LGT4 name: lgt4_020w3
// Self loops: 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 0.200
static const tran_high_t lgt4_020w3[4][4] = {
  { 11585, 11585, 11585, 11585 },
  { 9297, 7127, 3294, -19718 },
  { 15247, -1951, -16948, 3653 },
  { 9151, -18656, 10225, -720 },
};

// LGT4 name: lgt4_020w2
// Self loops: 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 0.200, 1.000
static const tran_high_t lgt4_020w2[4][4] = {
  { 11585, 11585, 11585, 11585 },
  { 12670, 10387, -10387, -12670 },
  { 11585, -11585, -11585, 11585 },
  { 10387, -12670, 12670, -10387 },
};

// LGT4 name: lgt4_020w1
// Self loops: 0.000, 0.000, 0.000, 0.000
// Edges: 0.200, 1.000, 1.000
static const tran_high_t lgt4_020w1[4][4] = {
  { 11585, 11585, 11585, 11585 },
  { 19718, -3294, -7127, -9297 },
  { 3653, -16948, -1951, 15247 },
  { 720, -10225, 18656, -9151 },
};

// LGT4 name: lgt4_010w3
// Self loops: 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 0.100
static const tran_high_t lgt4_010w3[4][4] = {
  { 11585, 11585, 11585, 11585 },
  { 7950, 6953, 5084, -19987 },
  { 15894, -901, -16744, 1750 },
  { 9317, -18802, 9821, -337 },
};

// LGT4 name: lgt4_010w2
// Self loops: 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 0.100, 1.000
static const tran_high_t lgt4_010w2[4][4] = {
  { 11585, 11585, 11585, 11585 },
  { 12148, 10994, -10994, -12148 },
  { 11585, -11585, -11585, 11585 },
  { 10994, -12148, 12148, -10994 },
};

// LGT4 name: lgt4_010w1
// Self loops: 0.000, 0.000, 0.000, 0.000
// Edges: 0.100, 1.000, 1.000
static const tran_high_t lgt4_010w1[4][4] = {
  { 11585, 11585, 11585, 11585 },
  { 19987, -5084, -6953, -7950 },
  { 1750, -16744, -901, 15894 },
  { 337, -9821, 18802, -9317 },
};

// LGT4 name: lgt4_140
// Self loops: 1.400, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 1.000
static const tran_high_t lgt4_140[4][4] = {
  { 4206, 9518, 13524, 15674 },
  { 11552, 14833, 1560, -13453 },
  { 15391, -1906, -14393, 9445 },
  { 12201, -14921, 12016, -4581 },
};

/* Length-8 LGTs:*/

// LGT8 name: lgt8_000w7
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 0.000
static const tran_high_t lgt8_000w7[8][8] = {
  { 0, 0, 0, 0, 0, 0, 0, 32768 },
  { 12385, 12385, 12385, 12385, 12385, 12385, 12385, 0 },
  { 17076, 13694, 7600, 0, -7600, -13694, -17076, 0 },
  { 15781, 3898, -10921, -17515, -10921, 3898, 15781, 0 },
  { 13694, -7600, -17076, 0, 17076, 7600, -13694, 0 },
  { 10921, -15781, -3898, 17515, -3898, -15781, 10921, 0 },
  { 7600, -17076, 13694, 0, -13694, 17076, -7600, 0 },
  { 3898, -10921, 15781, -17515, 15781, -10921, 3898, 0 },
};

// LGT8 name: lgt8_000w6
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 1.000, 1.000, 1.000, 0.000, 1.000
static const tran_high_t lgt8_000w6[8][8] = {
  { 0, 0, 0, 0, 0, 0, 23170, 23170 },
  { 0, 0, 0, 0, 0, 0, 23170, -23170 },
  { 13377, 13377, 13377, 13377, 13377, 13377, 0, 0 },
  { 18274, 13377, 4896, -4896, -13377, -18274, 0, 0 },
  { 16384, 0, -16384, -16384, 0, 16384, 0, 0 },
  { 13377, -13377, -13377, 13377, 13377, -13377, 0, 0 },
  { 9459, -18919, 9459, 9459, -18919, 9459, 0, 0 },
  { 4896, -13377, 18274, -18274, 13377, -4896, 0, 0 },
};

// LGT8 name: lgt8_000w5
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 1.000, 1.000, 0.000, 1.000, 1.000
static const tran_high_t lgt8_000w5[8][8] = {
  { 0, 0, 0, 0, 0, 18919, 18919, 18919 },
  { 0, 0, 0, 0, 0, 23170, 0, -23170 },
  { 0, 0, 0, 0, 0, 13377, -26755, 13377 },
  { 14654, 14654, 14654, 14654, 14654, 0, 0, 0 },
  { 19710, 12181, 0, -12181, -19710, 0, 0, 0 },
  { 16766, -6404, -20724, -6404, 16766, 0, 0, 0 },
  { 12181, -19710, 0, 19710, -12181, 0, 0, 0 },
  { 6404, -16766, 20724, -16766, 6404, 0, 0, 0 },
};

// LGT8 name: lgt8_000w4
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 1.000, 0.000, 1.000, 1.000, 1.000
static const tran_high_t lgt8_000w4[8][8] = {
  { 16384, 16384, 16384, 16384, 0, 0, 0, 0 },
  { 21407, 8867, -8867, -21407, 0, 0, 0, 0 },
  { 16384, -16384, -16384, 16384, 0, 0, 0, 0 },
  { 8867, -21407, 21407, -8867, 0, 0, 0, 0 },
  { 0, 0, 0, 0, 16384, 16384, 16384, 16384 },
  { 0, 0, 0, 0, 21407, 8867, -8867, -21407 },
  { 0, 0, 0, 0, 16384, -16384, -16384, 16384 },
  { 0, 0, 0, 0, 8867, -21407, 21407, -8867 },
};

// LGT8 name: lgt8_000w3
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 0.000, 1.000, 1.000, 1.000, 1.000
static const tran_high_t lgt8_000w3[8][8] = {
  { 18919, 18919, 18919, 0, 0, 0, 0, 0 },
  { 23170, 0, -23170, 0, 0, 0, 0, 0 },
  { 13377, -26755, 13377, 0, 0, 0, 0, 0 },
  { 0, 0, 0, 14654, 14654, 14654, 14654, 14654 },
  { 0, 0, 0, 19710, 12181, 0, -12181, -19710 },
  { 0, 0, 0, 16766, -6404, -20724, -6404, 16766 },
  { 0, 0, 0, 12181, -19710, 0, 19710, -12181 },
  { 0, 0, 0, 6404, -16766, 20724, -16766, 6404 },
};

// LGT8 name: lgt8_000w2
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 0.000, 1.000, 1.000, 1.000, 1.000, 1.000
static const tran_high_t lgt8_000w2[8][8] = {
  { 23170, 23170, 0, 0, 0, 0, 0, 0 },
  { 23170, -23170, 0, 0, 0, 0, 0, 0 },
  { 0, 0, 13377, 13377, 13377, 13377, 13377, 13377 },
  { 0, 0, 18274, 13377, 4896, -4896, -13377, -18274 },
  { 0, 0, 16384, 0, -16384, -16384, 0, 16384 },
  { 0, 0, 13377, -13377, -13377, 13377, 13377, -13377 },
  { 0, 0, 9459, -18919, 9459, 9459, -18919, 9459 },
  { 0, 0, 4896, -13377, 18274, -18274, 13377, -4896 },
};

// LGT8 name: lgt8_000w1
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 0.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000
static const tran_high_t lgt8_000w1[8][8] = {
  { 32768, 0, 0, 0, 0, 0, 0, 0 },
  { 0, 12385, 12385, 12385, 12385, 12385, 12385, 12385 },
  { 0, 17076, 13694, 7600, 0, -7600, -13694, -17076 },
  { 0, 15781, 3898, -10921, -17515, -10921, 3898, 15781 },
  { 0, 13694, -7600, -17076, 0, 17076, 7600, -13694 },
  { 0, 10921, -15781, -3898, 17515, -3898, -15781, 10921 },
  { 0, 7600, -17076, 13694, 0, -13694, 17076, -7600 },
  { 0, 3898, -10921, 15781, -17515, 15781, -10921, 3898 },
};

// LGT8 name: lgt8_050w7
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 0.500
static const tran_high_t lgt8_050w7[8][8] = {
  { 11585, 11585, 11585, 11585, 11585, 11585, 11585, 11585 },
  { 15576, 13298, 9076, 3526, -2539, -8233, -12723, -17982 },
  { 13701, 6824, -3478, -12035, -14551, -9763, -75, 19377 },
  { 13377, 0, -13377, -13377, 0, 13377, 13377, -13377 },
  { 12556, -8952, -15126, 4610, 16449, 112, -16417, 6767 },
  { 10302, -15831, -1806, 16800, -7210, -12931, 14149, -3474 },
  { 7246, -16588, 14142, -1647, -12019, 17144, -10086, 1808 },
  { 3732, -10497, 15298, -17236, 15948, -11676, 5219, -788 },
};

// LGT8 name: lgt8_050w6
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 1.000, 1.000, 1.000, 0.500, 1.000
static const tran_high_t lgt8_050w6[8][8] = {
  { 11585, 11585, 11585, 11585, 11585, 11585, 11585, 11585 },
  { 14735, 12768, 9097, 4211, -1237, -6520, -15345, -17709 },
  { 14990, 7931, -2862, -12308, -15958, -12093, 7024, 13275 },
  { 14942, -1992, -16669, -12454, 5876, 17546, 1115, -8364 },
  { 11585, -11585, -11585, 11585, 11585, -11585, -11585, 11585 },
  { 6670, -9506, -2627, 10623, -1891, -9819, 21952, -15402 },
  { 8628, -17994, 10905, 6155, -17587, 12936, -5848, 2804 },
  { 4615, -12699, 17627, -18173, 14203, -6702, 1775, -645 },
};

// LGT8 name: lgt8_050w5
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 1.000, 1.000, 0.500, 1.000, 1.000
static const tran_high_t lgt8_050w5[8][8] = {
  { 11585, 11585, 11585, 11585, 11585, 11585, 11585, 11585 },
  { 14591, 12783, 9392, 4837, -317, -10547, -14355, -16385 },
  { 16628, 7867, -5039, -15290, -17485, -3450, 5386, 11383 },
  { 10793, -2031, -12442, -8070, 5890, 19814, 3234, -17189 },
  { 12954, -8589, -15849, 3247, 16943, -12018, -6513, 9823 },
  { 11083, -18811, 2033, 17393, -14161, -879, 8133, -4792 },
  { 2900, -6225, 4237, 1368, -5804, 16379, -24065, 11211 },
  { 5882, -15612, 19946, -17386, 8816, -3214, 2515, -948 },
};

// LGT8 name: lgt8_050w4
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 1.000, 0.500, 1.000, 1.000, 1.000
static const tran_high_t lgt8_050w4[8][8] = {
  { 11585, 11585, 11585, 11585, 11585, 11585, 11585, 11585 },
  { 15212, 13377, 9929, 5283, -5283, -9929, -13377, -15212 },
  { 15137, 6270, -6270, -15137, -15137, -6270, 6270, 15137 },
  { 13377, 0, -13377, -13377, 13377, 13377, 0, -13377 },
  { 11585, -11585, -11585, 11585, 11585, -11585, -11585, 11585 },
  { 9929, -13377, -5283, 15212, -15212, 5283, 13377, -9929 },
  { 6270, -15137, 15137, -6270, -6270, 15137, -15137, 6270 },
  { 5283, -13377, 15212, -9929, 9929, -15212, 13377, -5283 },
};

// LGT8 name: lgt8_050w3
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 0.500, 1.000, 1.000, 1.000, 1.000
static const tran_high_t lgt8_050w3[8][8] = {
  { 11585, 11585, 11585, 11585, 11585, 11585, 11585, 11585 },
  { 16385, 14355, 10547, 317, -4837, -9392, -12783, -14591 },
  { 11383, 5386, -3450, -17485, -15290, -5039, 7867, 16628 },
  { 17189, -3234, -19814, -5890, 8070, 12442, 2031, -10793 },
  { 9823, -6513, -12018, 16943, 3247, -15849, -8589, 12954 },
  { 4792, -8133, 879, 14161, -17393, -2033, 18811, -11083 },
  { 11211, -24065, 16379, -5804, 1368, 4237, -6225, 2900 },
  { 948, -2515, 3214, -8816, 17386, -19946, 15612, -5882 },
};

// LGT8 name: lgt8_050w2
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 0.500, 1.000, 1.000, 1.000, 1.000, 1.000
static const tran_high_t lgt8_050w2[8][8] = {
  { 11585, 11585, 11585, 11585, 11585, 11585, 11585, 11585 },
  { 17709, 15345, 6520, 1237, -4211, -9097, -12768, -14735 },
  { 13275, 7024, -12093, -15958, -12308, -2862, 7931, 14990 },
  { 8364, -1115, -17546, -5876, 12454, 16669, 1992, -14942 },
  { 11585, -11585, -11585, 11585, 11585, -11585, -11585, 11585 },
  { 15402, -21952, 9819, 1891, -10623, 2627, 9506, -6670 },
  { 2804, -5848, 12936, -17587, 6155, 10905, -17994, 8628 },
  { 645, -1775, 6702, -14203, 18173, -17627, 12699, -4615 },
};

// LGT8 name: lgt8_050w1
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 0.500, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000
static const tran_high_t lgt8_050w1[8][8] = {
  { 11585, 11585, 11585, 11585, 11585, 11585, 11585, 11585 },
  { 17982, 12723, 8233, 2539, -3526, -9076, -13298, -15576 },
  { 19377, -75, -9763, -14551, -12035, -3478, 6824, 13701 },
  { 13377, -13377, -13377, 0, 13377, 13377, 0, -13377 },
  { 6767, -16417, 112, 16449, 4610, -15126, -8952, 12556 },
  { 3474, -14149, 12931, 7210, -16800, 1806, 15831, -10302 },
  { 1808, -10086, 17144, -12019, -1647, 14142, -16588, 7246 },
  { 788, -5219, 11676, -15948, 17236, -15298, 10497, -3732 },
};

// LGT8 name: lgt8_020w2
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 0.200, 1.000, 1.000, 1.000, 1.000, 1.000
static const tran_high_t lgt8_020w2[8][8] = {
  { 11585, 11585, 11585, 11585, 11585, 11585, 11585, 11585 },
  { 19807, 18024, 998, -2497, -5768, -8519, -10503, -11542 },
  { 7663, 5000, -17006, -15496, -8601, 1284, 10722, 16434 },
  { 3441, -182, -17338, -2514, 14957, 16680, 840, -15884 },
  { 11585, -11585, -11585, 11585, 11585, -11585, -11585, 11585 },
  { 18488, -21276, 8712, -4029, -8105, 5251, 7313, -6354 },
  { 780, -1577, 10457, -18729, 8670, 9875, -18755, 9279 },
  { 182, -498, 5408, -13623, 18262, -18105, 13195, -4820 },
};

// LGT8 name: lgt8_010w2
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 0.100, 1.000, 1.000, 1.000, 1.000, 1.000
static const tran_high_t lgt8_010w2[8][8] = {
  { 11585, 11585, 11585, 11585, 11585, 11585, 11585, 11585 },
  { 20299, 19181, -2566, -4599, -6379, -7808, -8806, -9320 },
  { 4054, 2821, -18086, -14676, -6803, 3139, 12126, 17426 },
  { 1690, -44, -16936, -1252, 15717, 16562, 417, -16155 },
  { 11585, -11585, -11585, 11585, 11585, -11585, -11585, 11585 },
  { 19335, -20710, 7765, -5470, -7376, 5995, 6950, -6489 },
  { 349, -702, 9909, -18849, 9116, 9647, -18854, 9383 },
  { 83, -226, 5129, -13491, 18270, -18199, 13295, -4862 },
};

// LGT8 name: lgt8_020w7
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 0.200
static const tran_high_t lgt8_020w7[8][8] = {
  { 11585, 11585, 11585, 11585, 11585, 11585, 11585, 11585 },
  { 13315, 11665, 8570, 4412, -292, -4960, -9014, -23696 },
  { 13040, 8847, 1810, -5809, -11561, -13595, -11258, 18526 },
  { 15046, 2719, -11835, -16693, -7875, 7395, 16606, -5363 },
  { 13392, -8019, -16609, 1354, 17153, 5528, -14935, 2135 },
  { 10746, -15815, -3287, 17365, -4903, -15052, 12003, -1057 },
  { 7496, -16937, 13839, -494, -13216, 17141, -8376, 548 },
  { 3848, -10794, 15638, -17436, 15838, -11156, 4300, -239 },
};

// LGT8 name: lgt8_020w6
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 1.000, 1.000, 1.000, 0.200, 1.000
static const tran_high_t lgt8_020w6[8][8] = {
  { 11585, 11585, 11585, 11585, 11585, 11585, 11585, 11585 },
  { 11542, 10503, 8519, 5768, 2497, -998, -18024, -19807 },
  { 16434, 10722, 1284, -8601, -15496, -17006, 5000, 7663 },
  { 15884, -840, -16680, -14957, 2514, 17338, 182, -3441 },
  { 11585, -11585, -11585, 11585, 11585, -11585, -11585, 11585 },
  { 6354, -7313, -5251, 8105, 4029, -8712, 21276, -18488 },
  { 9279, -18755, 9875, 8670, -18729, 10457, -1577, 780 },
  { 4820, -13195, 18105, -18262, 13623, -5408, 498, -182 },
};

// LGT8 name: lgt8_020w5
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 1.000, 1.000, 0.200, 1.000, 1.000
static const tran_high_t lgt8_020w5[8][8] = {
  { 11585, 11585, 11585, 11585, 11585, 11585, 11585, 11585 },
  { 12155, 11234, 9464, 6977, 3961, -12615, -14975, -16201 },
  { 18328, 10041, -2786, -14353, -19431, -893, 3218, 5875 },
  { 5071, -495, -5518, -4484, 1471, 23175, 2079, -21299 },
  { 15759, -7215, -19670, -3450, 17800, -5699, -2090, 4566 },
  { 11891, -19595, 802, 19075, -13159, -115, 2798, -1698 },
  { 1008, -2057, 1135, 876, -2047, 14466, -26228, 12848 },
  { 6277, -16492, 20565, -16977, 7065, -869, 697, -265 },
};

// LGT8 name: lgt8_020w4
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 1.000, 0.200, 1.000, 1.000, 1.000
static const tran_high_t lgt8_020w4[8][8] = {
  { 11585, 11585, 11585, 11585, 11585, 11585, 11585, 11585 },
  { 13752, 12765, 10861, 8177, -8177, -10861, -12765, -13752 },
  { 15137, 6270, -6270, -15137, -15137, -6270, 6270, 15137 },
  { 13868, 3281, -9811, -15412, 15412, 9811, -3281, -13868 },
  { 11585, -11585, -11585, 11585, 11585, -11585, -11585, 11585 },
  { 10943, -12210, -9529, 13313, -13313, 9529, 12210, -10943 },
  { 6270, -15137, 15137, -6270, -6270, 15137, -15137, 6270 },
  { 5975, -14632, 15227, -7431, 7431, -15227, 14632, -5975 },
};

// LGT8 name: lgt8_020w3
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 0.200, 1.000, 1.000, 1.000, 1.000
static const tran_high_t lgt8_020w3[8][8] = {
  { 11585, 11585, 11585, 11585, 11585, 11585, 11585, 11585 },
  { 16201, 14975, 12615, -3961, -6977, -9464, -11234, -12155 },
  { 5875, 3218, -893, -19431, -14353, -2786, 10041, 18328 },
  { 21299, -2079, -23175, -1471, 4484, 5518, 495, -5071 },
  { 4566, -2090, -5699, 17800, -3450, -19670, -7215, 15759 },
  { 1698, -2798, 115, 13159, -19075, -802, 19595, -11891 },
  { 12848, -26228, 14466, -2047, 876, 1135, -2057, 1008 },
  { 265, -697, 869, -7065, 16977, -20565, 16492, -6277 },
};

// LGT8 name: lgt8_020w1
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 0.200, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000
static const tran_high_t lgt8_020w1[8][8] = {
  { 11585, 11585, 11585, 11585, 11585, 11585, 11585, 11585 },
  { 23696, 9014, 4960, 292, -4412, -8570, -11665, -13315 },
  { 18526, -11258, -13595, -11561, -5809, 1810, 8847, 13040 },
  { 5363, -16606, -7395, 7875, 16693, 11835, -2719, -15046 },
  { 2135, -14935, 5528, 17153, 1354, -16609, -8019, 13392 },
  { 1057, -12003, 15052, 4903, -17365, 3287, 15815, -10746 },
  { 548, -8376, 17141, -13216, -494, 13839, -16937, 7496 },
  { 239, -4300, 11156, -15838, 17436, -15638, 10794, -3848 },
};

// LGT8 name: lgt8_010w7
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 0.100
static const tran_high_t lgt8_010w7[8][8] = {
  { 11585, 11585, 11585, 11585, 11585, 11585, 11585, 11585 },
  { 9592, 8749, 7137, 4897, 2227, -639, -3449, -28514 },
  { 15284, 11562, 5023, -2739, -9834, -14534, -15694, 10932 },
  { 15502, 3400, -11356, -17247, -9674, 5452, 16321, -2398 },
  { 13564, -7792, -16880, 609, 17139, 6685, -14294, 969 },
  { 10842, -15799, -3620, 17454, -4360, -15461, 11428, -485 },
  { 7552, -17013, 13762, -228, -13477, 17111, -7960, 252 },
  { 3875, -10862, 15715, -17479, 15808, -11030, 4084, -110 },
};

// LGT8 name: lgt8_010w6
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 1.000, 1.000, 1.000, 0.100, 1.000
static const tran_high_t lgt8_010w6[8][8] = {
  { 11585, 11585, 11585, 11585, 11585, 11585, 11585, 11585 },
  { 9320, 8806, 7808, 6379, 4599, 2566, -19181, -20299 },
  { 17426, 12126, 3139, -6803, -14676, -18086, 2821, 4054 },
  { 16155, -417, -16562, -15717, 1252, 16936, 44, -1690 },
  { 11585, -11585, -11585, 11585, 11585, -11585, -11585, 11585 },
  { 6489, -6950, -5995, 7376, 5470, -7765, 20710, -19335 },
  { 9383, -18854, 9647, 9116, -18849, 9909, -702, 349 },
  { 4862, -13295, 18199, -18270, 13491, -5129, 226, -83 },
};

// LGT8 name: lgt8_010w5
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 1.000, 1.000, 0.100, 1.000, 1.000
static const tran_high_t lgt8_010w5[8][8] = {
  { 11585, 11585, 11585, 11585, 11585, 11585, 11585, 11585 },
  { 10744, 10263, 9322, 7964, 6250, -13691, -15072, -15779 },
  { 19035, 11075, -1516, -13473, -19796, -248, 1811, 3112 },
  { 2467, -124, -2585, -2330, 372, 23487, 1129, -22416 },
  { 16425, -6792, -20409, -5178, 17372, -2688, -895, 2163 },
  { 12057, -19681, 390, 19435, -12681, -26, 1308, -801 },
  { 475, -958, 501, 448, -957, 13891, -26555, 13156 },
  { 6348, -16647, 20657, -16865, 6702, -390, 315, -120 },
};

// LGT8 name: lgt8_010w3
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 0.100, 1.000, 1.000, 1.000, 1.000
static const tran_high_t lgt8_010w3[8][8] = {
  { 11585, 11585, 11585, 11585, 11585, 11585, 11585, 11585 },
  { 15779, 15072, 13691, -6250, -7964, -9322, -10263, -10744 },
  { 3112, 1811, -248, -19796, -13473, -1516, 11075, 19035 },
  { 22416, -1129, -23487, -372, 2330, 2585, 124, -2467 },
  { 2163, -895, -2688, 17372, -5178, -20409, -6792, 16425 },
  { 801, -1308, 26, 12681, -19435, -390, 19681, -12057 },
  { 13156, -26555, 13891, -957, 448, 501, -958, 475 },
  { 120, -315, 390, -6702, 16865, -20657, 16647, -6348 },
};

// LGT8 name: lgt8_010w1
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 0.100, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000
static const tran_high_t lgt8_010w1[8][8] = {
  { 11585, 11585, 11585, 11585, 11585, 11585, 11585, 11585 },
  { 28514, 3449, 639, -2227, -4897, -7137, -8749, -9592 },
  { 10932, -15694, -14534, -9834, -2739, 5023, 11562, 15284 },
  { 2398, -16321, -5452, 9674, 17247, 11356, -3400, -15502 },
  { 969, -14294, 6685, 17139, 609, -16880, -7792, 13564 },
  { 485, -11428, 15461, 4360, -17454, 3620, 15799, -10842 },
  { 252, -7960, 17111, -13477, -228, 13762, -17013, 7552 },
  { 110, -4084, 11030, -15808, 17479, -15715, 10862, -3875 },
};

// LGT8 name: lgt8_010w4
// Self loops: 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 1.000, 0.100, 1.000, 1.000, 1.000
static const tran_high_t lgt8_010w4[8][8] = {
  { 11585, 11585, 11585, 11585, 11585, 11585, 11585, 11585 },
  { 12842, 12301, 11242, 9709, -9709, -11242, -12301, -12842 },
  { 15137, 6270, -6270, -15137, -15137, -6270, 6270, 15137 },
  { 14392, 4693, -8168, -15525, 15525, 8168, -4693, -14392 },
  { 11585, -11585, -11585, 11585, 11585, -11585, -11585, 11585 },
  { 11278, -11886, -10638, 12459, -12459, 10638, 11886, -11278 },
  { 6270, -15137, 15137, -6270, -6270, 15137, -15137, 6270 },
  { 6135, -14908, 15186, -6809, 6809, -15186, 14908, -6135 },
};

// LGT8 name: lgt8_150
// Self loops: 1.500, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
// Edges: 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000
static const tran_high_t lgt8_150[8][8] = {
  { 2075, 5110, 7958, 10511, 12677, 14376, 15544, 16140 },
  { 6114, 13307, 16196, 13845, 7015, -2084, -10509, -15534 },
  { 9816, 16163, 8717, -6168, -15790, -11936, 2104, 14348 },
  { 12928, 12326, -7340, -15653, 242, 15763, 6905, -12632 },
  { 15124, 3038, -16033, 1758, 15507, -6397, -13593, 10463 },
  { 15895, -7947, -7947, 15895, -7947, -7947, 15895, -7947 },
  { 14325, -15057, 9030, 1050, -10659, 15483, -13358, 5236 },
  { 9054, -12580, 14714, -15220, 14043, -11312, 7330, -2537 },
};
#endif  // CONFIG_LGT
#endif  // AOM_DSP_TXFM_COMMON_H_

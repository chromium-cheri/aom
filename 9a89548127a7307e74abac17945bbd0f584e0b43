{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1931dc81_c20bec1d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 25857
      },
      "writtenOn": "2022-01-04T05:58:27Z",
      "side": 1,
      "message": "Hi Wan-Teh, Jingning, Paul\n\nAs per our understanding, the metrics variance and log(1+variance) corresponds to source buffer were getting calculated redundantly at 4x4 sub-block level for each partition in a super block, in log_sub_block_var() and intra_rd_variance_factor() modules. This CL avoids these redundant calculations by introducing an on-the-fly approach, which caches/stores both these metrics for each 4x4 sub-block and reuses the same in across calls of the above-mentioned modules. Out of variance and log(1+variance) metrics, it is observed that the log(1+variance) is not needed in log_sub_block_var(). Hence, log(1+variance) metric is cached/reused only when it is needed to avoid over-head of log() operation.\n\nWe introduced a structure \"Blk4x4VarInfo \u0027\u0027 for better readability, to hold variance and log(1+variance) rather than keeping these as individual variables. The memory for the structure is allocated based on the need to avoid heap memory overheads. And also, at the start of each SB encoding the metrics var and log(1+variance) are initialized to -1 and this value will be used as a flag to decide whether to cache/reuse the values. For AVIF still-image encode, It is verified that the heap memory increase because of this change is negligible (in both ST and MT, maximum increase is seen in speed 6 which is less than 0.3% for multi-thread path).\n\nWe validated the current patch for allintra video and still-image encode. Following are instruction count/encode time reduction results when AVIF encode was tested for a typical image dataset. Bit match is verified for presets 0 to 9.\n\nFor AVIF still-image encode with tune\u003dpsnr,\n      Instruction Count\n       / Encode Time  \nspeed    Reduction(%) \n  0        1.208\n  1        1.693\n  2        1.589\n  3        1.704\n  4        0.068\n  5        0.083\n  6        0.890        \n\nIn the above data, instruction count reduction is quoted for speed \u003c6 and encode-time reduction is quoted for speed\u003d6.\n\nFollowing are the instruction count reduction results when tested libaom allintra frame encoding (50 frames) for a borg setup. Bit match is verified for preset 0 to 9.\n\n       Instruction Count\nspeed    Reduction(%)   \n  1        1.384        \n  3        1.445      \n  6        0.207\n\nFor libaom AV1 video encode, bit-match is verified (w.r.t. parent commit) for \u0027GOOD\u0027, \u0027RT\u0027 and \u0027ALLINTRA\u0027 encoding modes for a few contents with different encoding configurations. It was also verified that the output of AVIF encode is bit-exact w.r.t. parent version for a typical image dataset.\n\nIt is to be noted that, this CL will not give any gains for speed presets \u003e\u003d 7, as the functions where redundant calculations were happening are not called for these presets due to the following conditions.\n1) log_sub_block_var(): For speed \u003e\u003d 7, the sf partition_search_type is set as a VAR_BASED_PARTITION . Hence, this function is not called for speed \u003e\u003d 7.\n2) intra_rd_variance_factor(): The variance calculations present inside this function are not needed for speed presets \u003e\u003d4, due to the threshold (which is dependent on speed presets) based early exit.\n\nPlease review the patch and let us know your opinion on the same.\n\nThanks \u0026 Regards,\nMudassir.\n",
      "revId": "9a89548127a7307e74abac17945bbd0f584e0b43",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c700e9a6_3260c494",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 25857
      },
      "writtenOn": "2022-01-17T05:28:25Z",
      "side": 1,
      "message": "Hi Wan-Teh, Jingning, Paul,\n\nPlease review this patch and let us know you opinion.\n\nRegards,\nMudassir",
      "parentUuid": "1931dc81_c20bec1d",
      "revId": "9a89548127a7307e74abac17945bbd0f584e0b43",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3fd2bc40_d40e5e10",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-01-19T01:30:50Z",
      "side": 1,
      "message": "Hi Mudassir: I only did a quick review. Here are some initial questions and suggestions.",
      "revId": "9a89548127a7307e74abac17945bbd0f584e0b43",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05906d3b_8d6370c1",
        "filename": "av1/encoder/block.h",
        "patchSetId": 2
      },
      "lineNbr": 773,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-01-19T01:30:50Z",
      "side": 1,
      "message": "1. Nit: Blk \u003d\u003e Block\n\n2. Nit/optional: It seems that \"Info\" can be omitted in the struct\u0027s name.",
      "revId": "9a89548127a7307e74abac17945bbd0f584e0b43",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2097358e_56fa8ab5",
        "filename": "av1/encoder/block.h",
        "patchSetId": 2
      },
      "lineNbr": 773,
      "author": {
        "id": 25857
      },
      "writtenOn": "2022-01-19T19:02:44Z",
      "side": 1,
      "message": "\u003e 1. Nit: Blk \u003d\u003e Block\nDone. We have replaced \"Blk\" with \"Block\". We have also made this change in the local variables and function names to be consistent.\n\n\u003e 2. Nit/optional: It seems that \"Info\" can be omitted in the struct\u0027s name.\nAs Block4x4VarInfo structure contains the variance and the log(1+variance) value for each 4x4 sub-block, we have kept the suffix \"Info\". Please let us know your opinion on this.",
      "parentUuid": "05906d3b_8d6370c1",
      "revId": "9a89548127a7307e74abac17945bbd0f584e0b43",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85ef348c_9ba84a69",
        "filename": "av1/encoder/block.h",
        "patchSetId": 2
      },
      "lineNbr": 1209,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-01-19T01:30:50Z",
      "side": 1,
      "message": "Nit: blks \u003d\u003e blocks",
      "range": {
        "startLine": 1209,
        "startChar": 41,
        "endLine": 1209,
        "endChar": 45
      },
      "revId": "9a89548127a7307e74abac17945bbd0f584e0b43",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37ab21ba_5ac44ffe",
        "filename": "av1/encoder/block.h",
        "patchSetId": 2
      },
      "lineNbr": 1209,
      "author": {
        "id": 25857
      },
      "writtenOn": "2022-01-19T19:02:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "85ef348c_9ba84a69",
      "range": {
        "startLine": 1209,
        "startChar": 41,
        "endLine": 1209,
        "endChar": 45
      },
      "revId": "9a89548127a7307e74abac17945bbd0f584e0b43",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5309e320_4fa392da",
        "filename": "av1/encoder/encoder.h",
        "patchSetId": 2
      },
      "lineNbr": 1446,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-01-19T01:30:50Z",
      "side": 1,
      "message": "Nit: modules \u003d\u003e functions\n\nNote: I know your team refers to functions as modules, but it does not seem to be a common practice.",
      "range": {
        "startLine": 1446,
        "startChar": 32,
        "endLine": 1446,
        "endChar": 39
      },
      "revId": "9a89548127a7307e74abac17945bbd0f584e0b43",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e5cbcaf_f5326a0f",
        "filename": "av1/encoder/encoder.h",
        "patchSetId": 2
      },
      "lineNbr": 1446,
      "author": {
        "id": 25857
      },
      "writtenOn": "2022-01-19T19:02:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5309e320_4fa392da",
      "range": {
        "startLine": 1446,
        "startChar": 32,
        "endLine": 1446,
        "endChar": 39
      },
      "revId": "9a89548127a7307e74abac17945bbd0f584e0b43",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c033eb08_b73295d0",
        "filename": "av1/encoder/encoder_alloc.h",
        "patchSetId": 2
      },
      "lineNbr": 338,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-01-19T01:30:50Z",
      "side": 1,
      "message": "Is this necessary? This will allow allocate_src_var_of_4x4_sub_blk_buf() to be called after *source_variance_info has been allocated.",
      "revId": "9a89548127a7307e74abac17945bbd0f584e0b43",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fcbb6f96_460a0726",
        "filename": "av1/encoder/encoder_alloc.h",
        "patchSetId": 2
      },
      "lineNbr": 338,
      "author": {
        "id": 25857
      },
      "writtenOn": "2022-01-19T19:02:44Z",
      "side": 1,
      "message": "Ack. This check ensures that the memory for *source_variance_info will be allocated only if it has not been allocated already.\n\nAlternatively, we can add an early exit at the beginning of this function if *source_variance_info is not NULL. Please let us know if we should do this in a later patch.",
      "parentUuid": "c033eb08_b73295d0",
      "revId": "9a89548127a7307e74abac17945bbd0f584e0b43",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af1bf1f7_f7a36a27",
        "filename": "av1/encoder/encoder_alloc.h",
        "patchSetId": 2
      },
      "lineNbr": 338,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-01-25T03:27:03Z",
      "side": 1,
      "message": "Thanks for the reply. I was not suggesting replacing this if statement with an equivalent early exit. I was wondering if we could call this function only once. If so, then we don\u0027t need to check if *source_variance_info has not been allocated already.",
      "parentUuid": "fcbb6f96_460a0726",
      "revId": "9a89548127a7307e74abac17945bbd0f584e0b43",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "78440259_23ab3ec9",
        "filename": "av1/encoder/encoder_alloc.h",
        "patchSetId": 2
      },
      "lineNbr": 338,
      "author": {
        "id": 25857
      },
      "writtenOn": "2022-01-25T17:42:48Z",
      "side": 1,
      "message": "Since allocate_src_var_of_4x4_sub_block_buf() is getting called from encode_with_recode_loop() and encode_without_recode(), which happens at frame level, the allocation function will get called multiple times during allintra video encode. The free for the same happens at dealloc_compressor_data(). Hence this check is necessary to avoid re-allocating the memory across different frames.\n\nThe allocation is done at frame level so that the speed features used in is_src_var_for_4x4_sub_blocks_caching_enabled() will be set appropriately and based on that information we can avoid the memory allocation for cases where this memory is not required.",
      "parentUuid": "af1bf1f7_f7a36a27",
      "revId": "9a89548127a7307e74abac17945bbd0f584e0b43",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31df31dd_d937d17a",
        "filename": "av1/encoder/encoder_alloc.h",
        "patchSetId": 2
      },
      "lineNbr": 342,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-01-19T01:30:50Z",
      "side": 1,
      "message": "Should we copy the equivalent of line 328 to this function?",
      "revId": "9a89548127a7307e74abac17945bbd0f584e0b43",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "79fa9b7b_3abf5e13",
        "filename": "av1/encoder/encoder_alloc.h",
        "patchSetId": 2
      },
      "lineNbr": 342,
      "author": {
        "id": 25857
      },
      "writtenOn": "2022-01-19T19:02:44Z",
      "side": 1,
      "message": "Done. We have also done the required code changes to make the allocation / deallocation of src_var_info_of_4x4_sub_blks similar to that of  pixel_gradient_info.",
      "parentUuid": "31df31dd_d937d17a",
      "revId": "9a89548127a7307e74abac17945bbd0f584e0b43",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
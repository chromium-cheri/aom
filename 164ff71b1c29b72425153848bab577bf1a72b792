{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bb1c3478_c152eab0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9101
      },
      "writtenOn": "2021-08-12T15:56:16Z",
      "side": 1,
      "message": "Hi Yunqing,\nIn this CL, we have optimized heap memory usage of CoeffBufferPool, tran_low_t data structures based on the SB size chosen. As encoder chooses 64x64 SB size for frame size min(width, height) \u003c\u003d 480 memory saving is applicable to those resolutions (for speed \u003e 0).\nThis CL is verified to be bit-exact with no impact on encode-time.\n\nMemory is measured using the command\nvalgrind --tool\u003dmassif ./aomenc ...\n\nPlease check the memory reduction results for this patch.\nFor RT preset, cpu \u003d 5\n                        Memory Reduction(%)\n                        Single      Multi\nResolution    Tile      thread      thread\n640x360       2x1        9.32        8.37 (2 threads)\n832x480       2x1       11.90       10.97 (2 threads)\n1280x720      2x2        0.00        0.00 (4 threads)\n1920x1080     4x2        0.00        0.00 (8 threads)\n\nFor Good preset, cpu \u003d 4\n                        Memory Reduction(%)\n                        Single      Multi\nResolution    Tile      thread      thread\n640x360       2x1       4.11        3.95 (2 threads)\n832x480       2x1       4.91        4.67 (2 threads)\n1280x720      2x2       0.00        0.00 (4 threads)\n1920x1080     4x2       0.00        0.00 (8 threads)\n\nThe memory savings are similar for other speed levels as well (for both RT and Good preset).\n\nPlease review.\nThank you.",
      "revId": "164ff71b1c29b72425153848bab577bf1a72b792",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
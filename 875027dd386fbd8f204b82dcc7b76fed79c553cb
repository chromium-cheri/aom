{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1fa374b0_c4a8c503",
        "filename": "av1/encoder/pass2_strategy.c",
        "patchSetId": 2
      },
      "lineNbr": 3705,
      "author": {
        "id": 5250
      },
      "writtenOn": "2022-04-20T23:03:55Z",
      "side": 1,
      "message": "The av1_first_pass() is where we compute first pass stats.\nThe first pass stats are stored at cpi-\u003eppi-\u003etwopass.firstpass_info\n\nAt this point, firstpass_info should be ready.\nYou can write a for loop to get all the first pass stats like\n\nfor(int i \u003d 0; i \u003c firstpass_info-\u003estats_count; i++) {\n  // print the content of stats_buf[i]\n}\nexit(0);\n\nBtw, we can check whether stats_count match the --limit\u003d### we set in the command line.\n\n\n[optional hack]\nSince every field is double, we can convert the stats pointer into a double pointer and print them out.\n\ndouble* ptr \u003d (double*)stats_ptr;\nint size \u003d sizeof(FIRSTPASS_STATS) / sizeof(double);\nfor(int i \u003d 0; i \u003c size; ++i) {\n  printf(\"%f \", ptr[i]);\n}\n\nThis will be easier to read them back as well.",
      "range": {
        "startLine": 3693,
        "startChar": 1,
        "endLine": 3705,
        "endChar": 50
      },
      "revId": "875027dd386fbd8f204b82dcc7b76fed79c553cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b07957d5_4fdaf6f0",
        "filename": "av1/encoder/pass2_strategy.c",
        "patchSetId": 2
      },
      "lineNbr": 3705,
      "author": {
        "id": 5960
      },
      "writtenOn": "2022-04-21T00:20:34Z",
      "side": 1,
      "message": "is_flash is int64_t\n\nframe and count should be an integer by definition, I don\u0027t know the reason why they\u0027re double in this structure...",
      "parentUuid": "1fa374b0_c4a8c503",
      "range": {
        "startLine": 3693,
        "startChar": 1,
        "endLine": 3705,
        "endChar": 50
      },
      "revId": "875027dd386fbd8f204b82dcc7b76fed79c553cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dea3c040_76a3857e",
        "filename": "av1/encoder/pass2_strategy.c",
        "patchSetId": 2
      },
      "lineNbr": 3705,
      "author": {
        "id": 5250
      },
      "writtenOn": "2022-04-21T18:01:59Z",
      "side": 1,
      "message": "I think they use double so that they don\u0027t have to iterate through each naming.\nIf everything is double, you can just assume first pass stats is a double array and dump everything out.\n(But it\u0027s up to you to decide which way is better.)",
      "parentUuid": "b07957d5_4fdaf6f0",
      "range": {
        "startLine": 3693,
        "startChar": 1,
        "endLine": 3705,
        "endChar": 50
      },
      "revId": "875027dd386fbd8f204b82dcc7b76fed79c553cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f25e59b4_a96b45e8",
        "filename": "av1/encoder/pass2_strategy.c",
        "patchSetId": 2
      },
      "lineNbr": 3804,
      "author": {
        "id": 5250
      },
      "writtenOn": "2022-04-20T23:40:41Z",
      "side": 1,
      "message": "You might want to compared your function partition_gop_intervals() against the output of the original function here calculate_gf_length().\n\nIn this function, the gop intervals are stored in p_rc-\u003egf_intervals[]\nThe gop count is stored in rc-\u003eintervals_till_gf_calculate_due\n\nFor some reason, this function will be called multiple times and doesn\u0027t know the next key frame location. (They simply pass in MAX_NUM_GF_INTERVALS)\n\nWe can just dump the output of the first call of this function.\n\nNote that, the sum of all gop intervals should be equal to 150 assuming \"--limit\u003d150\".",
      "range": {
        "startLine": 3804,
        "startChar": 8,
        "endLine": 3804,
        "endChar": 71
      },
      "revId": "875027dd386fbd8f204b82dcc7b76fed79c553cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1da8ac96_779d75d5",
        "filename": "av1/encoder/pass2_strategy.c",
        "patchSetId": 2
      },
      "lineNbr": 3804,
      "author": {
        "id": 5960
      },
      "writtenOn": "2022-04-21T00:20:34Z",
      "side": 1,
      "message": "The output of this function is p_rc-\u003egf_intervals right? which is printed out on line 3852? Will that be the same as the output of the first call of this function here?",
      "parentUuid": "f25e59b4_a96b45e8",
      "range": {
        "startLine": 3804,
        "startChar": 8,
        "endLine": 3804,
        "endChar": 71
      },
      "revId": "875027dd386fbd8f204b82dcc7b76fed79c553cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b00fc7aa_bd0463b1",
        "filename": "av1/encoder/pass2_strategy.c",
        "patchSetId": 2
      },
      "lineNbr": 3804,
      "author": {
        "id": 5250
      },
      "writtenOn": "2022-04-21T18:01:59Z",
      "side": 1,
      "message": "Yep, they will be different.\nIn fact, there are several places that we add extra logics to change the gop size.\nSome of the logics can not be replicate by hardware.\nSince you function is a rewrite of this function, we should focus on whether your function and this function has the same output.\nI did some test and found out that the first call of this function will go though all the first pass stats out partition the chunk into several gop intervals.\nThis should be sufficient for our test.",
      "parentUuid": "1da8ac96_779d75d5",
      "range": {
        "startLine": 3804,
        "startChar": 8,
        "endLine": 3804,
        "endChar": 71
      },
      "revId": "875027dd386fbd8f204b82dcc7b76fed79c553cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb31e53f_5216d917",
        "filename": "av1/encoder/pass2_strategy.c",
        "patchSetId": 2
      },
      "lineNbr": 3804,
      "author": {
        "id": 5960
      },
      "writtenOn": "2022-04-21T19:21:22Z",
      "side": 1,
      "message": "Thank you for explaining! That\u0027s helpful to get correct data for the test.",
      "parentUuid": "b00fc7aa_bd0463b1",
      "range": {
        "startLine": 3804,
        "startChar": 8,
        "endLine": 3804,
        "endChar": 71
      },
      "revId": "875027dd386fbd8f204b82dcc7b76fed79c553cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f83bfe79_f6d73dbf",
        "filename": "av1/encoder/pass2_strategy.c",
        "patchSetId": 2
      },
      "lineNbr": 3836,
      "author": {
        "id": 5250
      },
      "writtenOn": "2022-04-21T18:01:59Z",
      "side": 1,
      "message": "This is the one place where we add extra logics to change the gop size.\nIf you read through this function, you will se we use an extra TPL stats computation to adjust the gop size.\nI don\u0027t think this is feasible for HW.",
      "range": {
        "startLine": 3836,
        "startChar": 10,
        "endLine": 3836,
        "endChar": 63
      },
      "revId": "875027dd386fbd8f204b82dcc7b76fed79c553cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ea16bed_2c671a1e",
        "filename": "av1/encoder/pass2_strategy.c",
        "patchSetId": 2
      },
      "lineNbr": 3836,
      "author": {
        "id": 5960
      },
      "writtenOn": "2022-04-21T19:21:22Z",
      "side": 1,
      "message": "I see. Thanks! That\u0027s very helpful!!",
      "parentUuid": "f83bfe79_f6d73dbf",
      "range": {
        "startLine": 3836,
        "startChar": 10,
        "endLine": 3836,
        "endChar": 63
      },
      "revId": "875027dd386fbd8f204b82dcc7b76fed79c553cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4c3ba843_e7c90eb3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-17T18:51:35Z",
      "side": 1,
      "message": "We should rewrite a new commit message because the current change is very different from \"Add explicit condition check to guard av1_ml_prune_4_partition()\".",
      "revId": "bc2ae0072bb27ae9313e2979ed3dfb7d5a3df86c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73f29905_2339df27",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-18T01:47:19Z",
      "side": 1,
      "message": "Add `Bug: aomedia:3499` to the commit message.",
      "parentUuid": "4c3ba843_e7c90eb3",
      "revId": "bc2ae0072bb27ae9313e2979ed3dfb7d5a3df86c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8990b2da_1a566aad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 33477
      },
      "writtenOn": "2023-12-03T03:49:52Z",
      "side": 1,
      "message": "Comment removed by: James Zern; Reason: spam",
      "revId": "bc2ae0072bb27ae9313e2979ed3dfb7d5a3df86c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e4d358a_26befa7f",
        "filename": "av1/encoder/partition_strategy.c",
        "patchSetId": 2
      },
      "lineNbr": 1377,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-17T18:51:35Z",
      "side": 1,
      "message": "This is a copy of the code below. We should make the same change here.",
      "revId": "bc2ae0072bb27ae9313e2979ed3dfb7d5a3df86c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06dcb4a7_f054570d",
        "filename": "av1/encoder/partition_strategy.c",
        "patchSetId": 2
      },
      "lineNbr": 1377,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-20T18:50:58Z",
      "side": 1,
      "message": "Done in https://aomedia-review.googlesource.com/c/aom/+/182841.",
      "parentUuid": "5e4d358a_26befa7f",
      "revId": "bc2ae0072bb27ae9313e2979ed3dfb7d5a3df86c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f034b55_5020da5c",
        "filename": "av1/encoder/partition_strategy.c",
        "patchSetId": 2
      },
      "lineNbr": 1969,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-17T23:34:20Z",
      "side": 1,
      "message": "I have an alternative suggestion.\n\nBy analyzing `get_partition_subsize(bsize, PARTITION_HORZ_4)`, I found that it returns a valid `BLOCK_SIZE` if and only if `bsize` is equal to `BLOCK_16X16`, `BLOCK_32X32`, or `BLOCK_64X64`. So I think it is better to assert that condition before we call `get_partition_subsize()`, rather than assert their return values are not `BLOCK_INVALID`:\n\n```\n    assert(bsize \u003d\u003d BLOCK_16X16 || bsize \u003d\u003d BLOCK_32X32 || bsize \u003d\u003d BLOCK_64X64);\n```",
      "revId": "bc2ae0072bb27ae9313e2979ed3dfb7d5a3df86c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54665d4e_1ab47a10",
        "filename": "av1/encoder/partition_strategy.c",
        "patchSetId": 2
      },
      "lineNbr": 1969,
      "author": {
        "id": 5022
      },
      "writtenOn": "2023-10-17T23:49:14Z",
      "side": 1,
      "message": "Yes, that\u0027s a good idea.",
      "parentUuid": "6f034b55_5020da5c",
      "revId": "bc2ae0072bb27ae9313e2979ed3dfb7d5a3df86c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a29039f_062273f4",
        "filename": "av1/encoder/partition_strategy.c",
        "patchSetId": 2
      },
      "lineNbr": 1969,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-20T18:50:58Z",
      "side": 1,
      "message": "It turns out that the assertion I suggested did not fix the Coverity defect, but your assertions did.\n\nI added them all in https://aomedia-review.googlesource.com/c/aom/+/182841.",
      "parentUuid": "54665d4e_1ab47a10",
      "revId": "bc2ae0072bb27ae9313e2979ed3dfb7d5a3df86c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "bc2ae0072bb27ae9313e2979ed3dfb7d5a3df86c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "bc2ae0072bb27ae9313e2979ed3dfb7d5a3df86c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "bc2ae0072bb27ae9313e2979ed3dfb7d5a3df86c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6cb1e0ac_24f573ce",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-12-14T20:15:46Z",
      "side": 1,
      "message": "please use the output from `git log --oneline -1 HEAD^` to describe the commit. The parent may change when this is submitted.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 20
      },
      "revId": "3864eb29e4003c8748c54f9563e243713efa170c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce9faf5b_508f6a86",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-14T22:36:19Z",
      "side": 1,
      "message": "\"The parent commit\" is used to refer to the current code, before this change. I suggest omitting \"In the parent commit\".",
      "parentUuid": "6cb1e0ac_24f573ce",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 20
      },
      "revId": "3864eb29e4003c8748c54f9563e243713efa170c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed358311_60b23f2a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 25857
      },
      "writtenOn": "2023-12-14T17:11:54Z",
      "side": 1,
      "message": "In the parent commit, workers are created (`winterface-\u003ereset(worker)`) in `av1_create_workers()` in the descending order, and terminated (`winterface()-\u003eend(worker)`) in `av1_terminate_workers()` in the ascending order. \n\nBecause of this inconsistency, if creation of a worker (other than first and last worker) fails, it will cause a SEGV error while terminating workers who were not created (`p_mt_info-\u003eworkers` is allocated using `aom_malloc()`). The SEGV error can be avoided if `p_mt_info-\u003eworkers` is allocated using `aom_calloc()`, but the successfully created workers will not be terminated and show up as leaks, as the worker termination for loop is based on `p_mt_info-\u003enum_workers` which is populated based on the number of successful worker creations. This CL fixes these issues by creating the workers in the same order as it will be freed.\n\nThis change is bit-exact and has been verified using bitstream-match tests for a combination of various configuration values for --threads, --tile-rows, --tile-columns, --cpu-used, --end-usage, --row-mt, --fp-mt, etc. Validated all unit-tests with sanitizers (address and thread) and valgrind.",
      "revId": "3864eb29e4003c8748c54f9563e243713efa170c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "035ba12b_c760be71",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-14T21:23:31Z",
      "side": 1,
      "message": "Mudassir: Thank you very much for the bug fix.\n\nThis bug was introduced in https://aomedia-review.googlesource.com/c/aom/+/184761 at my suggestion. So it\u0027s my fault. In case there is some subtle reason for the original order, I suggest we change `av1_terminate_workers()` back to the original order.\n\nIn the interest of time, I will write a CL to do that, with due credit to your CL.",
      "revId": "3864eb29e4003c8748c54f9563e243713efa170c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d1ad5ad3_31c7dd7d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-14T21:34:16Z",
      "side": 1,
      "message": "Mudassir: It seems that only your fix will work. Let me study this bug carefully.",
      "revId": "3864eb29e4003c8748c54f9563e243713efa170c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5ac4b576_aa81ec50",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-14T22:42:57Z",
      "side": 1,
      "message": "Note that this bug is not caused by the different orders in which workers are created and terminated. The bug is caused by creating the workers in the descending order. As long as the workers are created in that order, we are affected by this bug whether we terminate the workers in the ascending order or descending order.\n\nThe reason is that `av1_terminate_workers()` doesn\u0027t know the allocation size of the `p_mt_info-\u003eworkers` array, so it has to assume the workers are on the left end of the array. Whether it goes through the leftmost array elements in the ascending or descending order, it will access uninitialized array elements if `av1_create_workers` failed to create all the workers.",
      "parentUuid": "ed358311_60b23f2a",
      "revId": "3864eb29e4003c8748c54f9563e243713efa170c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2380b1ab_de2dd194",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 1
      },
      "lineNbr": 1088,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-14T22:36:19Z",
      "side": 1,
      "message": "I studied the code and tested it in ASan. I understand this bug now. Unless we also store `num_workers` in the `p_mt_info` struct, e.g., as a new `p_mt_info-\u003eworkers_alloc_size` field, we will need to create the workers in ascending order.\n\nI don\u0027t know why the original code creates the workers in descending order.",
      "revId": "3864eb29e4003c8748c54f9563e243713efa170c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
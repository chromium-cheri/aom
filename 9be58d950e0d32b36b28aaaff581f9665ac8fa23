{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d928f205_9ba53180",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 25857
      },
      "writtenOn": "2021-11-30T10:55:53Z",
      "side": 1,
      "message": "Hi Chi Yo, Yunqing, \n\nThe function intra_rd_variance_factor() is used to calculate a multiplication factor to be applied on the RD value to improve perceived sharpness. This module calculates the sum of log(1+var4x4/16) across all 4x4 blocks. This CL uses logarithm product rule to reduce the log() computations in this module. \n\nWe validated this patch for allintra video and still-image encode. Following are instruction count/encode time reduction results when AVIF encode was tested for a typical image dataset.\n\nFor AVIF still-image encode with tune\u003dpsnr,\n\n            Instruction Count\n              / Encode Time      BD-Rate Loss(%)      \n       speed    Reduction(%)     psnr      ssim    \n         0         2.076        -0.2833   -0.3711\n         1         2.481        -0.1683   -0.2831\n         2         2.329        -0.0881   -0.2117\n         3         2.372        -0.0839   -0.2781\n         4         2.310         0.0000    0.0000\n         5         2.732         0.0000    0.0000\n         6         2.586         0.0000    0.0000\n         7         3.178         0.0000    0.0000\n         8         1.240         0.0000    0.0000\n         9         0.000         0.0000    0.0000\n\nFor AVIF still-image encode with tune\u003dssim,       \n              Instruction Count\n                / Encode Time    BD-Rate Loss(%)      \n       speed    Reduction(%)     psnr      ssim  \n         0         2.271        -0.3666   -0.4165\n         1         2.621        -0.2236   -0.3091\n         2         2.462        -0.0965   -0.2214\n         3         2.547        -0.0892   -0.2821\n         4         2.410         0.0000    0.0000\n         5         2.824         0.0000    0.0000\n         6         2.614         0.0000    0.0000\n         7         3.095         0.0000    0.0000\n         8         1.283         0.0000    0.0000\n         9         0.000         0.0000    0.0000\n\nIn the above data, instruction count reduction is quoted for speed \u003c6 and encode-time reduction is quoted for speed \u003e\u003d6. This change is bit-exact for speed\u003e\u003d4, as the condition to calculate the variance_rd_factor evaluates to false because of non-positive threshold values.\n\nFollowing are the instruction count reduction results when tested libaom allintra frame encoding (50 frames) for a borg setup. \n\n              Instruction Count      BD-Rate Loss(%)      \n       speed    Reduction(%)     avg.psnr  ovr.psnr   ssim       \n         1         1.758        -0.0865\t  -0.0859    -0.0815\n         3         1.751        -0.0215   -0.0220    -0.0420\n         4         1.968         0.0000    0.0000     0.0000\n         6         1.557         0.0000\t   0.0000     0.0000\n\nFor high bit-depth encoding, (--bit-depth\u003d10)\n              Instruction Count      BD-Rate Loss(%)      \n       speed    Reduction(%)     avg.psnr  ovr.psnr   ssim       \n         3         1.350         0.0029    0.0030     0.0132\n      \t\t\nIn the above results, BD rate impact column:\n[+] sign is for BD-Rate drop\n[-] sign is for BD-Rate improvement\nThe instruction count reduction specified has been measured using the command:\n$ perf stat -e instructions:u ./avifenc …\n\nWe also compared a few images visually w.r.t. parent version at cq_levels 18, 33 and observed no/negligible perceptual quality difference with this change.\n\nPlease review the patch.\n\nThanks \u0026 Regards,\nMudassir.\n",
      "revId": "9be58d950e0d32b36b28aaaff581f9665ac8fa23",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f274695_59786157",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5022
      },
      "writtenOn": "2021-11-30T17:32:33Z",
      "side": 1,
      "message": "This function was added for visual quality purposes. It will make the psnr and ssim metric worse for better visual quality. By weakening its effect, one would see improved psnr and ssim results, but potentially worse visual quality.\n\nI suggest to ask Paul have a look at this change too.",
      "revId": "9be58d950e0d32b36b28aaaff581f9665ac8fa23",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "748cb0c8_3a3426dd",
        "filename": "av1/encoder/intra_mode_search.c",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 5022
      },
      "writtenOn": "2021-11-30T17:32:33Z",
      "side": 1,
      "message": "wouldn\u0027t this cause overflow if one scales the block size (bs)?",
      "range": {
        "startLine": 114,
        "startChar": 23,
        "endLine": 114,
        "endChar": 25
      },
      "revId": "9be58d950e0d32b36b28aaaff581f9665ac8fa23",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1360123_7b8f448d",
        "filename": "av1/encoder/intra_mode_search.c",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 9823
      },
      "writtenOn": "2021-12-01T17:17:57Z",
      "side": 1,
      "message": "I don\u0027t think this would cause an overflow as everything is done in double.\nHowever, we do get some loss in precision, which is probably what led to the STATS_CHANGED.",
      "parentUuid": "748cb0c8_3a3426dd",
      "range": {
        "startLine": 114,
        "startChar": 23,
        "endLine": 114,
        "endChar": 25
      },
      "revId": "9be58d950e0d32b36b28aaaff581f9665ac8fa23",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97f040d3_9516a203",
        "filename": "av1/encoder/intra_mode_search.c",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 25857
      },
      "writtenOn": "2021-12-02T17:10:32Z",
      "side": 1,
      "message": "Hi Jingning, Chi-Yo\n\nDuring our analysis, we missed checking the overflow possibility assuming that dynamic precision of double variables would avoid the overflow (at the loss of precision). However we realized that double variables can overflow (inf) and thanks for pointing out the same. The overflow (src_var/rec_var becoming inf) was observed in the current CL when tested for 1080p content. Hence we shall abandon the current patch.\n\nHowever, it is possible to optimize the module through either of the following approaches:\n1. Pull out the calculation of src_var/mapped_src_var present inside the intra_rd_variance_factor() out of mode loop search as it is common across all modes. This should be a bit-exact change.\n2. Calculate the product of (1+var4x4/16) for all blocks in a row and accumulate log() of this product across rows. This change can give better speed-up, but may not be bit-exact. Hence this can cause slight differences in visual quality.\n3. Combination of (1) and (2)\n\nPlease suggest the preferred approach out of the above for optimization. However we shall rebase the dependent patch (https://aomedia-review.googlesource.com/c/aom/+/149542) as it can be pursued independent of the current patch and submit the same for review after testing.",
      "parentUuid": "f1360123_7b8f448d",
      "range": {
        "startLine": 114,
        "startChar": 23,
        "endLine": 114,
        "endChar": 25
      },
      "revId": "9be58d950e0d32b36b28aaaff581f9665ac8fa23",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31a0f6cd_e795e853",
        "filename": "av1/encoder/intra_mode_search.c",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 5022
      },
      "writtenOn": "2021-12-03T17:40:49Z",
      "side": 1,
      "message": "Thanks you both for the clarifications.\n\nPaul, could you please take a look at this too? Thanks!",
      "parentUuid": "97f040d3_9516a203",
      "range": {
        "startLine": 114,
        "startChar": 23,
        "endLine": 114,
        "endChar": 25
      },
      "revId": "9be58d950e0d32b36b28aaaff581f9665ac8fa23",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c20df91_708a3b77",
        "filename": "av1/encoder/intra_mode_search.c",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 25857
      },
      "writtenOn": "2021-12-27T10:59:40Z",
      "side": 1,
      "message": "Hi Jingning, Chi-Yo, Paul,\n\nWhile working on approach(1), we realized that the source variance calculations are happening redundantly in function log_sub_block_var() for each partition in a superblock. As both ‘log_sub_block_var()\u0027 and \u0027intra_rd_variance_factor()\u0027 use source variance information, we thought of calculating src var on the fly and store/retrieve accordingly. For implementing the same to reduce redundant calculations effectively, the following information needs to be cached.\n\n-\u003e In ‘log_sub_block_var()\u0027, only source variance is calculated for each 4x4 sub-block, hence caching the same should be sufficient.\n-\u003e In \u0027intra_rd_variance_factor()\u0027, for each 4x4 sub-block log(1+var) is calculated, hence caching the same might save the log and variance operations which need to be calculated for each mode.\n\nEven though this approach needs to maintain/store both var and log(1+var) for each 4x4 sub-block, we feel it is an effective method to reduce most of the redundant calculations. However this approach needs a significant amount of code changes. The relevant logic will not be localized to above modules and logic needs to be handled in different stages of encoder  (due to allocations, initializations etc). This approach also requires 16KB additional memory (\u003c0.2% increase in heap memory, in multi-thread mode with 4 threads) to store var and log(1+var) for each 4x4 sub-block in a superblock.\n\nPlease let us know your thoughts on pursuing the above approach.",
      "parentUuid": "31a0f6cd_e795e853",
      "range": {
        "startLine": 114,
        "startChar": 23,
        "endLine": 114,
        "endChar": 25
      },
      "revId": "9be58d950e0d32b36b28aaaff581f9665ac8fa23",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d2a5d4f_2b983e51",
        "filename": "av1/encoder/intra_mode_search.c",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 5022
      },
      "writtenOn": "2021-12-29T21:16:31Z",
      "side": 1,
      "message": "It sounds reasonable to have the variance terms pre-calculated at superblock level. The storage cost is ok. Not sure why it requires significant amount of code change on my first read, maybe I missed something(?)",
      "parentUuid": "2c20df91_708a3b77",
      "range": {
        "startLine": 114,
        "startChar": 23,
        "endLine": 114,
        "endChar": 25
      },
      "revId": "9be58d950e0d32b36b28aaaff581f9665ac8fa23",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39a38bc3_faad9b46",
        "filename": "av1/encoder/intra_mode_search.c",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 25857
      },
      "writtenOn": "2021-12-30T10:02:01Z",
      "side": 1,
      "message": "Hi Jingning,\n\nWe are planning to avoid redundant calculation of variance by populating the same on-the-fly (i.e. at block level rather than at SB level). If the calculations are done once at SB level, the data may not be consumed at times Eg : For speed \u003e\u003d 8, log_sub_blk_var() and intra_rd_variance_factor() may not be called depending on the partition search and intra rd path it chooses respectively. Hence the calculations at SB level may lead to increase in encode time. To keep the code independent of the above, we preferred an on-the-fly approach.\n\nAlong with variance, we also plan to calculate log(1+variance) on-the-fly. Hence the code changes would be scattered across log_sub_blk_var(), intra_rd_variance_factor() modules and beyond. Hope this clarifies.\n\nThanks \u0026 Regards,\nMudassir",
      "parentUuid": "0d2a5d4f_2b983e51",
      "range": {
        "startLine": 114,
        "startChar": 23,
        "endLine": 114,
        "endChar": 25
      },
      "revId": "9be58d950e0d32b36b28aaaff581f9665ac8fa23",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fc102d58_cc9281a0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 26549
      },
      "writtenOn": "2023-03-05T07:46:32Z",
      "side": 1,
      "message": "The heap overflow is caused by inconsistent superblock size between 64x64 (when reading `svc.number_spatial_layers`) and 128x128 (when reading `ppi-\u003enumber_spatial_layers`). When `av1_init_tile_thread_data()` is called the blocksize is 64x64 so related buffers are allocated as so, but then the blocksize is changed to 128x128, so the allocated buffer is insufficient and overflowed.",
      "revId": "abc144b23f008e06d32c326deceb175c0fcdd25e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44b56984_fc1bfe25",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-03-08T00:51:36Z",
      "side": 1,
      "message": "LGTM.\n\nMarco, could you also take a look? Thanks.\n\nIt is tempting to modify AOME_SET_NUMBER_SPATIAL_LAYERS to also set svc.number_spatial_layers. I tried it, and apparently it created inconsistency with related fields. I could not make it work.\n\nMy only concern is that if someone adds a new set_sb_size() call, the wrong number_spatial_layers may be used. Hopefully it is unlikely that a new set_sb_size() call will be added. We can also think about how to add tests to defend against this.",
      "revId": "abc144b23f008e06d32c326deceb175c0fcdd25e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a2c6701_eb961d93",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 26549
      },
      "writtenOn": "2023-03-08T08:40:12Z",
      "side": 1,
      "message": "I just found that while `update_extra_cfg()` calls `set_sb_size()`, `ctrl_set_scale_mode()` and `ctrl_set_number_spatial_layers()` does not call `update_extra_cfg()` despite `set_sb_size()` depends on the value they set. If I changes the order of `ctrl*`s there would be errors again.",
      "revId": "abc144b23f008e06d32c326deceb175c0fcdd25e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9e72cea_adb67f9f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-03-08T20:08:14Z",
      "side": 1,
      "message": "Yuan: I suggest some changes to comments and commit message (or bug report). We should still submit this CL even though it is possible to evade your fix.",
      "revId": "abc144b23f008e06d32c326deceb175c0fcdd25e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "78a7375a_aa8f1344",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-03-08T20:08:14Z",
      "side": 1,
      "message": "This comment contains useful information about the bug. Could you add this comment to either the bug report or the commit message so it\u0027s easier to find? Thanks.\n\nI added printf statements to print the arguments passed to the `av1_select_sb_size()` and `set_sb_size()` calls, and the value of `seq_params-\u003esb_size` when `av1_setup_shared_coeff_buffer()` is called. Here are the tracing outputs.\n\nBefore your fix:\n\n```\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d1)\nset_sb_size(BLOCK_128X128)\nav1_setup_shared_coeff_buffer(): seq_params-\u003esb_size\u003dBLOCK_128X128\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d1)\nset_sb_size(BLOCK_128X128)\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d1)\nset_sb_size(BLOCK_128X128)\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d1)\nset_sb_size(BLOCK_128X128)\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d2)\nset_sb_size(BLOCK_128X128)\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d1)\nset_sb_size(BLOCK_64X64)\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d2)\nset_sb_size(BLOCK_128X128)\nav1_setup_shared_coeff_buffer(): seq_params-\u003esb_size\u003dBLOCK_128X128\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d1)\nset_sb_size(BLOCK_64X64)\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d2)\nset_sb_size(BLOCK_128X128)\nav1_setup_shared_coeff_buffer(): seq_params-\u003esb_size\u003dBLOCK_128X128\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d1)\nset_sb_size(BLOCK_64X64)\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d2)\nset_sb_size(BLOCK_128X128)\nav1_setup_shared_coeff_buffer(): seq_params-\u003esb_size\u003dBLOCK_128X128\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d1)\nset_sb_size(BLOCK_64X64)\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d1)\nav1_setup_shared_coeff_buffer(): seq_params-\u003esb_size\u003dBLOCK_64X64\nav1_select_sb_size(width\u003d960, height\u003d540, number_spatial_layers\u003d1)\nset_sb_size(BLOCK_128X128)\nav1_select_sb_size(width\u003d960, height\u003d540, number_spatial_layers\u003d1)\nset_sb_size(BLOCK_128X128)\n```\n\nAfter your fix:\n\n```\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d1)\nset_sb_size(BLOCK_128X128)\nav1_setup_shared_coeff_buffer(): seq_params-\u003esb_size\u003dBLOCK_128X128\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d1)\nset_sb_size(BLOCK_128X128)\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d1)\nset_sb_size(BLOCK_128X128)\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d1)\nset_sb_size(BLOCK_128X128)\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d2)\nset_sb_size(BLOCK_128X128)\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d2)\nset_sb_size(BLOCK_128X128)\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d2)\nset_sb_size(BLOCK_128X128)\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d2)\nset_sb_size(BLOCK_128X128)\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d2)\nset_sb_size(BLOCK_128X128)\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d2)\nset_sb_size(BLOCK_128X128)\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d2)\nset_sb_size(BLOCK_128X128)\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d2)\nset_sb_size(BLOCK_128X128)\nav1_select_sb_size(width\u003d1920, height\u003d1080, number_spatial_layers\u003d2)\nav1_setup_shared_coeff_buffer(): seq_params-\u003esb_size\u003dBLOCK_128X128\nav1_select_sb_size(width\u003d960, height\u003d540, number_spatial_layers\u003d2)\nset_sb_size(BLOCK_128X128)\nav1_select_sb_size(width\u003d960, height\u003d540, number_spatial_layers\u003d2)\nset_sb_size(BLOCK_128X128)\n```\n\nYou can see that before your fix, when things go wrong (near the end of the output), we consistently pass `number_spatial_layers\u003d1` to `av1_select_sb_size()`, but the `width` and `height` are changing. This is why I said the problem is deeper than passing inconsistent/incorrect `number_spatial_layers` values to `av1_select_sb_size()`. To demonstrate this, I came up with a way to evade your fix and cause the same heap-buffer-overflow error.",
      "parentUuid": "fc102d58_cc9281a0",
      "revId": "abc144b23f008e06d32c326deceb175c0fcdd25e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48baa2b7_7b1700f3",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 3
      },
      "lineNbr": 719,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-03-08T03:27:26Z",
      "side": 1,
      "message": "Yuan: I think there is a deeper problem.\n\nAs an alternative fix, we should be able to change this `ppi-\u003enumber_spatial_layers` to `ppi-\u003ecpi-\u003esvc.number_spatial_layers`. We need to handle the `ppi-\u003ecpi \u003d\u003d NULL` case.\n\n```\ndiff --git a/av1/encoder/encoder.c b/av1/encoder/encoder.c\nindex de07728ea..845133221 100644\n--- a/av1/encoder/encoder.c\n+++ b/av1/encoder/encoder.c\n@@ -714,9 +714,11 @@ void av1_change_config_seq(struct AV1_PRIMARY *ppi,\n   int sb_size \u003d seq_params-\u003esb_size;\n   // Superblock size should not be updated after the first key frame.\n   if (!ppi-\u003eseq_params_locked) {\n+    int number_spatial_layers \u003d ppi-\u003ecpi ?\n+        ppi-\u003ecpi-\u003esvc.number_spatial_layers : ppi-\u003enumber_spatial_layers;\n     set_sb_size(seq_params, av1_select_sb_size(oxcf, frm_dim_cfg-\u003ewidth,\n                                                frm_dim_cfg-\u003eheight,\n-                                               ppi-\u003enumber_spatial_layers));\n+                                               number_spatial_layers));\n     for (int i \u003d 0; i \u003c MAX_NUM_OPERATING_POINTS; ++i)\n       seq_params-\u003etier[i] \u003d (oxcf-\u003etier_mask \u003e\u003e i) \u0026 1;\n   }\n```\n\nWith this change, I verified that we always pass `number_spatial_layers\u003d1` to `av1_select_sb_size()`.\n\nBut this doesn\u0027t fix the memory errors.\n\nThe reason seems to be that, when we call `av1_setup_shared_coeff_buffer()`, the `seq_params_locked` is still false, so `seq_params-\u003esb_size` can still change.",
      "revId": "abc144b23f008e06d32c326deceb175c0fcdd25e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c66701b_c6565768",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 3
      },
      "lineNbr": 719,
      "author": {
        "id": 26549
      },
      "writtenOn": "2023-03-08T08:40:12Z",
      "side": 1,
      "message": "Sorry I don\u0027t understand why is there a problem.\n\nFrom what I understand, dealing `number_spatial_layers` \u003e 1 does not necessarily need to know about the detail of SVC, so is the `ppi-\u003enumber_spatial_layers` field, and reading it should be enough.\n\nWhen `av1_setup_shared_coeff_buffer()` is called, user is calling `aom_codec_encode()`, so `seq_params-\u003esb_size` should not change again (or we are doing init in wrong order).\nAfter first `aom_codec_encode()` call, sequence header is emitted and `seq_params_locked ` will be true (am I right here?), so further settings change made by user won\u0027t change `sb_size` again.",
      "parentUuid": "48baa2b7_7b1700f3",
      "revId": "abc144b23f008e06d32c326deceb175c0fcdd25e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "549c86ca_bdb7fc07",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 3
      },
      "lineNbr": 719,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-03-08T20:08:14Z",
      "side": 1,
      "message": "I found that `seq_params_locked` is not set to 1 early enough. So `set_sb_size()` is still called after `av1_setup_shared_coeff_buffer()` is called.\n\nI tweaked your unit test to demonstrate the deeper problem that I mentioned:\nhttps://aomedia-review.googlesource.com/c/aom/+/171961/1..2",
      "parentUuid": "3c66701b_c6565768",
      "revId": "abc144b23f008e06d32c326deceb175c0fcdd25e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e878cdd7_c2675330",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 3
      },
      "lineNbr": 719,
      "author": {
        "id": 26549
      },
      "writtenOn": "2023-03-15T12:21:58Z",
      "side": 1,
      "message": "I see the problem, and with https://aomedia-review.googlesource.com/c/aom/+/171941 there\u0027s no longer asan error. Is it correct that `seq_params_locked` should be true after encoding the first frame?",
      "parentUuid": "549c86ca_bdb7fc07",
      "revId": "abc144b23f008e06d32c326deceb175c0fcdd25e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5b4aafc_e1e22761",
        "filename": "test/avif_progressive_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 192,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-03-08T03:27:26Z",
      "side": 1,
      "message": "Yuan: Could you document the aspects of this test that are important to reproduce the bug?\n\nI think the following are important:\n1. The width and height. The smaller of width and height must be \u003e 720 and \u003c\u003d 1080.\n2. cfg.g_threads \u003e 1\n3. Row MT is enabled.",
      "revId": "abc144b23f008e06d32c326deceb175c0fcdd25e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5d66021_a580b2be",
        "filename": "test/avif_progressive_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 192,
      "author": {
        "id": 26549
      },
      "writtenOn": "2023-03-08T08:40:12Z",
      "side": 1,
      "message": "The exact condition is complicated due to the complicated logic of `av1_select_sb_size`.\n\n1 and 2 are right. For 3, Tile MT can also triggers this if tile count \u003e 1. Row MT is just what libavif does.\n\nAnd AOM_USAGE_GOOD_QUALITY is also important. AOM_USAGE_REALTIME has different `av1_select_sb_size` logic that usually does not cause inconsistency.",
      "parentUuid": "a5b4aafc_e1e22761",
      "revId": "abc144b23f008e06d32c326deceb175c0fcdd25e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aba870d0_7936099b",
        "filename": "test/avif_progressive_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 192,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-03-08T20:08:14Z",
      "side": 1,
      "message": "If it\u0027s complicated, we can at least add a comment to say this test reproduces bug aomedia:3382. You can mention that certain parameters such as width, height, g_threads, etc. were carefully based on the complicated logic of `av1_select_sb_size`.",
      "parentUuid": "b5d66021_a580b2be",
      "revId": "abc144b23f008e06d32c326deceb175c0fcdd25e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60a92e22_907e03c6",
        "filename": "test/avif_progressive_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 192,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-03-13T18:19:13Z",
      "side": 1,
      "message": "Done in https://aomedia-review.googlesource.com/c/aom/+/172061.",
      "parentUuid": "aba870d0_7936099b",
      "revId": "abc144b23f008e06d32c326deceb175c0fcdd25e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "abc144b23f008e06d32c326deceb175c0fcdd25e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "abc144b23f008e06d32c326deceb175c0fcdd25e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "abc144b23f008e06d32c326deceb175c0fcdd25e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
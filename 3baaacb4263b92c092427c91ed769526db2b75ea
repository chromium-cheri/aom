{
  "comments": [
    {
      "key": {
        "uuid": "7fd38fb8_a22c3a90",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 7525
      },
      "writtenOn": "2020-08-06T16:40:16Z",
      "side": 1,
      "message": "Thanks for implementing this API! It looks well-designed, and will be quite helpful for future researches. Just a few comments on the details. ",
      "revId": "3baaacb4263b92c092427c91ed769526db2b75ea",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21047f2c_2afb0630",
        "filename": "av1/encoder/optical_flow.c",
        "patchSetId": 6
      },
      "lineNbr": 56,
      "author": {
        "id": 7525
      },
      "writtenOn": "2020-08-06T16:40:16Z",
      "side": 1,
      "message": "We could add an assertion here (or an if check) to make sure the two frames are of the same dimensions. You can also add a TODO here for checking and dealing with situations when the frames are of different dimensions.",
      "range": {
        "startLine": 55,
        "startChar": 2,
        "endLine": 56,
        "endChar": 51
      },
      "revId": "3baaacb4263b92c092427c91ed769526db2b75ea",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "387bc817_1db725fd",
        "filename": "av1/encoder/optical_flow.c",
        "patchSetId": 6
      },
      "lineNbr": 57,
      "author": {
        "id": 7525
      },
      "writtenOn": "2020-08-06T16:40:16Z",
      "side": 1,
      "message": "This line should be after the following if. Otherwise when they are the same frame localmvs is never freed.",
      "range": {
        "startLine": 57,
        "startChar": 2,
        "endLine": 57,
        "endChar": 75
      },
      "revId": "3baaacb4263b92c092427c91ed769526db2b75ea",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a849e02e_9743b5ce",
        "filename": "av1/encoder/optical_flow.c",
        "patchSetId": 6
      },
      "lineNbr": 63,
      "author": {
        "id": 7525
      },
      "writtenOn": "2020-08-06T16:40:16Z",
      "side": 1,
      "message": "This (and also line 70 and 79) assumes that the mvs array has a stride the same as frame width. It may be worthwhile to state that in the function comments, or add a parameter to specify that. Also (maybe) need to specify in the comments what is assumed if the two frames are of different dimensions (for example, the mvs are associated with from_frame and should have same dimension as from_frame).",
      "range": {
        "startLine": 63,
        "startChar": 8,
        "endLine": 63,
        "endChar": 40
      },
      "revId": "3baaacb4263b92c092427c91ed769526db2b75ea",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ef83764_2ad72759",
        "filename": "av1/encoder/optical_flow.c",
        "patchSetId": 6
      },
      "lineNbr": 71,
      "author": {
        "id": 7525
      },
      "writtenOn": "2020-08-06T16:40:16Z",
      "side": 1,
      "message": "Better to use explicit conversion here with \"(double)\".",
      "range": {
        "startLine": 71,
        "startChar": 24,
        "endLine": 71,
        "endChar": 64
      },
      "revId": "3baaacb4263b92c092427c91ed769526db2b75ea",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff88b753_4e278627",
        "filename": "av1/encoder/optical_flow.c",
        "patchSetId": 6
      },
      "lineNbr": 86,
      "author": {
        "id": 7525
      },
      "writtenOn": "2020-08-06T16:40:16Z",
      "side": 1,
      "message": "An alternative to this part is to clip the MVs to make sure the resulting pixel stays in range. In this way it is equivalent to what we do with block-based mvs, when they point out of frame, just copy the frame boundary pixels.",
      "range": {
        "startLine": 85,
        "startChar": 12,
        "endLine": 86,
        "endChar": 25
      },
      "revId": "3baaacb4263b92c092427c91ed769526db2b75ea",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0a83d0f_1954f879",
        "filename": "av1/encoder/optical_flow.c",
        "patchSetId": 6
      },
      "lineNbr": 88,
      "author": {
        "id": 7525
      },
      "writtenOn": "2020-08-06T16:40:16Z",
      "side": 1,
      "message": "This also needs explicit conversion since round returns a double.",
      "range": {
        "startLine": 87,
        "startChar": 10,
        "endLine": 88,
        "endChar": 58
      },
      "revId": "3baaacb4263b92c092427c91ed769526db2b75ea",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a75ff905_6b8b1943",
        "filename": "av1/encoder/optical_flow.h",
        "patchSetId": 6
      },
      "lineNbr": 23,
      "author": {
        "id": 7525
      },
      "writtenOn": "2020-08-06T16:40:16Z",
      "side": 1,
      "message": "Use all capital letters so it is more consistent with the style in the codec. You can check enums.h for examples.",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 23,
        "endChar": 65
      },
      "revId": "3baaacb4263b92c092427c91ed769526db2b75ea",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4772cf02_264d9f84",
        "filename": "av1/encoder/optical_flow.h",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 7525
      },
      "writtenOn": "2020-08-06T16:40:16Z",
      "side": 1,
      "message": "Would it be better to change this to a pointer? It feels more efficient and also may be more convenient since we can just set it to NULL if LK is not used as the optical flow method. If you are going with pointers, may be worthwhile to provide an initialization function to set everything to NULL and defaults.",
      "range": {
        "startLine": 37,
        "startChar": 2,
        "endLine": 37,
        "endChar": 22
      },
      "revId": "3baaacb4263b92c092427c91ed769526db2b75ea",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31829482_4cf33f57",
        "filename": "av1/encoder/optical_flow.h",
        "patchSetId": 6
      },
      "lineNbr": 43,
      "author": {
        "id": 7525
      },
      "writtenOn": "2020-08-06T16:40:16Z",
      "side": 1,
      "message": "Also pointer? Maybe can also be a const.",
      "range": {
        "startLine": 43,
        "startChar": 18,
        "endLine": 43,
        "endChar": 41
      },
      "revId": "3baaacb4263b92c092427c91ed769526db2b75ea",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "dbcf3bdd_4cfab645",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9611
      },
      "writtenOn": "2023-05-22T08:34:47Z",
      "side": 1,
      "message": "Currently in libaom, the number of frames considered for arf frame filtering are limited or adjusted based on  q index, arf-boost and a speed feature \u0027num_frames_used_in_tf’. In this CL, we have introduced a speed feature \u0027adjust_num_frames_for_arf_filtering\u0027 to adjust the frame count based on the noise level of the current frame. The adjustment is done such that a low-noise frame considers more frames to provide a filtered frame which can be used for better prediction and vice versa for high-noise frames.  Currently, the sf is enabled only for speed 6.\n\nThe following experiments were done to limit/adjust the number of frames considered for temporal filtering of an ARF frame.\n\n- Experiment 1: Number of frames is adjusted based on the noise level of the current frame as mentioned above.\n```\n                    Instruction Count        BD-Rate Loss(%)       \ncpu   Resolution      Reduction(%)    avg.psnr   ovr.psnr    ssim\n 6      LOWRES2         0.929        -0.1159    -0.0290     -0.1116\n 6      MIDRES2         2.712        -0.1585    -0.0486     -0.1077\n 6      HDRES2          2.613        -0.0819    -0.0050     -0.0460\n 6      Average         2.085        -0.1188    -0.0275     -0.0884\n```\n\n- Experiment 2: Currently, in libaom the speed feature \u0027num_frames_used_in_tf\u0027 is used to limit the number of frames for filtering based on quantization value and noise_level. The logic here suggests to lessen the number of frames for all noise levels when the quantization value is higher. The following is the result when disabled the sf ‘num_frames_used_in_tf\u0027\n```\n                    Instruction Count        BD-Rate Loss(%)       \ncpu   Resolution      Reduction(%)    avg.psnr   ovr.psnr    ssim\n 6     LOWRES2         -1.893        -0.1626    -0.2849     -0.2324\n 6     MIDRES2         -0.068        -0.0152    -0.0157     -0.0186\n 6     HDRES2           0.000         0.0000     0.0000      0.0000\n 6     Average         -0.654        -0.0593    -0.1002     -0.0837\n```\n- Experiment 3: ( Experiment 1 + Experiment 2)\nFrom experiment 2, it is seen that the speed feature \u0027num_frames_used_in_tf\u0027 is providing the results which are within the acceptable trade-off limits. However, the logic used in Exp2 seems to be conflicting with Exp1.\n\n The newly added sf \u0027adjust_num_frames_for_arf_filtering\u0027 logic helps in terms of both speed and quality. Whereas, the existing sf \u0027num_frames_used_in_tf\u0027 helps only LOWRES2 speed. Thus, we propose Exp1 + Exp2 i.e. enabling the new sf while disabling the existing logic.\n```\n                   Instruction Count        BD-Rate Loss(%)       \ncpu   Resolution     Reduction(%)    avg.psnr   ovr.psnr    ssim\n 6     LOWRES2         0.092        -0.3476    -0.3376     -0.4707\n 6     MIDRES2         2.681        -0.1642    -0.0546     -0.1130\n 6     HDRES2          2.613        -0.0819    -0.0050     -0.0460\n 6     Average         1.795        -0.1979    -0.1324     -0.2099\n```\n\nThe instruction count reduction specified has been measured using command:\n$ perf stat -e instructions:u ./aomenc …\n\nWe verified that the CL is bit-exact for speed \u003c\u003d 5.",
      "revId": "fc774d951fc34322249e3c1925e964475ce9dc6d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a958c28_ffaccd50",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5185
      },
      "writtenOn": "2023-05-23T16:56:07Z",
      "side": 1,
      "message": "Nice speed improvement with BDrate gains! Thanks. Would be good to have this for lower speeds. Did you try to make the decision also based on qp? We already have a qp decided for arf at this point, right? Also, does this same logic apply to key frame temporal filtering?",
      "parentUuid": "dbcf3bdd_4cfab645",
      "revId": "fc774d951fc34322249e3c1925e964475ce9dc6d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
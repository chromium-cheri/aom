{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d84f7c7c_c7442d61",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-03-07T18:51:04Z",
      "side": 1,
      "message": "Please review the new patchset. Thanks!",
      "revId": "c3d2dbc68fffe36ee74712150fa24e5cd7f5463d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef875a91_c61c3428",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 4
      },
      "lineNbr": 3087,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-03-07T20:40:35Z",
      "side": 1,
      "message": "If you had a long running encode (like a security camera) I\u0027d expect a rollover eventually, but that situation might not be common.",
      "revId": "c3d2dbc68fffe36ee74712150fa24e5cd7f5463d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "91c44186_eb18d191",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 4
      },
      "lineNbr": 3087,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-03-07T22:04:53Z",
      "side": 1,
      "message": "Cheng and I discussed whether the encode `pts` parameter should be monotonically increasing. After seeing your comment, I looked into it. I found that this requirement is documented. It comes from libvpx:\n\n```\n/*!\\brief Encode a frame\n *\n * Encodes a video frame at the given \"presentation time.\" The presentation\n * time stamp (PTS) \\ref MUST be strictly increasing.\n *\n...\n * \\param[in]    pts       Presentation time stamp, in timebase units.\n...\n */\nvpx_codec_err_t vpx_codec_encode(vpx_codec_ctx_t *ctx, const vpx_image_t *img,\n                                 vpx_codec_pts_t pts, unsigned long duration,\n                                 vpx_enc_frame_flags_t flags,\n                                 vpx_enc_deadline_t deadline);\n```\n\nHowever, this requirement doesn\u0027t seem to be enforced by libaom.",
      "parentUuid": "ef875a91_c61c3428",
      "revId": "c3d2dbc68fffe36ee74712150fa24e5cd7f5463d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4af0292a_3cae4198",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 4
      },
      "lineNbr": 3096,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-03-07T18:51:04Z",
      "side": 1,
      "message": "Cheng: In patchset 4 I improved the error messages as follows.\n\n1. I refer to the pts value, after subtracting the initial pts from it, as \"relative pts\".\n\n2. Instead of using the variable names `src_time_stamp` and `src_time_stamp`, I said \"conversion of xxx to ticks would overflow\".",
      "revId": "c3d2dbc68fffe36ee74712150fa24e5cd7f5463d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "c3d2dbc68fffe36ee74712150fa24e5cd7f5463d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforcement-satisfied_gerrit"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c3d2dbc68fffe36ee74712150fa24e5cd7f5463d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "c3d2dbc68fffe36ee74712150fa24e5cd7f5463d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
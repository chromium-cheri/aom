{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "92547801_51232f61",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 14993
      },
      "writtenOn": "2022-03-31T08:35:07Z",
      "side": 1,
      "message": "Hi Wan-Teh, Frank,\n\nThe MB_MODE_INFO_EXT_FRAME buffer is used to store the mode information during the encode stage. This information is consumed later during the bitstream preparation stage. This buffer is allocated during the init stage by assuming a minimum partition size of BLOCK_4X4 for GOOD, ALLINTRA usages and BLOCK_8X8 for REALTIME usage. This CL moves the allocation of this buffer to the encode stage so that the allocation can be done on the basis of the sf default_min_partition_size.\n\nThe encode time reduction is seen as the size multiplier (number of MIs in the frame) is reduced for the aom_calloc() call for mbmi_ext_info-\u003eframe_base.\nhttps://aomedia.googlesource.com/aom/+/a68079299d655eb98cbc624c0e3059e1a0609a39/av1/encoder/encoder_alloc.h#49\n\nWe have also cleaned up the function interfaces to the function pointer *set_mb_mi(). The ‘usage’ parameter is removed as the min_parition_size is passed based on the sf default_min_partition_size in calls to enc_set_mb_mi(). We have also updated the file av1/ratectrl_rtc.cc in order to take care of this prototype change. Since the unit-test RcInterfaceTest passes BLOCK_8X8 as the min_partition_size (assuming REALTIME usage), the change is already taken care with regard to this.\n\nFor libaom AV1 video encode, bit-match is verified (w.r.t. parent commit) for \u0027GOOD\u0027, \u0027RT\u0027 and \u0027ALLINTRA\u0027 encoding modes for a few contents with different encoding configurations. It was also verified that the output of AVIF encode is bit-exact w.r.t. parent version for a typical image dataset.\n\nHEAP memory reduction was measured using the command below. \n$valgrind --tool\u003dmassif ./aomenc …\n\nPlease review.\n\nRegards,\nJayasanker.",
      "revId": "e1aec59f7e41aeded91f74b569d98e5d1bafc85d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58afe5f3_e1fd0779",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 7060
      },
      "writtenOn": "2022-03-31T17:39:43Z",
      "side": 1,
      "message": "Overall this looks good. Just need to answer the ABI question.",
      "revId": "e1aec59f7e41aeded91f74b569d98e5d1bafc85d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf6e3d8a_1869de25",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-03-31T20:47:47Z",
      "side": 1,
      "message": "LGTM. Good memory reduction and speedup! Thank you.",
      "revId": "e1aec59f7e41aeded91f74b569d98e5d1bafc85d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9ff23b0_3e71157d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-03-31T20:52:28Z",
      "side": 1,
      "message": "\u003e We have also cleaned up the function interfaces to the function pointer *set_mb_mi(). The ‘usage’ parameter is removed as the min_parition_size is passed based on the sf default_min_partition_size in calls to enc_set_mb_mi().\n\nI assume you meant the \u0027mode\u0027 parameter is removed, not the \u0027usage\u0027 parameter.",
      "parentUuid": "92547801_51232f61",
      "revId": "e1aec59f7e41aeded91f74b569d98e5d1bafc85d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55c89e05_4daa79df",
        "filename": "av1/common/av1_common_int.h",
        "patchSetId": 4
      },
      "lineNbr": 601,
      "author": {
        "id": 7060
      },
      "writtenOn": "2022-03-31T17:39:43Z",
      "side": 1,
      "message": "Will this cause an issue with the ABI?",
      "range": {
        "startLine": 601,
        "startChar": 20,
        "endLine": 601,
        "endChar": 61
      },
      "revId": "e1aec59f7e41aeded91f74b569d98e5d1bafc85d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a06d0dca_0399e029",
        "filename": "av1/common/av1_common_int.h",
        "patchSetId": 4
      },
      "lineNbr": 601,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-03-31T20:47:47Z",
      "side": 1,
      "message": "No. This header is an internal header.",
      "parentUuid": "55c89e05_4daa79df",
      "range": {
        "startLine": 601,
        "startChar": 20,
        "endLine": 601,
        "endChar": 61
      },
      "revId": "e1aec59f7e41aeded91f74b569d98e5d1bafc85d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "e1aec59f7e41aeded91f74b569d98e5d1bafc85d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "e1aec59f7e41aeded91f74b569d98e5d1bafc85d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "e1aec59f7e41aeded91f74b569d98e5d1bafc85d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "473163ef_796b5667",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-05-05T20:15:44Z",
      "side": 1,
      "message": "The .h isn\u0027t updated in this change.",
      "range": {
        "startLine": 11,
        "startChar": 32,
        "endLine": 13,
        "endChar": 32
      },
      "revId": "c5f5c3aa7977ed92e84cd04c51150b3d604edee3",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c21f4e75_0962758b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 31042
      },
      "writtenOn": "2023-05-05T20:50:08Z",
      "side": 1,
      "message": "Correct. I\u0027ve copied the convolution kernels across and renamed them. My intention is to go through convolve_neon.c and do a similar refactoring (mostly cosmetic) pass to what we\u0027ve just done in jnt_convolve_neon.c. After that I\u0027ll pull out common kernels and functionality into the header (which currently contains quite a few duplicate and redundant functions.) I didn\u0027t want to rename functions in the header right now as it would mean mangling code in convolve_neon.c before we do the rest of the refactoring.",
      "parentUuid": "473163ef_796b5667",
      "range": {
        "startLine": 11,
        "startChar": 32,
        "endLine": 13,
        "endChar": 32
      },
      "revId": "c5f5c3aa7977ed92e84cd04c51150b3d604edee3",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9db91b32_d18cb3e7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-05-05T22:19:32Z",
      "side": 1,
      "message": "\u003e Correct. I\u0027ve copied the convolution kernels across and renamed them. My intention is to go through convolve_neon.c and do a similar refactoring (mostly cosmetic) pass to what we\u0027ve just done in jnt_convolve_neon.c. After that I\u0027ll pull out common kernels and functionality into the header (which currently contains quite a few duplicate and redundant functions.) I didn\u0027t want to rename functions in the header right now as it would mean mangling code in convolve_neon.c before we do the rest of the refactoring.\n\nSounds good. Thanks for the detail.",
      "parentUuid": "c21f4e75_0962758b",
      "range": {
        "startLine": 11,
        "startChar": 32,
        "endLine": 13,
        "endChar": 32
      },
      "revId": "c5f5c3aa7977ed92e84cd04c51150b3d604edee3",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "c5f5c3aa7977ed92e84cd04c51150b3d604edee3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "c5f5c3aa7977ed92e84cd04c51150b3d604edee3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "c5f5c3aa7977ed92e84cd04c51150b3d604edee3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
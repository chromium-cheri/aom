{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "44addf76_a0b85752",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 25857
      },
      "writtenOn": "2023-07-24T08:25:14Z",
      "side": 1,
      "message": "In this CL, a `longjmp` target has been introduced in `tf_worker_hook()` to facilitate the error propagation in case of temporal filter multithreading. \n\nA flag `tf_mt_exit` is introduced in the structure `AV1TemporalFilterSync` which will be set to 1 in case a main/worker thread encounters an error. The other workers will terminate their jobs appropriately by checking the status of this flag. Added `tf_dealloc_data()` calls inside `aom_codec_destroy()` to de-allocate the temporal filter buffers in case of an error during temporal filtering. \n\nThis change is bit-exact and has been verified using bitstream-match tests for a combination of various configuration values for --threads, --tile-rows, --tile-columns, --cpu-used, --end-usage, --row-mt, --fp-mt, etc. Validated all unit-tests with sanitizers (address and thread) and valgrind.\n\nThis CL also adds a comment in `enc_row_mt_worker_hook()` as per the suggestion in [CL](https://aomedia-review.googlesource.com/c/aom/+/177341).",
      "revId": "0a2a7c712fb774b13a7bcd6ac1dbe5976ae11049",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f983872a_2262cb8d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-07-24T20:29:32Z",
      "side": 1,
      "message": "I\u0027ll let Yunqing have a look.",
      "revId": "0a2a7c712fb774b13a7bcd6ac1dbe5976ae11049",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dffc0975_62dd7253",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5185
      },
      "writtenOn": "2023-07-25T00:46:04Z",
      "side": 1,
      "message": "Not sure about the part to call tf_dealloc_data(). Please see my questions below. Otherwise, this looks good. Thanks.",
      "parentUuid": "44addf76_a0b85752",
      "revId": "0a2a7c712fb774b13a7bcd6ac1dbe5976ae11049",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6571d1e2_27fa5e94",
        "filename": "av1/encoder/encoder_alloc.h",
        "patchSetId": 3
      },
      "lineNbr": 262,
      "author": {
        "id": 5185
      },
      "writtenOn": "2023-07-25T00:46:04Z",
      "side": 1,
      "message": "Could you state why we need this here, in which situation? Able to use the existing deallocation call after enc sync?",
      "range": {
        "startLine": 262,
        "startChar": 2,
        "endLine": 262,
        "endChar": 17
      },
      "revId": "0a2a7c712fb774b13a7bcd6ac1dbe5976ae11049",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04d45780_41d3c71e",
        "filename": "av1/encoder/encoder_alloc.h",
        "patchSetId": 3
      },
      "lineNbr": 262,
      "author": {
        "id": 25857
      },
      "writtenOn": "2023-07-25T11:46:14Z",
      "side": 1,
      "message": "This call ensures that the buffers allocated by `tf_alloc_and_reset_data()` in `av1_temporal_filter()` for single-threaded (ST) encode are freed in case an error is encountered during temporal filtering (due to early termination `tf_dealloc_data()` in `av1_temporal_filter()` would not be invoked).\n\nIn case of successful ST encode, `tf_dealloc_data()` would be called twice (in `av1_temporal_filter()` and `dealloc_compressor_data()`). As the buffers are set to NULL after free in `tf_dealloc_data()`, there shouldn\u0027t be any issues due to double free.",
      "parentUuid": "6571d1e2_27fa5e94",
      "range": {
        "startLine": 262,
        "startChar": 2,
        "endLine": 262,
        "endChar": 17
      },
      "revId": "0a2a7c712fb774b13a7bcd6ac1dbe5976ae11049",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "025415dc_29e0ba4e",
        "filename": "av1/encoder/encoder_alloc.h",
        "patchSetId": 3
      },
      "lineNbr": 262,
      "author": {
        "id": 5185
      },
      "writtenOn": "2023-07-25T17:51:54Z",
      "side": 1,
      "message": "I see how this is handled. Sounds like a good approach. Thanks.",
      "parentUuid": "04d45780_41d3c71e",
      "range": {
        "startLine": 262,
        "startChar": 2,
        "endLine": 262,
        "endChar": 17
      },
      "revId": "0a2a7c712fb774b13a7bcd6ac1dbe5976ae11049",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccc78be4_fff3c391",
        "filename": "av1/encoder/encoder_alloc.h",
        "patchSetId": 3
      },
      "lineNbr": 446,
      "author": {
        "id": 5185
      },
      "writtenOn": "2023-07-25T00:46:04Z",
      "side": 1,
      "message": "Same here. Could you explain?",
      "range": {
        "startLine": 446,
        "startChar": 6,
        "endLine": 446,
        "endChar": 21
      },
      "revId": "0a2a7c712fb774b13a7bcd6ac1dbe5976ae11049",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5e45e6e_4690ab12",
        "filename": "av1/encoder/encoder_alloc.h",
        "patchSetId": 3
      },
      "lineNbr": 446,
      "author": {
        "id": 25857
      },
      "writtenOn": "2023-07-25T11:46:14Z",
      "side": 1,
      "message": "This call ensures that the buffers allocated by `tf_alloc_and_reset_data()` in `prepare_tf_workers()` for MT encode are freed in case an error is encountered during temporal filtering (due to early termination `tf_dealloc_thread_data()` in `av1_tf_do_filtering_mt()` would not be invoked).\n\nIn case of successful MT encode, `tf_dealloc_data()` would be called twice (after `sync_enc_workers()` and `free_thread_data()`).",
      "parentUuid": "ccc78be4_fff3c391",
      "range": {
        "startLine": 446,
        "startChar": 6,
        "endLine": 446,
        "endChar": 21
      },
      "revId": "0a2a7c712fb774b13a7bcd6ac1dbe5976ae11049",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "78302f8c_5dc1e029",
        "filename": "av1/encoder/encoder_alloc.h",
        "patchSetId": 3
      },
      "lineNbr": 446,
      "author": {
        "id": 5185
      },
      "writtenOn": "2023-07-25T17:51:54Z",
      "side": 1,
      "message": "Yes, looks like this is needed.",
      "parentUuid": "e5e45e6e_4690ab12",
      "range": {
        "startLine": 446,
        "startChar": 6,
        "endLine": 446,
        "endChar": 21
      },
      "revId": "0a2a7c712fb774b13a7bcd6ac1dbe5976ae11049",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
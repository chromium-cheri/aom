{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "06b68178_af22a014",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9611
      },
      "writtenOn": "2022-03-18T15:33:02Z",
      "side": 1,
      "message": "Hi Yunqing,\n\nWe noticed that cdef_find_dir() has only sse4.1 intrinsic optimization. This CL introduces AVX2 intrinsic optimization. The function is designed to compute CDEF direction for two 8x8 together to achieve better performance. In this patch we have also added relevant unit-test changes for the same.\n\nPlease check the encoder speed up results measured using timer and instruction count based as below. Please note timer based results are based on a limited set of test contents and instruction count is measured using Borg test.\n\nBased on Timer:\n       Encode Time\ncpu    Reduction(%)\n 7       0.250\n 8       0.278\n 9       0.210\n10       0.278\n\nBased on Instruction Count:\n     Instruction Count\ncpu    Reduction(%)\n 7       0.346\n 8       0.437\n 9       0.430\n10       0.477\n\nIn the commit/review message:\n[-] sign indicates encode time/instruction count increase\n[+] sign indicates encode time/instruction count reduction\nThe instruction count reduction specified has been measured using command:\n$ perf stat -e instructions:u ./aomenc\n\nThe speed gains for other presets are negligible. Bit match is verified for few streams of decoder, for \u0027GOOD\u0027 and \u0027RT\u0027 encoding modes. Please note that the changes corresponding to NEON will be taken care of in a separate patch in future.\n\nPlease review the patch.\n\nThanks \u0026 Regards,\nVenkata\n",
      "revId": "a3eaaa3500116217b36ec8a70027ca4dc3e28a65",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4665e66a_75b0183e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5185
      },
      "writtenOn": "2022-03-18T16:13:03Z",
      "side": 1,
      "message": "Thanks for adding the SIMD code. Your plan sounds good to me.",
      "parentUuid": "06b68178_af22a014",
      "revId": "a3eaaa3500116217b36ec8a70027ca4dc3e28a65",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03cbeb47_d13508a8",
        "filename": "av1/common/cdef_block_avx2.c",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 5185
      },
      "writtenOn": "2022-03-18T16:13:03Z",
      "side": 1,
      "message": "I remember passing in __m256i is only safe for first few parameters (it is different for different platforms). Could you check about it? Otherwise, passing in a pointer(__m256i*) might be fine.",
      "range": {
        "startLine": 27,
        "startChar": 44,
        "endLine": 28,
        "endChar": 74
      },
      "revId": "a3eaaa3500116217b36ec8a70027ca4dc3e28a65",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "715fb35a_dffe242e",
        "filename": "av1/common/cdef_block_avx2.c",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 9611
      },
      "writtenOn": "2022-03-21T16:16:44Z",
      "side": 1,
      "message": "Hi Yunqing,\n\nAs per your suggestion, we have avoided passing AVX2 data to the function instead we passed as a pointer data. We hope this approach would be fine as the code has similar implementations. Also, we like to know the convention of passing the AVX2 variables to a function. Please share if there are any guidelines to be followed.\n\nPlease review.\n\nThanks \u0026 Regards,\nVenkata.",
      "parentUuid": "03cbeb47_d13508a8",
      "range": {
        "startLine": 27,
        "startChar": 44,
        "endLine": 28,
        "endChar": 74
      },
      "revId": "a3eaaa3500116217b36ec8a70027ca4dc3e28a65",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7ebacfd_5270ae6d",
        "filename": "av1/common/cdef_block_avx2.c",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 5185
      },
      "writtenOn": "2022-03-21T17:10:00Z",
      "side": 1,
      "message": "I found 1 example to handle the passing-in parameters:https://aomedia.googlesource.com/aom/+/dab3e99b2776fe41656565cc80d488b63911d9e1\nHope this helps. Also, you could look for x86 calling convention information for different platforms. That could also help.",
      "parentUuid": "715fb35a_dffe242e",
      "range": {
        "startLine": 27,
        "startChar": 44,
        "endLine": 28,
        "endChar": 74
      },
      "revId": "a3eaaa3500116217b36ec8a70027ca4dc3e28a65",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
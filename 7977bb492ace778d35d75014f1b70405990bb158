{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4c60bfb7_7971a6ef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-04-27T05:31:01Z",
      "side": 1,
      "message": "Good catch. I missed this in bringing over the enum value from libgav1. I\u0027m not sure why my local builds didn\u0027t pick it up.",
      "revId": "7977bb492ace778d35d75014f1b70405990bb158",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27cfd5de_cba7fe1d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-04-27T05:33:49Z",
      "side": 1,
      "message": "\u003e Good catch. I missed this in bringing over the enum value from libgav1. I\u0027m not sure why my local builds didn\u0027t pick it up.\n\nBut I see the ndk build is an issue. gcc was just being tolerant.",
      "parentUuid": "4c60bfb7_7971a6ef",
      "revId": "7977bb492ace778d35d75014f1b70405990bb158",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "586b2c08_92504d90",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-04-27T15:47:45Z",
      "side": 1,
      "message": "\u003e Good catch. I missed this in bringing over the enum value from libgav1.\n\nI didn\u0027t realize this came from an enum value in libgav1. Would you prefer to define this constant as an enum value? That also works in C. I defined it as a macro because that is more common in libaom.\n\n\u003e But I see the ndk build is an issue. gcc was just being tolerant.\n\nYes. I ran into this difference in what the compiler considered as a compile-time constant when I wrote NEON intrinsics code for libgav1.",
      "parentUuid": "27cfd5de_cba7fe1d",
      "revId": "7977bb492ace778d35d75014f1b70405990bb158",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0404a508_5722627e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-04-27T19:12:27Z",
      "side": 1,
      "message": "\u003e \u003e Good catch. I missed this in bringing over the enum value from libgav1.\n\u003e \n\u003e I didn\u0027t realize this came from an enum value in libgav1. Would you prefer to define this constant as an enum value? That also works in C. I defined it as a macro because that is more common in libaom.\n\u003e \n\nThis is ok. I actually started by bringing the enum over directly then when making a cleanup pass I realized the variable existed.\n\n\u003e \u003e But I see the ndk build is an issue. gcc was just being tolerant.\n\u003e \n\u003e Yes. I ran into this difference in what the compiler considered as a compile-time constant when I wrote NEON intrinsics code for libgav1.\n\nI think I\u0027ll look at moving the android compile to per-commit since it\u0027s relatively cheap.",
      "parentUuid": "586b2c08_92504d90",
      "revId": "7977bb492ace778d35d75014f1b70405990bb158",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "7977bb492ace778d35d75014f1b70405990bb158",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "7977bb492ace778d35d75014f1b70405990bb158",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "7977bb492ace778d35d75014f1b70405990bb158",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
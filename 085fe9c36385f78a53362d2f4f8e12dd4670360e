{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "aa7a3c72_0648fbef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 32923
      },
      "writtenOn": "2024-05-09T15:02:21Z",
      "side": 1,
      "message": "This CL fixes the nightly unit test failure reported in aomedia:3570 due to unaligned store in\n`av1_resize_horz_dir_avx2()` by making use of the existing function `xx_storel_32` to perform the 32-bit store operation to the output buffer.\n\nValidated that the fix resolves the reported unit test failures and has no impact on the scaling numbers.",
      "revId": "085fe9c36385f78a53362d2f4f8e12dd4670360e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09ab26ba_092e5bf0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5185
      },
      "writtenOn": "2024-05-09T16:09:37Z",
      "side": 1,
      "message": "Thanks for the fix. Extra note beyond this fix - This fix might impact the speed. Do you see in what case this is unaligned?",
      "parentUuid": "aa7a3c72_0648fbef",
      "revId": "085fe9c36385f78a53362d2f4f8e12dd4670360e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82a638e3_ec50c98b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-05-09T17:16:19Z",
      "side": 1,
      "message": "\u003e Thanks for the fix. Extra note beyond this fix - This fix might impact the speed. Do you see in what case this is unaligned?\n\nIn the past `xx_storel_epi32` when inlined produced the same assembly code since intel supports unaligned mov\u0027s. This should be straightforward to check.",
      "parentUuid": "09ab26ba_092e5bf0",
      "revId": "085fe9c36385f78a53362d2f4f8e12dd4670360e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a4d58c4_590f31de",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5185
      },
      "writtenOn": "2024-05-09T17:26:40Z",
      "side": 1,
      "message": "Hi James, could you review this CL so we can check it in to stop the nightly failure?",
      "parentUuid": "82a638e3_ec50c98b",
      "revId": "085fe9c36385f78a53362d2f4f8e12dd4670360e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8728dc20_e77e51e1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-05-09T17:51:07Z",
      "side": 1,
      "message": "We should submit this CL to fix the nightly tests; it is better than reverting the commit. But I agree we should take a deeper look at the code. Please see my findings in av1/common/x86/resize_avx2.c.",
      "parentUuid": "82a638e3_ec50c98b",
      "revId": "085fe9c36385f78a53362d2f4f8e12dd4670360e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6daea5c7_b9daf16b",
        "filename": "av1/common/x86/resize_avx2.c",
        "patchSetId": 1
      },
      "lineNbr": 548,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-05-09T17:51:07Z",
      "side": 1,
      "message": "Note that `dst_stride` is set equal to the input parameter `width2`.",
      "revId": "085fe9c36385f78a53362d2f4f8e12dd4670360e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c732c23_8ef47b55",
        "filename": "av1/common/x86/resize_avx2.c",
        "patchSetId": 1
      },
      "lineNbr": 694,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-05-09T17:51:07Z",
      "side": 1,
      "message": "When the unaligned access occurs, `dst_stride` is equal to 221, which is not a multiple of 4.\n\nSo the question is: is it wrong to pass a `width2` argument that is not a multiple of 4 to this function?\n\nThe answer to this question depends on the meaning of `intbuf`. The variable name looks like \"integer buffer\", but based on where it is created, I believe it stands for \"intermediate buffer\":\n\n```\nbool av1_resize_plane_to_half(const uint8_t *const input, int height, int width,\n                              int in_stride, uint8_t *output, int height2,\n                              int width2, int out_stride) {\n  uint8_t *intbuf \u003d (uint8_t *)aom_malloc(sizeof(*intbuf) * width2 * height);\n  if (intbuf \u003d\u003d NULL) {\n    return false;\n  }\n\n  // Resize in the horizontal direction\n  av1_resize_horz_dir(input, in_stride, intbuf, height, width, width2);\n  // Resize in the vertical direction\n  bool mem_status \u003d av1_resize_vert_dir(intbuf, output, out_stride, height,\n                                        height2, width2, 0 /*start_col*/);\n  aom_free(intbuf);\n  return mem_status;\n}\n```\n\nWe see that `intbuf` is used to hold the output of the `av1_resize_horz_dir()` call, which is passed as input to the `av1_resize_vert_dir()` call. That seems like an intermediate buffer to me.\n\nGiven this, I think `intbuf` does not need to be aligned to `int` boundaries. This is confirmed by inspecting the code of `av1_resize_horz_dir_c()`.\n\nSo I think we can\u0027t do better than this. It would be good if James or Yunqing could check my analysis.",
      "revId": "085fe9c36385f78a53362d2f4f8e12dd4670360e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
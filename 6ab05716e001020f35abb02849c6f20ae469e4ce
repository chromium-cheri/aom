{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "81efd99a_b02607d8",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 6
      },
      "lineNbr": 1280,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-27T16:57:31Z",
      "side": 1,
      "message": "Please try declaring `cm` as volatile.\n\nBased on my understanding of `setjmp()` and `longjmp()`, I think `cm` does not need to be declared as volatile. (The reason is that `cm` is not modified after the `setjmp()` call; note that it is declared as const/immutable.) But if some compiler warns about it, we have to comply. Sigh.\n\nI wonder if the armv7-linux-gcc compiler singles out `cm` because it is used after `setjmp()` returns from a `longjmp()` call (line 1291).",
      "revId": "6ab05716e001020f35abb02849c6f20ae469e4ce",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d07401f_a41b7e1d",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 6
      },
      "lineNbr": 1280,
      "author": {
        "id": 25857
      },
      "writtenOn": "2023-12-28T16:40:04Z",
      "side": 1,
      "message": "Declaring `cm` as volatile will require more changes, as we need to change the prototype of the sub functions to which `cm` is passed. Alternatively, we have moved the declaration of `cm after` `if(setjmp()){}` to silence this warning. \n\nAlso, we have validated that this warning was seen as `cm-\u003eerror` was being used in `aom_internal_error_copy()` (line number 1294 of patchset 6). Another approach to silence the warning is to return the `error (type aom_internal_error_info)` and call `aom_internal_error_copy()` at the caller site of `prepare_fpmt_workers()`.",
      "parentUuid": "81efd99a_b02607d8",
      "revId": "6ab05716e001020f35abb02849c6f20ae469e4ce",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dea6bb28_05eb61c4",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 6
      },
      "lineNbr": 1280,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-01-04T18:00:31Z",
      "side": 1,
      "message": "It is uncommon for a function to return the `aom_internal_error_info` struct. (I don\u0027t think any libaom function does this.) Your current approach is fine.",
      "parentUuid": "2d07401f_a41b7e1d",
      "revId": "6ab05716e001020f35abb02849c6f20ae469e4ce",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a050cb40_f18f1b43",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 6
      },
      "lineNbr": 1283,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-27T16:57:31Z",
      "side": 1,
      "message": "Nit: cm-\u003eerror.setjmp \u003d\u003e cm-\u003eerror-\u003esetjmp\n\nIf cm-\u003eerror is a valid pointer, why can\u0027t we use it?",
      "revId": "6ab05716e001020f35abb02849c6f20ae469e4ce",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c7344a9_024590a4",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 6
      },
      "lineNbr": 1283,
      "author": {
        "id": 25857
      },
      "writtenOn": "2023-12-28T16:40:04Z",
      "side": 1,
      "message": "Thank you for pointing this out. Added the setjmp target using cm-\u003eerror.",
      "parentUuid": "a050cb40_f18f1b43",
      "revId": "6ab05716e001020f35abb02849c6f20ae469e4ce",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7232d07d_a8c37178",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 6
      },
      "lineNbr": 1283,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-01-04T18:00:31Z",
      "side": 1,
      "message": "Thanks.",
      "parentUuid": "7c7344a9_024590a4",
      "revId": "6ab05716e001020f35abb02849c6f20ae469e4ce",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "8ce765ad_917beaea",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 9545
      },
      "writtenOn": "2020-03-29T21:38:22Z",
      "side": 1,
      "message": "I figured out why. With Visual Studio 2017 and older, cmake\u0027s default target platform name (architecture) is Win32. With Visual Studio 2019, cmake\u0027s default target platform name (architecture) is that of the host.\n\nSo when I ran\n    cmake -G \"Visual Studio 15 2017\"\nI was actually doing a 32-bit x86 build.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 14,
        "endChar": 3
      },
      "revId": "e9a58bbe06681d0a14784d0720c1117a6cb7e9b3",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb4e34f6_5f777de0",
        "filename": "aom_dsp/simd/v256_intrinsics.h",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 9545
      },
      "writtenOn": "2020-03-28T22:16:20Z",
      "side": 1,
      "message": "Steinar: There is a compiler warning here:\n\n  warning C4244: \u0027return\u0027: conversion from \u0027uint64_t\u0027 to \u0027uint32_t\u0027, possible loss of data\n\nHow should we fix this warning? By adding a cast to uint32_t? Or by changing the return type to uint64_t?",
      "revId": "e9a58bbe06681d0a14784d0720c1117a6cb7e9b3",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b147c17b_75ac8bd8",
        "filename": "aom_dsp/simd/v256_intrinsics.h",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-03-28T22:18:43Z",
      "side": 1,
      "message": "cast should work here, since sum of all s16 values is guaranteed to be within 32bit?",
      "parentUuid": "bb4e34f6_5f777de0",
      "revId": "e9a58bbe06681d0a14784d0720c1117a6cb7e9b3",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c05a2f2b_0f90aaa8",
        "filename": "aom_dsp/simd/v256_intrinsics.h",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 9545
      },
      "writtenOn": "2020-03-28T22:45:43Z",
      "side": 1,
      "message": "There are four xxx_sum() functions in this file. The other three xxx_sum() functions all return the typedef target of their input parameter type. So it seems that v256_ssd_s16_sum() should also return the typedef target of c_ssd256_internal_s16, which is uint64_t.\n\nI am not familiar with the functions in this file, so I am just speculating by pattern matching.",
      "parentUuid": "b147c17b_75ac8bd8",
      "revId": "e9a58bbe06681d0a14784d0720c1117a6cb7e9b3",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cded454_6b73c2a4",
        "filename": "aom_dsp/simd/v256_intrinsics.h",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 9545
      },
      "writtenOn": "2020-03-28T22:54:00Z",
      "side": 1,
      "message": "I have some more findings. There are three implementations of v256_ssd_s16_sum(). The implementation in this file has a different prototype from the other two implementations:\n\nwtc:~/aom.3/aom$ find . -name \"*\" -a -type f | xargs grep \"SIMD_INLINE .* v256_ssd_s16_sum(\"\n./aom_dsp/simd/v256_intrinsics_v128.h:SIMD_INLINE uint64_t v256_ssd_s16_sum(ssd256_internal_s16 s) {\n./aom_dsp/simd/v256_intrinsics_x86.h:SIMD_INLINE uint64_t v256_ssd_s16_sum(ssd256_internal_s16 s) {\n./aom_dsp/simd/v256_intrinsics.h:SIMD_INLINE uint32_t v256_ssd_s16_sum(c_ssd256_internal_s16 s) {",
      "parentUuid": "c05a2f2b_0f90aaa8",
      "revId": "e9a58bbe06681d0a14784d0720c1117a6cb7e9b3",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    }
  ]
}
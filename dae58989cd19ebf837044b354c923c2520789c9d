{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1c3f23a4_5c85872c",
        "filename": "test/encode_test_driver.cc",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-02-18T21:47:50Z",
      "side": 1,
      "message": "Here is the relevant code from WebRTC:\n\n...\nconstexpr int kUsageProfile \u003d 1;     // 0 \u003d good quality; 1 \u003d real-time.\n...\nconstexpr int kLagInFrames \u003d 0;  // No look ahead.\n...\n\nint LibaomAv1Encoder::InitEncode(const VideoCodec* codec_settings,\n                                 const Settings\u0026 settings) {\n  ...\n\n  // Initialize encoder configuration structure with default values\n  aom_codec_err_t ret \u003d\n      aom_codec_enc_config_default(aom_codec_av1_cx(), \u0026cfg_, 0);\n  if (ret !\u003d AOM_CODEC_OK) {\n    RTC_LOG(LS_WARNING) \u003c\u003c \"LibaomAv1Encoder::EncodeInit returned \" \u003c\u003c ret\n                        \u003c\u003c \" on aom_codec_enc_config_default.\";\n    return WEBRTC_VIDEO_CODEC_ERROR;\n  }\n\n  // Overwrite default config with input encoder settings \u0026 RTC-relevant values.\n  ...\n  cfg_.g_usage \u003d kUsageProfile;\n  cfg_.g_error_resilient \u003d 0;\n  // Low-latency settings.\n  cfg_.rc_end_usage \u003d AOM_CBR;          // Constant Bit Rate (CBR) mode\n  cfg_.g_pass \u003d AOM_RC_ONE_PASS;        // One-pass rate control\n  cfg_.g_lag_in_frames \u003d kLagInFrames;  // No look ahead when lag equals 0.\n  ...",
      "revId": "dae58989cd19ebf837044b354c923c2520789c9d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
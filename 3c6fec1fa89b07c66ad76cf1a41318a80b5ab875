{
  "comments": [
    {
      "key": {
        "uuid": "f6a6bf20_7405b128",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 9545
      },
      "writtenOn": "2018-11-29T16:32:42Z",
      "side": 1,
      "message": "Please add a BUG\u003d line in the commit message to refer to the bug you are fixing. It should look like this:\n\nBUG\u003daomedia:2263",
      "revId": "3c6fec1fa89b07c66ad76cf1a41318a80b5ab875",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0742065_0c829e68",
        "filename": "aom_dsp/x86/intrapred_avx2.c",
        "patchSetId": 1
      },
      "lineNbr": 1533,
      "author": {
        "id": 9545
      },
      "writtenOn": "2018-11-29T04:40:16Z",
      "side": 1,
      "message": "This StackOverflow page says another possible solution is to use _mm_loadu_si128() instead of _mm_load_si128() in transpose_TX_8X8():\n\nhttps://stackoverflow.com/questions/27553141/sse-segfault-on-mm-load-si128\n\nSince transpose_TX_8X8() uses _mm_storeu_si128(), this alternative solution seems to be the original intention?",
      "revId": "3c6fec1fa89b07c66ad76cf1a41318a80b5ab875",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f4cdf60_2b8ba4ce",
        "filename": "aom_dsp/x86/intrapred_avx2.c",
        "patchSetId": 1
      },
      "lineNbr": 1533,
      "author": {
        "id": 10704
      },
      "writtenOn": "2018-11-29T04:52:07Z",
      "side": 1,
      "message": "_mm_loadu_si128 will certainly fix it, but I am afraid it will be slower at least on some CPUs (I haven\u0027t touched AVX for some time though). Passing properly aligned data looks like a safer option especially as we have control over all code paths",
      "parentUuid": "c0742065_0c829e68",
      "revId": "3c6fec1fa89b07c66ad76cf1a41318a80b5ab875",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1474f3cc_6d09255a",
        "filename": "aom_dsp/x86/intrapred_avx2.c",
        "patchSetId": 1
      },
      "lineNbr": 1586,
      "author": {
        "id": 9545
      },
      "writtenOn": "2018-11-29T16:32:42Z",
      "side": 1,
      "message": "Another factor relevant to the alignment is the \"+ j\" here. Since j is a multiple of 8 and it is added to a uint16_t* pointer, the resulting pointer is still 16-byte aligned if src is 16-byte aligned.",
      "range": {
        "startLine": 1586,
        "startChar": 41,
        "endLine": 1586,
        "endChar": 45
      },
      "revId": "3c6fec1fa89b07c66ad76cf1a41318a80b5ab875",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73ba2c41_cb9985f9",
        "filename": "aom_dsp/x86/intrapred_avx2.c",
        "patchSetId": 1
      },
      "lineNbr": 1821,
      "author": {
        "id": 9545
      },
      "writtenOn": "2018-11-29T04:21:42Z",
      "side": 1,
      "message": "1. The dstT array just needs to be 16-byte aligned, because it is eventually passed to _mm_load_si128() in transpose_TX_8X8().\n\n2. Please use the DECLARE_ALIGNED macro, defined in \"aom_ports/mem.h\".\n\nhttps://aomedia.googlesource.com/aom/+/master/aom_ports/mem.h",
      "range": {
        "startLine": 1821,
        "startChar": 2,
        "endLine": 1821,
        "endChar": 30
      },
      "revId": "3c6fec1fa89b07c66ad76cf1a41318a80b5ab875",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59f23b29_31c92a45",
        "filename": "aom_dsp/x86/intrapred_avx2.c",
        "patchSetId": 1
      },
      "lineNbr": 1821,
      "author": {
        "id": 10704
      },
      "writtenOn": "2018-11-29T04:58:08Z",
      "side": 1,
      "message": "Yeah, my mistake here, pitch is worst case 32*sizeof(uint16_t) bytes -\u003e 64 bytes that doesn\u0027t break alignment, so we are safe to go with 16-bytes alignment here. \nNice that we have DECLARE_ALIGNED macro, I\u0027ll use it.",
      "parentUuid": "73ba2c41_cb9985f9",
      "range": {
        "startLine": 1821,
        "startChar": 2,
        "endLine": 1821,
        "endChar": 30
      },
      "revId": "3c6fec1fa89b07c66ad76cf1a41318a80b5ab875",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b450431e_bff9a492",
        "filename": "av1/common/convolve.h",
        "patchSetId": 4
      },
      "lineNbr": 106,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-29T00:07:16Z",
      "side": 1,
      "message": "Initializing all struct members individually is also fine. I suggest we initialize them in the declaration order (so that it\u0027s easier to verify all members are initialized):\n\n```\ntypedef struct ConvolveParams {\n  int do_average;\n  CONV_BUF_TYPE *dst;\n  int dst_stride;\n  int round_0;\n  int round_1;\n  int plane;\n  int is_compound;\n  int use_dist_wtd_comp_avg;\n  int fwd_offset;\n  int bck_offset;\n} ConvolveParams;\n```",
      "revId": "59cbc05bdbad37b4ffb662dc5c63471a6c339bea",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4624b5b_88dcf70d",
        "filename": "av1/common/convolve.h",
        "patchSetId": 4
      },
      "lineNbr": 106,
      "author": {
        "id": 5022
      },
      "writtenOn": "2023-10-29T04:41:20Z",
      "side": 1,
      "message": "This seems to provide better benefits in the long run.",
      "parentUuid": "b450431e_bff9a492",
      "revId": "59cbc05bdbad37b4ffb662dc5c63471a6c339bea",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "28b1936e_76d63b44",
        "filename": "av1/common/convolve.h",
        "patchSetId": 4
      },
      "lineNbr": 106,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-29T16:54:37Z",
      "side": 1,
      "message": "(You can ignore this comment. This comment clarifies an earlier suggestion.)\n\nWhat I meant was to initialize the members as follows:\n\n```\n  ConvolveParams conv_params;\n  conv_params.do_average \u003d 0;\n  conv_params.dst \u003d NULL;\n  conv_params.dst_stride \u003d 0;\n\n  conv_params.round_0 \u003d WIENER_ROUND0_BITS;\n  conv_params.round_1 \u003d 2 * FILTER_BITS - conv_params.round_0;\n  const int intbufrange \u003d bd + FILTER_BITS - conv_params.round_0 + 2;\n  assert(IMPLIES(bd \u003c 12, intbufrange \u003c\u003d 16));\n  if (intbufrange \u003e 16) {\n    conv_params.round_0 +\u003d intbufrange - 16;\n    conv_params.round_1 -\u003d intbufrange - 16;\n  }\n \n  conv_params.plane \u003d 0;\n  conv_params.is_compound \u003d 0;\n  conv_params.use_dist_wtd_comp_avg \u003d 0;\n  conv_params.fwd_offset \u003d 0;\n  conv_params.bck_offset \u003d 0;\n```",
      "parentUuid": "a4624b5b_88dcf70d",
      "revId": "59cbc05bdbad37b4ffb662dc5c63471a6c339bea",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
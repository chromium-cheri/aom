{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "76d8f6d1_76fde055",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 33002
      },
      "writtenOn": "2023-12-13T13:14:44Z",
      "side": 1,
      "message": "In the parent commit, if the allocation of `thread_data-\u003etd` fails in `av1_init_tile_thread_data()`, during `encoder_destroy()` the missing NULL check of `thread_data-\u003etd` in `free_thread_data()` can result in SEGV error. This CL fixes this issue by adding a NULL check for `thread_data-\u003etd` in `free_thread_data()`.\n\nThis change is bit-exact and has been verified using bitstream-match tests for a combination of various configuration values for --threads, --tile-rows, --tile-columns, --cpu-used, --end-usage, --row-mt, --fp-mt, etc. Validated all unit-tests with sanitizers (address and thread) and valgrind.",
      "revId": "728f2219ebd277475af6fd59b4ca96cf8f4c1819",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b083cdd1_822f269d",
        "filename": "av1/encoder/encoder_alloc.h",
        "patchSetId": 1
      },
      "lineNbr": 461,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-14T01:06:42Z",
      "side": 1,
      "message": "This assumes `thread_data-\u003eoriginal_td` is NULL when we allocate `thread_data-\u003etd`. I suggest we add an assertion:\n\n```\n void av1_init_tile_thread_data(AV1_PRIMARY *ppi, int is_first_pass) {\n   ...\n   for (int i \u003d num_workers - 1; i \u003e\u003d 0; i--) {\n     EncWorkerData *const thread_data \u003d \u0026p_mt_info-\u003etile_thr_data[i];\n\n     if (i \u003e 0) {\n       // Allocate thread data.\n+      assert(!thread_data-\u003eoriginal_td);\n       AOM_CHECK_MEM_ERROR(\u0026ppi-\u003eerror, thread_data-\u003etd,\n                           aom_memalign(32, sizeof(*thread_data-\u003etd)));\n```",
      "revId": "728f2219ebd277475af6fd59b4ca96cf8f4c1819",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98ee0dfc_a8d274e5",
        "filename": "av1/encoder/encoder_alloc.h",
        "patchSetId": 1
      },
      "lineNbr": 461,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-15T06:55:44Z",
      "side": 1,
      "message": "On second thought, let\u0027s not add this assertion.",
      "parentUuid": "b083cdd1_822f269d",
      "revId": "728f2219ebd277475af6fd59b4ca96cf8f4c1819",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "afe094ab_0659a558",
        "filename": "av1/encoder/encoder_alloc.h",
        "patchSetId": 1
      },
      "lineNbr": 516,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-15T03:15:55Z",
      "side": 1,
      "message": "It seems that we should set both `thread_data-\u003etd` and `thread_data-\u003eoriginal_td` to NULL after freeing `thread_data-\u003etd`.\n\nNote the following code in `encoder_encode()` in av1/av1_cx_iface.c:\n\n```\n    if (ppi-\u003ep_mt_info.prev_num_enc_workers \u003c num_enc_workers \u0026\u0026\n        num_enc_workers \u003c\u003d ppi-\u003ep_mt_info.num_workers) {\n      free_thread_data(ppi);\n      for (int j \u003d 0; j \u003c ppi-\u003enum_fp_contexts; j++) {\n        aom_free(ppi-\u003eparallel_cpi[j]-\u003etd.tctx);\n        ppi-\u003eparallel_cpi[j]-\u003etd.tctx \u003d NULL;\n      }\n      av1_init_tile_thread_data(ppi, cpi-\u003eoxcf.pass \u003d\u003d AOM_RC_FIRST_PASS);\n    }\n```\n\nSo the `free_thread_data()` call should not leave dangling pointers. Otherwise if we call `aom_internal_error()` in the middle of `av1_init_tile_thread_data()`, we will have double-free errors when `encoder_destroy()` calls `free_thread_data()`.",
      "revId": "728f2219ebd277475af6fd59b4ca96cf8f4c1819",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "adc4089c_91326d77",
        "filename": "av1/encoder/allintra_vis.c",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 5022
      },
      "writtenOn": "2021-10-13T15:50:33Z",
      "side": 1,
      "message": "Why this mb_count is needed?\n\nThe previous format appears to be invariant to the block counts?",
      "range": {
        "startLine": 159,
        "startChar": 62,
        "endLine": 159,
        "endChar": 70
      },
      "revId": "5c3dba25ec143c5238bc967e84f59d829a4666c4",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "21bcd9a8_420161e7",
        "filename": "av1/encoder/allintra_vis.c",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 6585
      },
      "writtenOn": "2021-10-14T05:03:49Z",
      "side": 1,
      "message": "The previous format uses the fix step size (super block).\nTherefore the comparison is independent to mb_count.\nNow that we change to adaptive step size, the comparison should be normalized.",
      "parentUuid": "adc4089c_91326d77",
      "range": {
        "startLine": 159,
        "startChar": 62,
        "endLine": 159,
        "endChar": 70
      },
      "revId": "5c3dba25ec143c5238bc967e84f59d829a4666c4",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c0540c9_7a8d8b18",
        "filename": "av1/encoder/allintra_vis.c",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 5022
      },
      "writtenOn": "2021-10-14T06:14:55Z",
      "side": 1,
      "message": "The term ((base_num + base_reg) / (base_den + base_reg)) seems to be block num invariant as terms that one needs to cumulate through blocks will be canceled out in the division (?)",
      "parentUuid": "21bcd9a8_420161e7",
      "range": {
        "startLine": 159,
        "startChar": 62,
        "endLine": 159,
        "endChar": 70
      },
      "revId": "5c3dba25ec143c5238bc967e84f59d829a4666c4",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b60c0a5_0d2db25c",
        "filename": "av1/encoder/allintra_vis.c",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 6585
      },
      "writtenOn": "2021-10-18T18:07:13Z",
      "side": 1,
      "message": "You are right. Thanks for catching the bug.\nI removed mb_count.",
      "parentUuid": "4c0540c9_7a8d8b18",
      "range": {
        "startLine": 159,
        "startChar": 62,
        "endLine": 159,
        "endChar": 70
      },
      "revId": "5c3dba25ec143c5238bc967e84f59d829a4666c4",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "007b9b86_4287d487",
        "filename": "av1/encoder/allintra_vis.c",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 5022
      },
      "writtenOn": "2021-10-19T06:36:32Z",
      "side": 1,
      "message": "let\u0027s see the visual test results. if all is good there, please check this cl in. thanks",
      "parentUuid": "3b60c0a5_0d2db25c",
      "range": {
        "startLine": 159,
        "startChar": 62,
        "endLine": 159,
        "endChar": 70
      },
      "revId": "5c3dba25ec143c5238bc967e84f59d829a4666c4",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f200e98_214ed61f",
        "filename": "av1/encoder/allintra_vis.c",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 6585
      },
      "writtenOn": "2021-10-26T20:01:09Z",
      "side": 1,
      "message": "Hi Jingning.\n\nI visually compared this current patch (patchset 5) vs patchset 4 vs baseline.\nIt turns out to me that the current patch is a draw as compared against the baseline (4/4/16 win/loss/draw).\nBut patchset 4 looks clearly better than both the current patch and baseline.\n\nThe only difference between patchset 4 and 5 is that patchset 4 divides mb_count in the calculation of sb_wiener_var (line 158).\n\nBut why dividing mb_count makes it better?\nMy explanation is:\nFirst, dividing mb_count still maintains block num invariance. Since whenever \"sb_wiener_var\" is calculated, it is divided by the same \"mb_count\".\nWhat makes a difference is the clamping (line 159).\nAs I have mentioned a while ago, the DCM model is not as accurate when the source variance of a block is small. Fortunately, our calculation (loop from line 136 to \n 156) averaged out this problem. Specifically, when block source variances are small, \"base_reg\" will dominate the computation. and the final \"sb_wiener_var\" value will be close to the \"mb_count\".\nBy dividing \"mb_count\", we basically add a scaling factor for \"sb_wiener_var\". For blocks with large variances, this is a linear scaling down. For blocks with small variances, the clamping prevents the value going to 0. The overall effect is actually lifting these blocks with small source variances.\n\nThis is in accordance with the visual check, where we could see dark flat regions get better (small variances).\n\nTherefore I recommend to check in the patchset 4 version.\nWhat do you think?",
      "parentUuid": "007b9b86_4287d487",
      "range": {
        "startLine": 159,
        "startChar": 62,
        "endLine": 159,
        "endChar": 70
      },
      "revId": "5c3dba25ec143c5238bc967e84f59d829a4666c4",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
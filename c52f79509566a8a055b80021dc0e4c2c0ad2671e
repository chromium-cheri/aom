{
  "comments": [
    {
      "key": {
        "uuid": "4b8df0f1_e09d70d9",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 1
      },
      "lineNbr": 8044,
      "author": {
        "id": 5290
      },
      "writtenOn": "2017-03-03T00:12:18Z",
      "side": 1,
      "message": "It looks like all the members of the struct are derived from \u0027mbmi\u0027. So, not sure if it is worth creating this struct.\nFor example, you can just pass \u0027mbmi\u0027 (instead of this struct) to handle_newmv(), and derive the rest as local variables. Right?",
      "revId": "c52f79509566a8a055b80021dc0e4c2c0ad2671e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3dea74b2_9832f1de",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 1
      },
      "lineNbr": 8044,
      "author": {
        "id": 6465
      },
      "writtenOn": "2017-03-03T18:56:14Z",
      "side": 1,
      "message": "Yeah, that\u0027s a good point. Was considering a bunch of variables and lost track of this I guess. My thought was that I can add members in the future but it probably makes more sense to add this when it\u0027s needed.\n\nWhat do you think of all these derived variables by the way? It seems to me that it\u0027s not the greatest to have all these pointers into and copies of data from a struct - kind of obfuscates where the information is from. One thing to note is that mbmi does get changed so maybe the copies are needed, will need to investigate for each variable.",
      "parentUuid": "4b8df0f1_e09d70d9",
      "revId": "c52f79509566a8a055b80021dc0e4c2c0ad2671e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6ac4960_f900beba",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 1
      },
      "lineNbr": 8044,
      "author": {
        "id": 5290
      },
      "writtenOn": "2017-03-03T19:08:34Z",
      "side": 1,
      "message": "\u003e it probably makes more sense to add this when it\u0027s needed.\n\nExactly.\n\n\u003e \n\u003e What do you think of all these derived variables by the way? It seems to me that it\u0027s not the greatest to have all these pointers into and copies of data from a struct - kind of obfuscates where the information is from. \n\nThere are two ways I guess:\n- Have local variables that derive from struct members -- initialized once, and hopefully const, OR\n- Call an inline function/macro every time you need that derived variable (e.g. \u0027mv_idx \u003d get_motion_vector_index(mbmi-\u003emode).\n\nSo, I guess the choice depends on whether the value derived variables is ever going to change and/or if you only need the initial value of these variables, even if the original struct members change.\n\n\u003e One thing to note is that mbmi does get changed so maybe the copies are needed, will need to investigate for each variable.\n\nYeah, you\u0027ll probably have to look at each variable.",
      "parentUuid": "3dea74b2_9832f1de",
      "revId": "c52f79509566a8a055b80021dc0e4c2c0ad2671e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca780d81_c11f8eaf",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 1
      },
      "lineNbr": 8044,
      "author": {
        "id": 6465
      },
      "writtenOn": "2017-03-07T00:48:57Z",
      "side": 1,
      "message": "\u003e There are two ways I guess:\n\u003e - Have local variables that derive from struct members -- initialized once, and hopefully const, OR\n\u003e - Call an inline function/macro every time you need that derived variable (e.g. \u0027mv_idx \u003d get_motion_vector_index(mbmi-\u003emode).\n\u003e \n\u003e So, I guess the choice depends on whether the value derived variables is ever going to change and/or if you only need the initial value of these variables, even if the original struct members change.\n\nThis is going to need a little more investigation on my part. For now I\u0027ve left their definitions the same as in handle_inter_mode(). I\u0027ll work on making them const where possible.\n\nI\u0027m not really into the macro, the local variables seem cleaner to me for now.",
      "parentUuid": "d6ac4960_f900beba",
      "revId": "c52f79509566a8a055b80021dc0e4c2c0ad2671e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3bd757fa_e4532bc9",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 1
      },
      "lineNbr": 8044,
      "author": {
        "id": 6465
      },
      "writtenOn": "2017-03-07T21:07:46Z",
      "side": 1,
      "message": "OK, I\u0027ve made everything constant that I could.",
      "parentUuid": "ca780d81_c11f8eaf",
      "revId": "c52f79509566a8a055b80021dc0e4c2c0ad2671e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d11f25e2_cd7d42b7",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 1
      },
      "lineNbr": 8153,
      "author": {
        "id": 5290
      },
      "writtenOn": "2017-03-03T00:12:18Z",
      "side": 1,
      "message": "It\u0027s OK to omit the local var:\nif (handle_newmv( ....) !\u003d 0) .....",
      "revId": "c52f79509566a8a055b80021dc0e4c2c0ad2671e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d32ff0e6_3a9d8c35",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 1
      },
      "lineNbr": 8153,
      "author": {
        "id": 6465
      },
      "writtenOn": "2017-03-03T18:56:14Z",
      "side": 1,
      "message": "I return the value if it isn\u0027t 0 though. I could just hardcode it to be the same error value of INT64_MAX.",
      "parentUuid": "d11f25e2_cd7d42b7",
      "revId": "c52f79509566a8a055b80021dc0e4c2c0ad2671e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f81c1ab_e470bee7",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 1
      },
      "lineNbr": 8153,
      "author": {
        "id": 5290
      },
      "writtenOn": "2017-03-03T19:08:34Z",
      "side": 1,
      "message": "Ah indeed, my bad.\nYou can use a \u0027const\u0027 though.\n(Not a big deal here, but as a good practice in general).",
      "parentUuid": "d32ff0e6_3a9d8c35",
      "revId": "c52f79509566a8a055b80021dc0e4c2c0ad2671e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65b4fa78_1d578c72",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 1
      },
      "lineNbr": 8153,
      "author": {
        "id": 6465
      },
      "writtenOn": "2017-03-07T00:48:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3f81c1ab_e470bee7",
      "revId": "c52f79509566a8a055b80021dc0e4c2c0ad2671e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fef135cc_b360e661",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5020
      },
      "writtenOn": "2020-12-02T02:06:47Z",
      "side": 1,
      "message": "I didn\u0027t take a close look, but it may be possible to change the code to use a different layout for this 4x4 transpose.",
      "revId": "cdb62d54e4a8b3b8ad946bf9135f999acf6dc7c7",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd326232_408e9a0b",
        "filename": "aom_dsp/x86/aom_subpixel_8t_intrin_ssse3.c",
        "patchSetId": 1
      },
      "lineNbr": 833,
      "author": {
        "id": 9545
      },
      "writtenOn": "2020-12-02T17:43:03Z",
      "side": 1,
      "message": "The last four lines in transpose_16bit_4x4() are:\n\n  out[0] \u003d _mm_unpacklo_epi32(a0, a1);\n  out[1] \u003d _mm_srli_si128(out[0], 8);\n  out[2] \u003d _mm_unpackhi_epi32(a0, a1);\n  out[3] \u003d _mm_srli_si128(out[2], 8);\n\nSince we pass \u0027ss\u0027 as the \u0027out\u0027 argument, this means that ss[1] is equal to _mm_srli_si128(ss[0], 8). This means line 837 can be simplified to:\n\n  s[1] \u003d ss[1];\n\nBut comparing this function and transpose_16bit_4x4() with the same named functions in libvpx, I believe that this function can simply call\n\n  transpose_16bit_4x4(s, s);",
      "revId": "cdb62d54e4a8b3b8ad946bf9135f999acf6dc7c7",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
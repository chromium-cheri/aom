{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5fe5d2c9_0bc5c596",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-04-05T16:39:19Z",
      "side": 1,
      "message": "Here are the compiler warning and error messages:\n\n```\naom/aom_dsp/flow_estimation/x86/disflow_sse4.c: In function ‘compute_flow_error’:\naom/aom_dsp/flow_estimation/x86/disflow_sse4.c:230:9: warning: implicit declaration of function ‘_mm_loadu_si64’; did you mean ‘_mm_loadl_epi64’? [-Wimplicit-function-declaration]\n         _mm_loadu_si64((__m128i *)\u0026src[(y + i) * stride + x]);\n         ^~~~~~~~~~~~~~\n         _mm_loadl_epi64\naom/aom_dsp/flow_estimation/x86/disflow_sse4.c:230:9: error: incompatible types when initializing type ‘__m128i’ {aka ‘__vector(2) long long int’} using type ‘int’\n[176/615] Building C ob\n```",
      "revId": "58aa000c18e0702d7ffd46fd5551eb9bc0708766",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f7b9460_4a0f8ab9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 29052
      },
      "writtenOn": "2023-04-05T16:46:12Z",
      "side": 1,
      "message": "Looks good to me - as far as I can tell, these compile to the same instruction, so the generated code should be the same.",
      "revId": "58aa000c18e0702d7ffd46fd5551eb9bc0708766",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c33644c7_e51a3a41",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-04-05T16:50:17Z",
      "side": 1,
      "message": "Thank you for checking this. That\u0027s also what I found on the Web. Also, libaom is apparently avoiding _mm_loadu_si64. There are many calls to _mm_loadl_epi64 but this is the only call to _mm_loadu_si64.",
      "parentUuid": "2f7b9460_4a0f8ab9",
      "revId": "58aa000c18e0702d7ffd46fd5551eb9bc0708766",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "826e9780_63354369",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-04-05T17:15:28Z",
      "side": 1,
      "message": "\u003e Thank you for checking this. That\u0027s also what I found on the Web. Also, libaom is apparently avoiding _mm_loadu_si64. There are many calls to _mm_loadl_epi64 but this is the only call to _mm_loadu_si64.\n\nI guess we can put a lint like check in for forbidden calls.",
      "parentUuid": "c33644c7_e51a3a41",
      "revId": "58aa000c18e0702d7ffd46fd5551eb9bc0708766",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "58aa000c18e0702d7ffd46fd5551eb9bc0708766",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "58aa000c18e0702d7ffd46fd5551eb9bc0708766",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "58aa000c18e0702d7ffd46fd5551eb9bc0708766",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e6396127_1a815d33",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 33002
      },
      "writtenOn": "2023-12-05T14:58:51Z",
      "side": 1,
      "message": "Hi Wan-Teh, Please review the latest patch set.",
      "revId": "56763012883562c84ebc3d8f752fcc5cc30500eb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0dedc16_6db8fe2d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-07T23:09:02Z",
      "side": 1,
      "message": "Satheesh: Sorry about the late reply. I didn\u0027t have time to review this CL again until today.\n\nI think we need to study the error reporting of `struct od_ec_enc` and its libaom wrapper `aom_writer` carefully. I analyzed the code more today. It seems that we can also just use the current `error` field in `struct od_ec_enc` to report errors. In this approach, once `struct od_ec_enc` enters an error state, we can still call functions on it, but the functions will notice that (by checking the `error` field or the `buf` field) that it can\u0027t write bits and will do nothing. So the caller doesn\u0027t realize something is wrong until it calls `od_ec_enc_done()` and gets a null return value.\n\nSo the first thing we need to do is to change `aom_stop_encode()` to return -1 if `od_ec_enc_done()` returns NULL. Then we change all the callers of `aom_stop_encode()` to check the return value. If `aom_stop_encode()` returns a negative value, then the callers should handle the error properly.\n\nPlease consider this alternative approach and see if you think it will work well.\n\nIf you prefer the current approach, then I have only one suggestion right now (see my comment in aom_dsp/entenc.h). I want to wait until I know which approach you prefer to see if I should review the current approach more.\n\nThanks for your patience.",
      "revId": "56763012883562c84ebc3d8f752fcc5cc30500eb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5396742_763c8f16",
        "filename": "aom_dsp/entenc.c",
        "patchSetId": 5
      },
      "lineNbr": 132,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-07T23:09:02Z",
      "side": 1,
      "message": "Please add back `enc-\u003estorage \u003d 0;`.\n\nThis is different from the realloc case. Here, we should keep `enc-\u003ebuf` and `enc-\u003estorage` consistent with each other. If `enc-\u003ebuf` is a null pointer, then `enc-\u003estorage` should be 0.",
      "revId": "56763012883562c84ebc3d8f752fcc5cc30500eb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e557269_8a376fb8",
        "filename": "aom_dsp/entenc.h",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-07T23:09:02Z",
      "side": 1,
      "message": "If we use `aom_internal_error()` to report errors, I suggest the following:\n\nAdd a `struct aom_internal_error_info *error_info` input parameter to `od_ec_enc_init()` and `aom_start_encode()`.\n\nThe new input parameter ensures that the `error_info` field of `struct od_ec_enc` is always set.",
      "revId": "56763012883562c84ebc3d8f752fcc5cc30500eb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
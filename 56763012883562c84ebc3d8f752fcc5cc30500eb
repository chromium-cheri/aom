{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e6396127_1a815d33",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 33002
      },
      "writtenOn": "2023-12-05T14:58:51Z",
      "side": 1,
      "message": "Hi Wan-Teh, Please review the latest patch set.",
      "revId": "56763012883562c84ebc3d8f752fcc5cc30500eb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0dedc16_6db8fe2d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-07T23:09:02Z",
      "side": 1,
      "message": "Satheesh: Sorry about the late reply. I didn\u0027t have time to review this CL again until today.\n\nI think we need to study the error reporting of `struct od_ec_enc` and its libaom wrapper `aom_writer` carefully. I analyzed the code more today. It seems that we can also just use the current `error` field in `struct od_ec_enc` to report errors. In this approach, once `struct od_ec_enc` enters an error state, we can still call functions on it, but the functions will notice that (by checking the `error` field or the `buf` field) that it can\u0027t write bits and will do nothing. So the caller doesn\u0027t realize something is wrong until it calls `od_ec_enc_done()` and gets a null return value.\n\nSo the first thing we need to do is to change `aom_stop_encode()` to return -1 if `od_ec_enc_done()` returns NULL. Then we change all the callers of `aom_stop_encode()` to check the return value. If `aom_stop_encode()` returns a negative value, then the callers should handle the error properly.\n\nPlease consider this alternative approach and see if you think it will work well.\n\nIf you prefer the current approach, then I have only one suggestion right now (see my comment in aom_dsp/entenc.h). I want to wait until I know which approach you prefer to see if I should review the current approach more.\n\nThanks for your patience.",
      "revId": "56763012883562c84ebc3d8f752fcc5cc30500eb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca87048f_c91acb29",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 33002
      },
      "writtenOn": "2023-12-08T17:49:03Z",
      "side": 1,
      "message": "Hi Wan-Teh, Thanks for the suggestion. Initially, we had considered this alternate approach of using the existing error flag. But, in order to avoid further processing after a memory allocation failure and to terminate immediately, we have gone ahead with the current implementation. We have taken care of your suggested changes in the latest patch set. Please review.",
      "parentUuid": "b0dedc16_6db8fe2d",
      "revId": "56763012883562c84ebc3d8f752fcc5cc30500eb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a04175e_0e30fd26",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-09T18:29:46Z",
      "side": 1,
      "message": "Hi Satheesh,\n\nI looked at the code more closely, including aom_dsp/bitreader.c and `od_ec_dec`. I suggest we stick with the original design of `od_ec_enc` and change `aom_stop_encode()` to return -1 if `od_ec_enc_done()` returns NULL. Although this won\u0027t terminate encoding immediately after a memory allocation failure, this is a good trade-off because memory allocation failures are uncommon.\n\nI have prototyped the alternative approach and it requires slightly fewer changes than the current approach (because the changes to the tests are simpler).",
      "parentUuid": "ca87048f_c91acb29",
      "revId": "56763012883562c84ebc3d8f752fcc5cc30500eb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d80d811f_c7d13fdc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 33002
      },
      "writtenOn": "2023-12-11T16:03:23Z",
      "side": 1,
      "message": "We have taken care of your suggestions in the latest patchset. Please review.",
      "parentUuid": "4a04175e_0e30fd26",
      "revId": "56763012883562c84ebc3d8f752fcc5cc30500eb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5396742_763c8f16",
        "filename": "aom_dsp/entenc.c",
        "patchSetId": 5
      },
      "lineNbr": 132,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-07T23:09:02Z",
      "side": 1,
      "message": "Please add back `enc-\u003estorage \u003d 0;`.\n\nThis is different from the realloc case. Here, we should keep `enc-\u003ebuf` and `enc-\u003estorage` consistent with each other. If `enc-\u003ebuf` is a null pointer, then `enc-\u003estorage` should be 0.",
      "revId": "56763012883562c84ebc3d8f752fcc5cc30500eb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c2511424_31bdadcf",
        "filename": "aom_dsp/entenc.c",
        "patchSetId": 5
      },
      "lineNbr": 132,
      "author": {
        "id": 33002
      },
      "writtenOn": "2023-12-08T17:49:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a5396742_763c8f16",
      "revId": "56763012883562c84ebc3d8f752fcc5cc30500eb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e557269_8a376fb8",
        "filename": "aom_dsp/entenc.h",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-07T23:09:02Z",
      "side": 1,
      "message": "If we use `aom_internal_error()` to report errors, I suggest the following:\n\nAdd a `struct aom_internal_error_info *error_info` input parameter to `od_ec_enc_init()` and `aom_start_encode()`.\n\nThe new input parameter ensures that the `error_info` field of `struct od_ec_enc` is always set.",
      "revId": "56763012883562c84ebc3d8f752fcc5cc30500eb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "15a566ac_5536ae16",
        "filename": "aom_dsp/entenc.h",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 33002
      },
      "writtenOn": "2023-12-08T17:49:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3e557269_8a376fb8",
      "revId": "56763012883562c84ebc3d8f752fcc5cc30500eb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
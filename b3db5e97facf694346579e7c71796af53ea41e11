{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cda7fda0_33cc986a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-03-02T02:31:19Z",
      "side": 1,
      "message": "Please also add\nBUG\u003daomedia:2959\n\nbecause the addition of kAllIntra to Testmode enum is related to aomedia:2959.",
      "revId": "b3db5e97facf694346579e7c71796af53ea41e11",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "76d78f3f_025f6132",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 22433
      },
      "writtenOn": "2021-03-02T09:08:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cda7fda0_33cc986a",
      "revId": "b3db5e97facf694346579e7c71796af53ea41e11",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca47fb3e_38f4cc26",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 22433
      },
      "writtenOn": "2021-03-01T11:53:19Z",
      "side": 1,
      "message": "\nHi Wan-Teh,\n\nIn this patch, we have added a unit test AV1LosslessFrameSizeTests.LosslessEncode to validate the allocated size of bit stream buffer by feeding pseudo random input to the encoder in ALLINTRA lossless mode. \n\nWe modified the data_sz calculation (locally) as below, to check the behavior of this unit test.\n\n    int multiplicative_factor \u003d 8;\n    size_t data_sz \u003d ALIGN_POWER_OF_TWO(ctx-\u003ecfg.g_w, 5) *\n                     ALIGN_POWER_OF_TWO(ctx-\u003ecfg.g_h, 5) * get_image_bps(img) / 8;\n    data_sz \u003d data_sz * multiplicative_factor;\n\nThe following are the observations when tested the unit test for different values of \u0027multiplicative_factor\u0027.\n     multiplicative_factor     status of unit test\n             8                   pass\n             2                   pass\n             1\t                 failed (ERROR: Segmentation fault)\n\nAs expected, we observed a segmentation fault when ctx-\u003ecx_data is small (i.e., when data_sz is equal to one uncompressed frame size).\nThe same behavior is seen when we validated the unit test with the following patch (i.e., with \u0027guard page at the end\u0027)\nhttps://aomedia-review.googlesource.com/c/aom/+/131321\n\nWe also verified address sanitizer for this unit test and the following are the observations.\n     multiplicative_factor     status of unit test\n             8                   pass\n             2                   pass\n             1\t                 failed (ERROR: heap-buffer-overflow)\n\nWhen we tested using address sanitizer with \u0027guard page at the end\u0027, the following error is seen for multiplicative_factor equal to 1 and no issues were seen for multiplicative_factor 8 and 4.\n          AddressSanitizer:DEADLYSIGNAL  --  ERROR: SEGV on unknown address\n\nPlease review the patch\n\nThanks \u0026 Regards, \nAniket.\n",
      "revId": "b3db5e97facf694346579e7c71796af53ea41e11",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b3cf82d_9350d712",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-03-02T02:31:19Z",
      "side": 1,
      "message": "Hi Aniket,\n\nThanks a lot for the new test! I suggest a few small changes.",
      "revId": "b3db5e97facf694346579e7c71796af53ea41e11",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "acad4e81_53067622",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-03-03T01:50:57Z",
      "side": 1,
      "message": "Hi Aniket,\n\nI did some experiments.\n\nIf I change the multiplicative_factor to 1, the test crashes in malloc():\n\n#0  0x00007ffff7b076ff in unlink_chunk (p\u003dp@entry\u003d0x555557d33b90, av\u003d\u003coptimized out\u003e) at malloc.c:1453\n#1  0x00007ffff7b0a07a in _int_malloc (av\u003dav@entry\u003d0x7ffff7c3fb80 \u003cmain_arena\u003e, bytes\u003dbytes@entry\u003d1175) at malloc.c:4038\n#2  0x00007ffff7b0b164 in __GI___libc_malloc (bytes\u003d1175) at malloc.c:3058\n#3  0x0000555556273271 in aom_calloc ()\n#4  0x00005555562d5459 in setup_frame_size ()\n#5  0x00005555562de36c in av1_decode_frame_headers_and_setup ()\n#6  0x00005555562f8bf8 in aom_decode_frame_from_obus ()\n#7  0x00005555562f3edb in av1_receive_compressed_data ()\n#8  0x00005555562cf042 in frame_worker_hook ()\n#9  0x00005555562733b7 in execute ()\n#10 0x00005555562d0236 in decoder_decode ()\n#11 0x0000555556519b84 in aom_codec_decode ()\n\nIf I apply the \"guard page at the end\" CL, the test crashes in aom_stop_encode():\n\n#0  __memmove_avx_unaligned_erms () at ../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:262\n#1  0x0000555555f086bc in aom_stop_encode ()\n#2  0x0000555556329412 in write_tiles_in_tg_obus ()\n#3  0x000055555632b6a6 in av1_pack_bitstream ()\n#4  0x000055555633f6cb in encode_with_recode_loop_and_filter ()\n#5  0x00005555563486ed in av1_encode ()\n#6  0x000055555656e263 in av1_encode_strategy ()\n#7  0x000055555634a7cb in av1_get_compressed_data ()\n#8  0x00005555562fd6a7 in encoder_encode ()\n#9  0x0000555556519f04 in aom_codec_encode ()\n\nSo the guard page makes the stack trace pinpoint the culprit.\n\nI also tested with kOnePassGood and kTwoPassGood. I added an encoder-\u003eControl(AV1E_SET_GF_MIN_PYRAMID_HEIGHT, 5) call. I can only make libaom write at most 5 frames to the ctx-\u003ecx_data buffer. The current ctx-\u003ecx_data buffer size is large enough, but this buffer half-full check will kick in first:\n\n    while (cx_data_sz \u003e\u003d ctx-\u003ecx_data_sz / 2 \u0026\u0026 !is_frame_visible) {",
      "parentUuid": "ca47fb3e_38f4cc26",
      "revId": "b3db5e97facf694346579e7c71796af53ea41e11",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9501788_140f3492",
        "filename": "test/frame_size_tests.cc",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-03-02T02:31:19Z",
      "side": 1,
      "message": "Nit/optional: Could you delete this line? The ONE_BY_ONE_VIDEO_NAME macro is never defined.\n\nWe could also delete this line in a separate CL.",
      "revId": "b3db5e97facf694346579e7c71796af53ea41e11",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a028b24_d0664279",
        "filename": "test/frame_size_tests.cc",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 22433
      },
      "writtenOn": "2021-03-02T09:08:26Z",
      "side": 1,
      "message": "We have removed the macro ONE_BY_ONE_VIDEO_NAME as it is never defined.",
      "parentUuid": "a9501788_140f3492",
      "revId": "b3db5e97facf694346579e7c71796af53ea41e11",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9244433c_6bd8060a",
        "filename": "test/frame_size_tests.cc",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-03-02T14:47:45Z",
      "side": 1,
      "message": "Thanks!",
      "parentUuid": "1a028b24_d0664279",
      "revId": "b3db5e97facf694346579e7c71796af53ea41e11",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a1c311c_634f95d2",
        "filename": "test/frame_size_tests.cc",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-03-02T02:31:19Z",
      "side": 1,
      "message": "Nit: Shorten these to \"width\" and \"height\"?",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 79,
        "endChar": 28
      },
      "revId": "b3db5e97facf694346579e7c71796af53ea41e11",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8d57279_ce231486",
        "filename": "test/frame_size_tests.cc",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 22433
      },
      "writtenOn": "2021-03-02T09:08:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1a1c311c_634f95d2",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 79,
        "endChar": 28
      },
      "revId": "b3db5e97facf694346579e7c71796af53ea41e11",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31b29fc9_d7b605c1",
        "filename": "test/frame_size_tests.cc",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-03-02T02:31:19Z",
      "side": 1,
      "message": "Nit: This could also be declared as \u0027const\u0027 because we never modify it after initialization.",
      "revId": "b3db5e97facf694346579e7c71796af53ea41e11",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c96d0e5a_5b4ea9aa",
        "filename": "test/frame_size_tests.cc",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 22433
      },
      "writtenOn": "2021-03-02T09:08:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "31b29fc9_d7b605c1",
      "revId": "b3db5e97facf694346579e7c71796af53ea41e11",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9ff7e270_bd02f7e0",
        "filename": "av1/encoder/speed_features.c",
        "patchSetId": 4
      },
      "lineNbr": 459,
      "author": {
        "id": 5022
      },
      "writtenOn": "2021-01-17T08:10:04Z",
      "side": 1,
      "message": "I would prefer not to enable this model based rd decision in speed 1. Instead stick with the proper rd estimate to avoid any surprise in later compound mode optimizations.\n\nThere are several experiments planned to address the compound mode search space, which should reduce the impact of using a real rd estimate over heuristic models.",
      "range": {
        "startLine": 459,
        "startChar": 17,
        "endLine": 459,
        "endChar": 49
      },
      "revId": "3cb3994b4af743f7021b25dad92ce60d0ad396e1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8de29af3_2f8ba948",
        "filename": "av1/encoder/speed_features.c",
        "patchSetId": 4
      },
      "lineNbr": 459,
      "author": {
        "id": 5185
      },
      "writtenOn": "2021-01-19T18:39:40Z",
      "side": 1,
      "message": "Hi Jingning, which part are you referring to? Here is current compound search loop. In speed 1, the optimization is moderate (i.e. cpi-\u003esf.inter_sf.enable_fast_compound_mode_search is 1).\n\n    if (cur_type \u003c COMPOUND_WEDGE) {\n      if (cpi-\u003esf.inter_sf.enable_fast_compound_mode_search \u003d\u003d 2) {\n        ......\n      } else {\n        ......\n      }\n    } else if (cur_type \u003d\u003d COMPOUND_WEDGE) {\n      ......\n    } else if (!cpi-\u003esf.inter_sf.enable_fast_compound_mode_search \u0026\u0026\n               cur_type \u003d\u003d COMPOUND_DIFFWTD) {\n      ......\n    } else {\n    // This is the optimized path while cpi-\u003esf.inter_sf.enable_fast_compound_mode_search is 1. And this is only for cur_type \u003d COMPOUND_DIFFWTD type, and won\u0027t affect any other compound type search. Is this the part you are talking about, right?\n    ......\n    }\n\nAlso, in this CL, not having this feature for speed 1 would bring 10% - 14% less encoder speedup. Currently, speed 0 \u0026 1 are quite slow (it takes very long to finish HD set borg run). This feature gives quite good speed/quality tradeoff, and no extreme quality loss seen for any file in borg results. Can we include this for now for fast speed purpose? Once your new changes come in, we can always move it to speed 2 that should be quite easy (1 line change). What do you think?",
      "parentUuid": "9ff7e270_bd02f7e0",
      "range": {
        "startLine": 459,
        "startChar": 17,
        "endLine": 459,
        "endChar": 49
      },
      "revId": "3cb3994b4af743f7021b25dad92ce60d0ad396e1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1aff5588_348a99f8",
        "filename": "av1/encoder/speed_features.c",
        "patchSetId": 4
      },
      "lineNbr": 459,
      "author": {
        "id": 5022
      },
      "writtenOn": "2021-01-20T20:25:00Z",
      "side": 1,
      "message": "I am somewhat concerned with the use of the last else{} group.\n\nWould that make use a different rd metric for diffwtd than the rest compound modes?",
      "parentUuid": "8de29af3_2f8ba948",
      "range": {
        "startLine": 459,
        "startChar": 17,
        "endLine": 459,
        "endChar": 49
      },
      "revId": "3cb3994b4af743f7021b25dad92ce60d0ad396e1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85b0ef35_9caab4a7",
        "filename": "av1/encoder/speed_features.c",
        "patchSetId": 4
      },
      "lineNbr": 459,
      "author": {
        "id": 5185
      },
      "writtenOn": "2021-01-21T01:22:50Z",
      "side": 1,
      "message": "I checked the code. The last else{} calls masked_compound_type_rd(), which uses estimate_yrd_for_sb(). So rd calculation is the same as other compound modes. The main difference I can see is that existing best rd is used to prune the evaluation (i.e. calling of masked_compound_type_rd()). Do you see the same?\n\nBy the way, while you modified masked compound mode search (wedge and diffwtd), did you work based on masked_compound_type_rd()?",
      "parentUuid": "1aff5588_348a99f8",
      "range": {
        "startLine": 459,
        "startChar": 17,
        "endLine": 459,
        "endChar": 49
      },
      "revId": "3cb3994b4af743f7021b25dad92ce60d0ad396e1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4d60420_b189c5c8",
        "filename": "av1/encoder/speed_features.c",
        "patchSetId": 4
      },
      "lineNbr": 459,
      "author": {
        "id": 5022
      },
      "writtenOn": "2021-01-21T02:25:44Z",
      "side": 1,
      "message": "I tried to avoid the use of masked_compound_type_rd() as its search process had some issues.\n\nI would prefer to just disable the diffwtd mode altogether than calling different rd cost functions. Therefore we won\u0027t trap ourselves when working on new search approaches.",
      "parentUuid": "85b0ef35_9caab4a7",
      "range": {
        "startLine": 459,
        "startChar": 17,
        "endLine": 459,
        "endChar": 49
      },
      "revId": "3cb3994b4af743f7021b25dad92ce60d0ad396e1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d3c6533d_47267cb5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 25857
      },
      "writtenOn": "2023-02-02T12:45:47Z",
      "side": 1,
      "message": "Hi Wan-Teh,\n\nWe have taken care of your comments in the latest patch-set. Please review.\n\nRegards,\nMudassir",
      "revId": "7f678b6acfdc4414bcd51a533f4302bb289a0698",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12f69405_53e62711",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-02-02T15:09:58Z",
      "side": 1,
      "message": "LGTM.",
      "revId": "7f678b6acfdc4414bcd51a533f4302bb289a0698",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "947b595d_59744758",
        "filename": "av1/encoder/nonrd_pickmode.c",
        "patchSetId": 6
      },
      "lineNbr": 2282,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-02-02T15:09:58Z",
      "side": 1,
      "message": "Could you explain why the value of `mi-\u003etx_size` here must be equal to the the value of `tx_size` in `av1_foreach_transformed_block_in_plane()`?\n\nIn `av1_foreach_transformed_block_in_plane()`, `tx_size` is defined as follows:\n\n```\n  // transform size varies per plane, look it up in a common way.\n  const TX_SIZE tx_size \u003d av1_get_tx_size(plane, xd);\n```\n\nIn this case `plane` is `AOM_PLANE_Y` (0). `av1_get_tx_size()` is defined as follows:\n\n```\n1385 static INLINE TX_SIZE av1_get_tx_size(int plane, const MACROBLOCKD *xd) {\n1386   const MB_MODE_INFO *mbmi \u003d xd-\u003emi[0];\n1387   if (xd-\u003elossless[mbmi-\u003esegment_id]) return TX_4X4;\n1388   if (plane \u003d\u003d 0) return mbmi-\u003etx_size;\n1389   const MACROBLOCKD_PLANE *pd \u003d \u0026xd-\u003eplane[plane];\n1390   return av1_get_max_uv_txsize(mbmi-\u003ebsize, pd-\u003esubsampling_x,\n1391                                pd-\u003esubsampling_y);\n1392 }\n```\n\nSo we are relying on `av1_get_tx_size()` returning from line 1388, i.e., we assume `xd-\u003elossless[mbmi-\u003esegment_id]` is false. Why can we assume that?\n\nShould we add the following here (before line 2282)?\n```\n  if (xd-\u003elossless[mi-\u003esegment_id]) mi-\u003etx_size \u003d TX_4X4;\n```\n\nOr assert it\u0027s false?\n\n```\n  assert(!xd-\u003elossless[mi-\u003esegment_id]);\n```",
      "revId": "7f678b6acfdc4414bcd51a533f4302bb289a0698",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "7f678b6acfdc4414bcd51a533f4302bb289a0698",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "7f678b6acfdc4414bcd51a533f4302bb289a0698",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "7f678b6acfdc4414bcd51a533f4302bb289a0698",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3d02bebe_063ddf4d",
        "filename": "av1/encoder/x86/pickrst_avx2.c",
        "patchSetId": 1
      },
      "lineNbr": 792,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-02-13T18:44:13Z",
      "side": 1,
      "message": "there\u0027s also `SGRPROJ_SGR`, but either is ok",
      "range": {
        "startLine": 792,
        "startChar": 53,
        "endLine": 792,
        "endChar": 69
      },
      "revId": "b05b1e8e61c681f28b67a8e16b83fd662ea98a44",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d5d1957_fab55aeb",
        "filename": "av1/encoder/x86/pickrst_avx2.c",
        "patchSetId": 1
      },
      "lineNbr": 792,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-02-13T21:11:25Z",
      "side": 1,
      "message": "Thanks for the suggestion. We can\u0027t use `SGRPROJ_SGR` here because it is not equal to `(1 \u003c\u003c SGRPROJ_RST_BITS)`.\n\nHere are the four relevant macro definitions in av1/common/restoration.h:\n```\n// Precision bits for projection\n#define SGRPROJ_PRJ_BITS 7\n// Restoration precision bits generated higher than source before projection\n#define SGRPROJ_RST_BITS 4\n// Internal precision bits for core selfguided_restoration\n#define SGRPROJ_SGR_BITS 8\n#define SGRPROJ_SGR (1 \u003c\u003c SGRPROJ_SGR_BITS)\n```",
      "parentUuid": "3d02bebe_063ddf4d",
      "range": {
        "startLine": 792,
        "startChar": 53,
        "endLine": 792,
        "endChar": 69
      },
      "revId": "b05b1e8e61c681f28b67a8e16b83fd662ea98a44",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4bbecb4d_7a099f07",
        "filename": "av1/encoder/x86/pickrst_avx2.c",
        "patchSetId": 1
      },
      "lineNbr": 792,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-02-13T21:23:30Z",
      "side": 1,
      "message": "\u003e Thanks for the suggestion. We can\u0027t use `SGRPROJ_SGR` here because it is not equal to `(1 \u003c\u003c SGRPROJ_RST_BITS)`.\n\u003e \n\u003e Here are the four relevant macro definitions in av1/common/restoration.h:\n\u003e ```\n\u003e // Precision bits for projection\n\u003e #define SGRPROJ_PRJ_BITS 7\n\u003e // Restoration precision bits generated higher than source before projection\n\u003e #define SGRPROJ_RST_BITS 4\n\u003e // Internal precision bits for core selfguided_restoration\n\u003e #define SGRPROJ_SGR_BITS 8\n\u003e #define SGRPROJ_SGR (1 \u003c\u003c SGRPROJ_SGR_BITS)\n\u003e ```\n\nSorry about that, I scanned the names a little too quickly.",
      "parentUuid": "7d5d1957_fab55aeb",
      "range": {
        "startLine": 792,
        "startChar": 53,
        "endLine": 792,
        "endChar": 69
      },
      "revId": "b05b1e8e61c681f28b67a8e16b83fd662ea98a44",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4e15f4f_e90303ca",
        "filename": "av1/encoder/x86/pickrst_sse4.c",
        "patchSetId": 1
      },
      "lineNbr": 783,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-02-13T18:44:13Z",
      "side": 1,
      "message": "is xq_active always negative or can it vary?",
      "range": {
        "startLine": 783,
        "startChar": 35,
        "endLine": 783,
        "endChar": 44
      },
      "revId": "b05b1e8e61c681f28b67a8e16b83fd662ea98a44",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf098302_95c77a0b",
        "filename": "av1/encoder/x86/pickrst_sse4.c",
        "patchSetId": 1
      },
      "lineNbr": 783,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-02-13T21:11:25Z",
      "side": 1,
      "message": "Apparently `xq_active` is usually positive or zero. That\u0027s why we only see the undefined behavior in pickrst_neon.c in the `CodingPathSync.SearchForHbdLbdMismatch` test, where `xq_active` is -53.\n\nNote: I also wondered whether it is an error if `xq_active` is negative. I looked at the code briefly. `xq` is decoded from `xqd`. It seems that under some conditions `xq` can be negative. I can ask Debargha about this. He seems to be the original author of this code: https://aomedia-review.googlesource.com/c/aom/+/5594\n\nSearch for \"decode_xq\" in av1/encoder/pickrst.c in that CL.",
      "parentUuid": "c4e15f4f_e90303ca",
      "range": {
        "startLine": 783,
        "startChar": 35,
        "endLine": 783,
        "endChar": 44
      },
      "revId": "b05b1e8e61c681f28b67a8e16b83fd662ea98a44",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "092f6362_a432cfb7",
        "filename": "av1/encoder/x86/pickrst_sse4.c",
        "patchSetId": 1
      },
      "lineNbr": 783,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-02-13T21:43:56Z",
      "side": 1,
      "message": "I just did an experiment. I added a line to print `xq_active` after it is initialized:\n\n```\ndiff --git a/av1/encoder/x86/pickrst_sse4.c b/av1/encoder/x86/pickrst_sse4.c\nindex be132ea65..3657b4f79 100644\n--- a/av1/encoder/x86/pickrst_sse4.c\n+++ b/av1/encoder/x86/pickrst_sse4.c\n@@ -780,6 +780,7 @@ int64_t av1_lowbd_pixel_proj_error_sse4_1(\n     }\n   } else if (params-\u003er[0] \u003e 0 || params-\u003er[1] \u003e 0) {\n     const int xq_active \u003d (params-\u003er[0] \u003e 0) ? xq[0] : xq[1];\n+    fprintf(stderr, \"xq_active\u003d%d\\n\", xq_active);\n     const __m128i xq_coeff \u003d\n         pair_set_epi16(xq_active, -xq_active * (1 \u003c\u003c SGRPROJ_RST_BITS));\n     const int32_t *flt \u003d (params-\u003er[0] \u003e 0) ? flt0 : flt1;\n```\n\nI then ran the CodingPathSync.SearchForHbdLbdMismatch test with `AOM_SIMD_CAPS_MASK` set to sse4_1:\n\n```\nexport AOM_SIMD_CAPS_MASK\u003d0x3f\n./test_libaom --gtest_filter\u003dCodingPathSync.SearchForHbdLbdMismatch\n```\n\nThe first few lines of the output are pasted below. It shows -53 is merely the first negative value the test hits. I guess UBSan only reports the first instance of each error. Negative values of `xq_active` are also observed in the `CodingPathSyncLarge.SearchForHbdLbdMismatchLarge` test.\n\n```\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] Running 1 test from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 1 test from CodingPathSync\n[ RUN      ] CodingPathSync.SearchForHbdLbdMismatch\nxq_active\u003d160\nxq_active\u003d158\nxq_active\u003d156\nxq_active\u003d154\nxq_active\u003d152\nxq_active\u003d155\nxq_active\u003d148\nxq_active\u003d150\nxq_active\u003d152\nxq_active\u003d154\nxq_active\u003d156\nxq_active\u003d158\nxq_active\u003d160\nxq_active\u003d159\nxq_active\u003d104\nxq_active\u003d106\nxq_active\u003d108\nxq_active\u003d110\nxq_active\u003d112\nxq_active\u003d114\nxq_active\u003d113\nxq_active\u003d77\nxq_active\u003d79\nxq_active\u003d75\nxq_active\u003d73\nxq_active\u003d71\nxq_active\u003d69\nxq_active\u003d67\nxq_active\u003d65\nxq_active\u003d63\nxq_active\u003d61\nxq_active\u003d59\nxq_active\u003d57\nxq_active\u003d55\nxq_active\u003d53\nxq_active\u003d56\nxq_active\u003d-53\nxq_active\u003d-55\nxq_active\u003d-57\nxq_active\u003d-59\nxq_active\u003d-58\nxq_active\u003d-56\nxq_active\u003d-32\nxq_active\u003d-34\nxq_active\u003d-36\nxq_active\u003d-38\nxq_active\u003d-40\nxq_active\u003d-42\nxq_active\u003d-44\nxq_active\u003d-46\nxq_active\u003d-48\nxq_active\u003d-50\nxq_active\u003d-49\nxq_active\u003d160\nxq_active\u003d158\nxq_active\u003d156\nxq_active\u003d154\nxq_active\u003d152\nxq_active\u003d155\nxq_active\u003d160\nxq_active\u003d158\nxq_active\u003d156\n...\n```",
      "parentUuid": "cf098302_95c77a0b",
      "range": {
        "startLine": 783,
        "startChar": 35,
        "endLine": 783,
        "endChar": 44
      },
      "revId": "b05b1e8e61c681f28b67a8e16b83fd662ea98a44",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "b05b1e8e61c681f28b67a8e16b83fd662ea98a44",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "b05b1e8e61c681f28b67a8e16b83fd662ea98a44",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "b05b1e8e61c681f28b67a8e16b83fd662ea98a44",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
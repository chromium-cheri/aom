{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d00311ee_cad77eed",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 11,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-12-06T03:34:04Z",
      "side": 1,
      "message": "I suggest adding this paragraph to the source code as a comment.",
      "revId": "82a63318a36c436ffbc57ebfd2b079fccd9b9a89",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8f9c9b5_9ebcf7c1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-12-06T03:34:04Z",
      "side": 1,
      "message": "LGTM.",
      "revId": "82a63318a36c436ffbc57ebfd2b079fccd9b9a89",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74909d49_26acec9a",
        "filename": "av1/encoder/k_means_template.h",
        "patchSetId": 5
      },
      "lineNbr": 14,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-12-06T03:34:04Z",
      "side": 1,
      "message": "Nit: Include \u003cstdlib.h\u003e for abs().",
      "revId": "82a63318a36c436ffbc57ebfd2b079fccd9b9a89",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e14b9f8a_5a6041b8",
        "filename": "av1/encoder/k_means_template.h",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-12-06T03:34:04Z",
      "side": 1,
      "message": "Should we test `!\u003d 1` to be more general (in case we support dim \u003d\u003d 3 in the future)?\n\nAlso, we may be able to do something like this:\n\n```\nstatic int RENAME(calc_dist)(const int *p1, const int *p2) {\n#if AV1_K_MEANS_DIM \u003d\u003d 1\n  return abs(p1[0] - p2[0]);\n#else\n  int dist \u003d 0;\n  for (int i \u003d 0; i \u003c AV1_K_MEANS_DIM; ++i) {\n    const int diff \u003d p1[i] - p2[i];\n    dist +\u003d diff * diff;\n  }\n  return dist;\n#endif\n}\n```\n\nThis should allow us to avoid the #if at line 44 and line 51.",
      "revId": "82a63318a36c436ffbc57ebfd2b079fccd9b9a89",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fa31c70_872dde7b",
        "filename": "av1/encoder/k_means_template.h",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-12-06T03:34:04Z",
      "side": 1,
      "message": "Should we use `#if AV1_K_MEANS_DIM \u003d\u003d 1` (and swap the two branches) in this function?",
      "revId": "82a63318a36c436ffbc57ebfd2b079fccd9b9a89",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
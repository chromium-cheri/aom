/*
 * Copyright (c) 2016, Alliance for Open Media. All rights reserved
 *
 * This source code is subject to the terms of the BSD 2 Clause License and
 * the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License
 * was not distributed with this source code in the LICENSE file, you can
 * obtain it at www.aomedia.org/license/software. If the Alliance for Open
 * Media Patent License 1.0 was not distributed with this source code in the
 * PATENTS file, you can obtain it at www.aomedia.org/license/patent.
 */

#ifndef AOM_AV1_COMMON_IDCT_H_
#define AOM_AV1_COMMON_IDCT_H_

#include "config/aom_config.h"

#include "av1/common/blockd.h"
#include "av1/common/common.h"
#include "av1/common/enums.h"
#include "aom_dsp/txfm_common.h"

#ifdef __cplusplus
extern "C" {
#endif

typedef void (*transform_1d)(const tran_low_t *, tran_low_t *);

typedef struct {
  transform_1d cols, rows;  // vertical and horizontal
} transform_2d;

#define MAX_TX_SCALE 1
int av1_get_tx_scale(const TX_SIZE tx_size);

void av1_inverse_transform_block(const MACROBLOCKD *xd,
                                 const tran_low_t *dqcoeff, int plane,
                                 TX_TYPE tx_type, TX_SIZE tx_size, uint8_t *dst,
                                 int stride, int eob, int reduced_tx_set);
void av1_highbd_iwht4x4_add(const tran_low_t *input, uint8_t *dest, int stride,
                            int eob, int bd);

static INLINE const int32_t *cast_to_int32(const tran_low_t *input) {
  assert(sizeof(int32_t) == sizeof(tran_low_t));
  return (const int32_t *)input;
}

#if CONFIG_VQ4X4
#define NUM_GAINS 64
#define NUM_CODEWORDS 64
#define VQ_DEBUG 0
#define VQ_BS_DEBUG 0
// TODO(kslu): refine the entropy coding of gain
#define VQ_GAIN_BITS 8

// codeword4x4[i] = The i-th unit-norm codeword * 2^8
static const int32_t codeword4x4[NUM_CODEWORDS][16] = {
  { 50, 63, 62, 55, 60, 73, 71, 64,
    58, 71, 69, 65, 56, 70, 69, 63},
  { -4, 2, 23, 42, 14, 37, 66, 82,
    40, 72, 90, 96, 53, 82, 91, 94},
  { 15, 51, 65, 52, 17, 65, 89, 80,
    8, 56, 90, 90, 0, 44, 84, 92},
  { 10, 11, 10, 7, 36, 34, 30, 28,
    82, 80, 69, 67, 104, 105, 93, 90},
  { 72, 95, 95, 89, 69, 90, 89, 87,
    30, 38, 37, 39, 11, 13, 13, 15},
  { 18, 26, 69, 112, 20, 24, 67, 122,
    20, 21, 55, 104, 21, 24, 52, 92},
  { 62, 75, 27, -1, 83, 99, 33, -4,
    87, 100, 34, -2, 88, 99, 37, 2},
  { 4, -2, -6, 5, -6, -6, 18, 51,
    -5, 32, 95, 116, 24, 89, 132, 114},
  { 3, 3, 7, 16, 7, 1, 30, 77,
    8, -4, 61, 149, 5, -2, 74, 163},
  { 0, 0, -1, -2, -9, -15, -17, -13,
    15, 18, 23, 33, 94, 130, 135, 137},
  { 67, 34, 26, 49, 93, 46, 34, 67,
    101, 51, 37, 73, 101, 58, 43, 74},
  { 41, 32, -1, -17, 65, 81, 38, 2,
    51, 102, 92, 51, 23, 78, 108, 88},
  { -23, -3, 53, 63, -38, -8, 82, 95,
    -46, -10, 92, 101, -43, -6, 90, 100},
  { 6, -9, -1, 98, 6, -13, -5, 136,
    6, -12, -8, 137, 6, -9, -4, 135},
  { 92, 26, -10, 2, 134, 35, -15, 2,
    139, 34, -16, 3, 122, 33, -12, 4},
  { 13, 14, 14, 17, 80, 105, 96, 85,
    75, 97, 91, 83, 8, 7, 10, 17},
  { -17, 38, 73, 11, -26, 59, 113, 18,
    -27, 68, 126, 22, -20, 65, 119, 26},
  { -43, -49, 9, 53, -61, -76, 15, 81,
    -68, -86, 16, 94, -67, -85, 16, 94},
  { -33, -54, -62, -57, -5, -13, -20, -17,
    66, 88, 87, 82, 66, 86, 88, 88},
  { -49, -71, -79, -82, -55, -80, -86, -81,
    -1, 5, 14, 16, 39, 66, 86, 89},
  { 98, 130, 132, 128, 25, 27, 25, 30,
    -16, -25, -27, -24, -4, -6, -6, -3},
  { -3, 15, 65, 94, 6, 50, 126, 147,
    15, 46, 73, 63, 4, 10, 0, -18},
  { -15, 10, 49, 46, 7, 61, 85, 51,
    64, 112, 78, 20, 97, 111, 46, -5},
  { 3, 81, 33, -16, -2, 118, 50, -26,
    -7, 131, 58, -30, -4, 124, 55, -29},
  { -12, -9, -2, -3, 48, 16, -10, -5,
    156, 72, -22, -9, 157, 86, -22, -13},
  { 0, -5, -14, -18, 11, 16, -4, -25,
    3, 43, 89, 69, -19, 22, 142, 169},
  { 0, 1, 1, 2, 1, -5, -16, -17,
    -6, -10, -12, -6, -7, 66, 175, 172},
  { 64, 90, 95, 88, 18, 26, 32, 39,
    11, 17, 23, 34, 61, 85, 98, 102},
  { -16, -28, -36, -32, 13, 28, 50, 57,
    45, 94, 145, 148, 13, 21, 22, 22},
  { -5, -6, -2, 0, -9, -16, -10, -3,
    45, 49, 8, -11, 121, 196, 85, -2},
  { 0, 0, 3, 1, 0, 5, -6, -32,
    -5, -8, -26, -23, -10, -31, 36, 246},
  { -12, 31, 153, 195, 8, 12, 24, 41,
    6, 5, 0, -1, 4, 7, 11, 13},
  { -8, -23, 43, 168, -9, -31, 12, 171,
    -4, -13, -30, 2, -3, -4, -23, -52},
  { 61, -23, -16, -13, 117, -36, -29, -19,
    148, -45, -38, -25, 119, -47, -39, -27},
  { 12, 17, 16, 14, -36, -57, -62, -55,
    -47, -73, -80, -68, 62, 102, 109, 92},
  { 67, 61, -1, -22, 39, 107, 69, -6,
    -20, 40, 118, 74, -20, -23, 55, 117},
  { -3, 3, -5, -31, -1, 3, -16, -2,
    7, -9, -24, 137, 12, -19, -13, 210},
  { 5, -27, -19, 6, 78, 37, -20, -10,
    110, 152, 30, -26, 24, 115, 76, -4},
  { 124, 80, -10, -6, 177, 91, -16, -2,
    50, 24, 1, 8, -13, -3, 10, 8},
  { 16, 76, 54, -4, 101, 177, 69, -27,
    59, 65, 7, -23, -7, -26, -23, -11},
  { -18, 17, 79, 74, -44, -32, 78, 126,
    -43, -77, -11, 87, -31, -77, -76, 0},
  { -3, -9, -6, 4, -7, -13, -2, -1,
    -17, 51, 72, -8, -27, 149, 184, -18},
  { 82, 98, 17, -40, 96, 73, -32, -75,
    14, -31, -71, -72, -40, -71, -69, -59},
  { -8, -24, -49, -40, -27, -66, -65, -5,
    -55, -83, 3, 97, -54, -33, 91, 141},
  { 55, 103, 137, 123, -43, -67, -76, -69,
    -8, -15, -20, -21, 0, 1, 2, 3},
  { -1, 2, 0, 0, -35, -20, 1, 6,
    4, -11, -19, -5, 207, 136, -31, -29},
  { 105, 207, 96, -27, 10, 24, 10, -3,
    -15, -20, -9, 1, -1, 1, 2, 2},
  { 50, 65, 68, 60, -13, -21, -25, -21,
    87, 119, 123, 107, -3, -12, -16, -13},
  { -54, -68, -49, -31, -41, -86, -87, -63,
    51, 17, -57, -75, 89, 111, 26, -40},
  { 48, -23, -35, 49, 79, -33, -57, 74,
    95, -34, -70, 88, 93, -24, -63, 85},
  { 30, 84, 52, -21, -14, 48, 131, 86,
    -9, -19, 59, 145, 14, -7, -21, 39},
  { -30, -3, 1, -3, -29, -13, 2, -1,
    76, -33, -7, 8, 233, -39, -30, 16},
  { 2, -1, -6, -1, 63, 116, 160, 145,
    -10, -14, -13, -7, -8, -12, -20, -22},
  { -28, 95, 174, 65, -30, 40, 114, 68,
    -16, -12, 0, -2, -7, -11, -15, -17},
  { 11, 15, 67, -49, 15, 25, 99, -78,
    18, 27, 112, -88, 19, 25, 110, -85},
  { -30, -39, 70, -1, -42, -59, 101, 1,
    -47, -69, 120, 9, -48, -69, 119, 9},
  { -12, -48, 13, 241, 0, -7, -38, -16,
    -2, 0, -14, -51, -3, -5, -2, -6},
  { 0, -7, -8, 19, 3, -20, 25, 202,
    5, -8, 16, 149, -1, 1, -10, -22},
  { -12, -17, -14, -7, 67, 88, 96, 93,
    -21, -28, -28, -19, 69, 89, 99, 100},
  { 233, 85, -40, -21, -15, -19, -8, 0,
    -31, -12, 0, -1, 2, 3, -2, -3},
  { -44, 49, -31, -15, -73, 78, -43, -23,
    -93, 99, -56, -33, -94, 101, -58, -33},
  { 179, -44, -27, 22, 154, -49, -11, 18,
    5, -28, 5, 3, -53, -6, 6, -3},
  { -30, -62, -88, -81, 9, 12, -17, -53,
    0, 41, 121, 141, -46, -59, -14, 36},
  { 6, 0, -12, -14, -34, -28, 13, 29,
    150, 112, -9, -57, -111, -74, 33, 71},
};

void av1_vec_dequant(const MACROBLOCKD *xd, int plane, int blk_row, int blk_col,
                     uint8_t *dst, int stride, TX_SIZE tx_size);
#endif  // CONFIG_VQ4X4

#ifdef __cplusplus
}  // extern "C"
#endif

#endif  // AOM_AV1_COMMON_IDCT_H_

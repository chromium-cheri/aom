{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "48b77a79_6606a52b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 9611
      },
      "writtenOn": "2021-10-26T11:42:02Z",
      "side": 1,
      "message": "Hi Wan-Teh,\n\nWe have modified the comments as per your suggestion and rebased the patch to latest to avoid gerrit build failure.\n\nAnd also, for gerrit build on patchset 5 we saw “Code-Review-1” (non-blocking) for style-check due to comment change in block.h (line number: 478). As the build is successful, we submitted the patch for review.\n\nWe also performed some sanity verification on the latest patch-set.\n\nPlease review the patch.\n\nThanks \u0026 Regards,\nVenkata",
      "revId": "4dad14a7ee4e9d9799ad1bbd9572d1f77163819d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c044084a_d2350ecd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-10-26T14:31:58Z",
      "side": 1,
      "message": "\u003e And also, for gerrit build on patchset 5 we saw “Code-Review-1” (non-blocking) for style-check due to comment change in block.h (line number: 478).\n\nThis is caused by the old version of cpplint.py in aom/tools/cpplint.py. If we search for \"Doxygen\" in that file, we find the following:\n\n      # There should always be a space between the // and the comment\n      commentend \u003d commentpos + 2\n      if commentend \u003c len(line) and not line[commentend] \u003d\u003d \u0027 \u0027:\n        # but some lines are exceptions -- e.g. if they\u0027re big\n        # comment delimiters like:\n        # //----------------------------------------------------------\n        # or are an empty C++ style Doxygen comment, like:\n        # ///\n        # or C++ style Doxygen comments placed after the variable:\n        # ///\u003c  Header comment\n        # //!\u003c  Header comment\n        # or they begin with multiple slashes followed by a space:\n        # //////// Header comment\n        match \u003d (Search(r\u0027[\u003d/-]{4,}\\s*$\u0027, line[commentend:]) or\n                 Search(r\u0027^/$\u0027, line[commentend:]) or\n                 Search(r\u0027^!\u003c \u0027, line[commentend:]) or\n                 Search(r\u0027^/\u003c \u0027, line[commentend:]) or\n                 Search(r\u0027^/+ \u0027, line[commentend:]))\n        if not match:\n          error(filename, linenum, \u0027whitespace/comments\u0027, 4,\n                \u0027Should have a space between // and comment\u0027)\n      CheckComment(line[commentpos:], filename, linenum, error)\n\nComparing with the current version of cpplint.py at https://github.com/google/styleguide/blob/gh-pages/cpplint/cpplint.py, we see that the current version allows /// and //!:\n\n      # If the comment contains an alphanumeric character, there\n      # should be a space somewhere between it and the // unless\n      # it\u0027s a /// or //! Doxygen comment.\n      if (Match(r\u0027//[^ ]*\\w\u0027, comment) and\n          not Match(r\u0027(///|//\\!)(\\s+|$)\u0027, comment)):\n        error(filename, linenum, \u0027whitespace/comments\u0027, 4,\n              \u0027Should have a space between // and comment\u0027)",
      "parentUuid": "48b77a79_6606a52b",
      "revId": "4dad14a7ee4e9d9799ad1bbd9572d1f77163819d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
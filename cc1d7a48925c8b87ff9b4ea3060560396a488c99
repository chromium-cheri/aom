{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "28eba9c0_bc053718",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 9616
      },
      "writtenOn": "2023-11-08T17:03:56Z",
      "side": 1,
      "message": "In this CL, a `longjmp` target has been introduced in `cal_mb_wiener_var_hook()` to facilitate the error propagation in case of row multithreading of wiener variance. A flag `mb_wiener_mt_exit ` is introduced in the structure `AV1EncRowMultiThreadInfo` which will be set to true in case a thread encounters an error. The other threads will terminate their jobs by checking the status of this flag.\n\nIn case of wiener variance multithreading, every worker in a row waits for the completion of top-right blocks (BLOCK_64X64). If one of the threads encounters an error, `set_mb_wiener_var_calc_done()` is invoked before returning from the hook function to avoid dependent workers from waiting indefinitely in `av1_calc_mb_wiener_var_row()`. \n\nThe `intra_sync_write_ptr()` call in `av1_calc_mb_wiener_var_row()` is also done conditionally based on `mb_wiener_mt_exit` flag to avoid overwriting the update done by `set_mb_wiener_var_calc_done()`. This conditional call of `sync_write()` would be required for other MT modules as well. We shall study and submit a separate CL addressing the same.\n\nThis CL has been validated on all unit-tests with sanitizers (address and thread) and valgrind.",
      "revId": "cc1d7a48925c8b87ff9b4ea3060560396a488c99",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b6c96c7_20079505",
        "filename": "av1/encoder/allintra_vis.c",
        "patchSetId": 7
      },
      "lineNbr": 278,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-11-09T03:16:59Z",
      "side": 1,
      "message": "Nit: Use the `mt_info` variable.",
      "revId": "cc1d7a48925c8b87ff9b4ea3060560396a488c99",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1dcab529_31d827b6",
        "filename": "av1/encoder/allintra_vis.c",
        "patchSetId": 7
      },
      "lineNbr": 282,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-11-09T03:16:59Z",
      "side": 1,
      "message": "Nit/optional: This variable is a local variable, so we can omit the \"mb_wiener_mt\" part.",
      "revId": "cc1d7a48925c8b87ff9b4ea3060560396a488c99",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a617118b_5a49c30a",
        "filename": "av1/encoder/allintra_vis.c",
        "patchSetId": 7
      },
      "lineNbr": 310,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-11-08T20:11:09Z",
      "side": 1,
      "message": "I don\u0027t see a deallocation. Do you mean this is a local variable or is this cleaned up elsewhere?",
      "revId": "cc1d7a48925c8b87ff9b4ea3060560396a488c99",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec46415c_e8b96c45",
        "filename": "av1/encoder/allintra_vis.c",
        "patchSetId": 7
      },
      "lineNbr": 310,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-11-09T03:16:59Z",
      "side": 1,
      "message": "I don\u0027t remember the meaning of this, but these two lines are a copy of lines 482-483 at the end of the function. We can consider goto line 482 to avoid duplicating the cleanup code before returning from this function.",
      "parentUuid": "a617118b_5a49c30a",
      "revId": "cc1d7a48925c8b87ff9b4ea3060560396a488c99",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fa586ca_3cb71ba5",
        "filename": "av1/encoder/allintra_vis.c",
        "patchSetId": 7
      },
      "lineNbr": 310,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-11-09T16:55:50Z",
      "side": 1,
      "message": "I found that we are at the first level of this nested loop, so we can simply use a `break` statement to exit the loop. We will end up at line 482. No need to use a `goto` statement.",
      "parentUuid": "ec46415c_e8b96c45",
      "revId": "cc1d7a48925c8b87ff9b4ea3060560396a488c99",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45045160_d432ba6a",
        "filename": "av1/encoder/allintra_vis.c",
        "patchSetId": 7
      },
      "lineNbr": 463,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-11-09T03:16:59Z",
      "side": 1,
      "message": "IMPORTANT: I believe the coordination you intended here may fail. I will label the four important events as A, B, C, D.\n\nSuppose the events occur in the following order in time:\n\n  A\n  C\n  D\n  B\n\nIn event A, this thread sees `enc_row_mt-\u003emb_wiener_mt_exit` is false.\nIn event C, the other thread sets `enc_row_mt-\u003emb_wiener_mt_exit` to true.\nIn event D, the other thread calls sync_write.\nIn event B, this thread calls sync_write, overwriting the sync_write of event D.\n\nOne way to make the coordination work is: events A and B must occur atomically, and events C and D must occur atomically.\n\nIn the current code, events A and B use different mutexes, so it\u0027s not clear how to make them occur atomically.\n\nAnother way to make the coordination work might be to modify the sync_write function so that it never decreases `row_mt_sync-\u003enum_finished_cols[r]`.",
      "revId": "cc1d7a48925c8b87ff9b4ea3060560396a488c99",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d1789a7_55469ca8",
        "filename": "av1/encoder/allintra_vis.c",
        "patchSetId": 7
      },
      "lineNbr": 463,
      "author": {
        "id": 6585
      },
      "writtenOn": "2023-11-09T06:49:11Z",
      "side": 1,
      "message": "The analysis is important.\nI found similar designs in other row mt multithreading use cases too, for example, fp_enc_row_mt.\nDo they all have similar problems?",
      "parentUuid": "45045160_d432ba6a",
      "revId": "cc1d7a48925c8b87ff9b4ea3060560396a488c99",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42d5347b_cedbdef0",
        "filename": "av1/encoder/allintra_vis.c",
        "patchSetId": 7
      },
      "lineNbr": 463,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-11-09T16:45:55Z",
      "side": 1,
      "message": "I didn\u0027t check the other row mt multithreading use cases. But if they use similar designs, they should have similar problems.\n\nHere is another way to see why the use of `mb_wiener_mt_exit` at line 475 is problematic: we intend to check if `enc_row_mt-\u003emb_wiener_mt_exit` is false, but since we have already released `enc_row_mt-\u003emutex_`, `enc_row_mt-\u003emb_wiener_mt_exit` may have become true when we reach line 475, so our snapshot `mb_wiener_mt_exit` is already stale.\n\nOn the other hand, the use of `mb_wiener_mt_exit` at line 309 is correct. The reason is that once `enc_row_mt-\u003emb_wiener_mt_exit` becomes true, it stays true. So if our snapshot `mb_wiener_mt_exit` is true, we know `enc_row_mt-\u003emb_wiener_mt_exit` is still true. If our snapshot `mb_wiener_mt_exit` is false, we keep going even though `enc_row_mt-\u003emb_wiener_mt_exit` may have become true after we released `enc_row_mt-\u003emutex_`. I think that is okay; this worker thread will still discover that `enc_row_mt-\u003emb_wiener_mt_exit` is true the next time it reaches line 306.",
      "parentUuid": "8d1789a7_55469ca8",
      "revId": "cc1d7a48925c8b87ff9b4ea3060560396a488c99",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ddda0f6_2949c367",
        "filename": "av1/encoder/allintra_vis.c",
        "patchSetId": 7
      },
      "lineNbr": 468,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-11-09T03:16:59Z",
      "side": 1,
      "message": "This is event A.",
      "revId": "cc1d7a48925c8b87ff9b4ea3060560396a488c99",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b79f21de_c8c7a12d",
        "filename": "av1/encoder/allintra_vis.c",
        "patchSetId": 7
      },
      "lineNbr": 471,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-11-08T20:11:09Z",
      "side": 1,
      "message": "flag",
      "range": {
        "startLine": 471,
        "startChar": 60,
        "endLine": 471,
        "endChar": 64
      },
      "revId": "cc1d7a48925c8b87ff9b4ea3060560396a488c99",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6696a7c5_85a2b1c6",
        "filename": "av1/encoder/allintra_vis.c",
        "patchSetId": 7
      },
      "lineNbr": 477,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-11-09T03:16:59Z",
      "side": 1,
      "message": "This is event B.\n\nPlease see av1/encoder/ethread.c for event C and event D.",
      "revId": "cc1d7a48925c8b87ff9b4ea3060560396a488c99",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6d020a9_f49e4dc9",
        "filename": "av1/encoder/allintra_vis.c",
        "patchSetId": 7
      },
      "lineNbr": 483,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-11-09T16:55:50Z",
      "side": 1,
      "message": "Cheng: Could you please clarify this comment (line 482)? James doesn\u0027t understand it, and I also forgot what it means. I can\u0027t find where this function allocates `mbmi`, and it\u0027s not clear how `mbmi` is related to `xd-\u003emi`. Thanks!\n\nI seem to remember this function sets `xd-\u003emi` to the address of a local variable, which becomes an invalid pointer after this function returns. Perhaps we can add a comment to indicate where this function does that.",
      "revId": "cc1d7a48925c8b87ff9b4ea3060560396a488c99",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "91fc5db5_66dca6a7",
        "filename": "av1/encoder/allintra_vis.c",
        "patchSetId": 7
      },
      "lineNbr": 483,
      "author": {
        "id": 6585
      },
      "writtenOn": "2023-11-09T17:08:37Z",
      "side": 1,
      "message": "xd-\u003emi is a pointer to pointer (**).\nIt is used to point to the mbmi memory which is separately allocated in the normal frame coding.\nHere, we only need a mbmi structure, not a large memory of frame size.\nThis mbmi is declared at the top of the function, line 263-265.\n\nAnd note that xd-\u003emi will be set at the beginning of coding a block by set offset functions. So, whether set it to NULL on line 483 does not affect the normal coding.",
      "parentUuid": "d6d020a9_f49e4dc9",
      "revId": "cc1d7a48925c8b87ff9b4ea3060560396a488c99",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55a564b2_d656bd39",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 7
      },
      "lineNbr": 2746,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-11-09T03:16:59Z",
      "side": 1,
      "message": "This is event C.",
      "revId": "cc1d7a48925c8b87ff9b4ea3060560396a488c99",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a55baa3c_503b108b",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 7
      },
      "lineNbr": 2748,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-11-09T03:16:59Z",
      "side": 1,
      "message": "This is event D.",
      "revId": "cc1d7a48925c8b87ff9b4ea3060560396a488c99",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
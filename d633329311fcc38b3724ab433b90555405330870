{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1939030e_ade40d88",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-02-10T18:50:20Z",
      "side": 1,
      "message": "Cheng: Thank you for writing the CL. I suggest some changes.",
      "revId": "d633329311fcc38b3724ab433b90555405330870",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "262576e4_6d1da825",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6585
      },
      "writtenOn": "2023-02-16T00:35:55Z",
      "side": 1,
      "message": "Thanks for the review. PTAL.",
      "revId": "d633329311fcc38b3724ab433b90555405330870",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15e05823_2e7289cc",
        "filename": "aom/aomcx.h",
        "patchSetId": 1
      },
      "lineNbr": 1495,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-02-10T18:50:20Z",
      "side": 1,
      "message": "Nit: the example file name \"rate_distribution.csv\" has the .csv suffix, which implies the file contains comma-separated values. But the comment at line 1501 says the float values are separated by space. It would be good to avoid this apparent contradiction.\n\nIf the values are separated by space, perhaps we can use the .txt suffix in the example file name here.",
      "revId": "d633329311fcc38b3724ab433b90555405330870",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ac73a46_18e0f77c",
        "filename": "aom/aomcx.h",
        "patchSetId": 1
      },
      "lineNbr": 1495,
      "author": {
        "id": 6585
      },
      "writtenOn": "2023-02-16T00:35:55Z",
      "side": 1,
      "message": "Done\n.txt suffix makes sense. I also changed related .csv suffix to .txt.",
      "parentUuid": "15e05823_2e7289cc",
      "revId": "d633329311fcc38b3724ab433b90555405330870",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "071bfcba_c2919ab9",
        "filename": "aom/aomcx.h",
        "patchSetId": 1
      },
      "lineNbr": 1500,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-02-10T18:50:20Z",
      "side": 1,
      "message": "Please add \"const char * parameter\" to this comment.\n\nThe reason we document the type of the \"value\" parameter is that the `aom_codec_control()` function\u0027s prototype is missing the third parameter:\n\n```\n/*!\\brief Algorithm Control\n *\n * aom_codec_control takes a context, a control ID, and a third parameter\n * (with varying type). If the context is non-null and an error occurs,\n...\naom_codec_err_t aom_codec_control(aom_codec_ctx_t *ctx, int ctrl_id, ...);\n```",
      "revId": "d633329311fcc38b3724ab433b90555405330870",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "23cc74fc_996e9f1a",
        "filename": "aom/aomcx.h",
        "patchSetId": 1
      },
      "lineNbr": 1500,
      "author": {
        "id": 6585
      },
      "writtenOn": "2023-02-16T00:35:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "071bfcba_c2919ab9",
      "revId": "d633329311fcc38b3724ab433b90555405330870",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "516c6a26_11691111",
        "filename": "aom/aomcx.h",
        "patchSetId": 1
      },
      "lineNbr": 1504,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-02-10T18:50:20Z",
      "side": 1,
      "message": "These two expressions can be simplified.\n\nIf integer division is used, I believe they are equivalent to\n```\n   * rows \u003d (frame_height + 3) / 4\n   * cols \u003d (frame_width + 3) / 4\n```\n\nIf we don\u0027t want to require integer division, I think they are equivalent to\n```\n   * rows \u003d ALIGN_POWER_OF_TWO(frame_height, 2) / 4\n   * cols \u003d ALIGN_POWER_OF_TWO(frame_width, 2) / 4\n```\nBut our users will need to know what `ALIGN_POWER_OF_TWO` means.",
      "revId": "d633329311fcc38b3724ab433b90555405330870",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ee42c25_cb296922",
        "filename": "aom/aomcx.h",
        "patchSetId": 1
      },
      "lineNbr": 1504,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-02-10T19:00:24Z",
      "side": 1,
      "message": "IMPORTANT: It seems that we should divide by 16, not 4, because there is a float value for each 16x16 block. Here is the code:\n\n```\nstatic void ext_rate_guided_quantization(AV1_COMP *cpi) {\n  ...\n  // Accumuate to 16x16\n  const int block_step \u003d mi_size_wide[BLOCK_16X16];\n  ...\n  for (int row \u003d 0; row \u003c cpi-\u003eframe_info.mi_rows; row +\u003d block_step) {\n    for (int col \u003d 0; col \u003c cpi-\u003eframe_info.mi_cols; col +\u003d block_step) {\n      float val;\n      const int fields_converted \u003d fscanf(pfile, \"%f\", \u0026val);\n```\n\n`block_step` is equal to 4, but note that we are dividing `mi_rows` and `mi_cols` by 4 here.",
      "parentUuid": "516c6a26_11691111",
      "revId": "d633329311fcc38b3724ab433b90555405330870",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e03ec75_2db458b6",
        "filename": "aom/aomcx.h",
        "patchSetId": 1
      },
      "lineNbr": 1504,
      "author": {
        "id": 6585
      },
      "writtenOn": "2023-02-16T00:35:55Z",
      "side": 1,
      "message": "Note that ROUND_POWER_OF_TWO(frame_height + 3, 2) / 4 is equal to \n((frame_height + 3) / 4) / 4.\n\nI will change it to ALIGN_POWER_OF_TWO(frame_height, 2) / 4",
      "parentUuid": "7ee42c25_cb296922",
      "revId": "d633329311fcc38b3724ab433b90555405330870",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a985ce49_7af08244",
        "filename": "aom/aomcx.h",
        "patchSetId": 1
      },
      "lineNbr": 1504,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-02-16T02:28:37Z",
      "side": 1,
      "message": "\u003e Note that ROUND_POWER_OF_TWO(frame_height + 3, 2) / 4 is equal to \n\u003e ((frame_height + 3) / 4) / 4.\n\nYou are right. Sorry about my mistake.\n\nMy two suggestions in my previous comment are equivalent. So they are both different from `ROUND_POWER_OF_TWO(frame_height + 3, 2) / 4`. I am don\u0027t know what is the correct value. I will need to work out the formula from the for loops in the `ext_rate_guided_quantization()` function.",
      "parentUuid": "5e03ec75_2db458b6",
      "revId": "d633329311fcc38b3724ab433b90555405330870",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52ea22fe_a1e30646",
        "filename": "aom/aomcx.h",
        "patchSetId": 1
      },
      "lineNbr": 1504,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-02-16T03:11:59Z",
      "side": 1,
      "message": "I believe the formula is:\n\n```\nrows \u003d ALIGN_POWER_OF_TWO(frame_height, 4) / 16\n```\n\nor, if integer division is used:\n```\nrows \u003d (frame_height + 15) / 16\n```",
      "parentUuid": "a985ce49_7af08244",
      "revId": "d633329311fcc38b3724ab433b90555405330870",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6054385_b8d83548",
        "filename": "aom/aomcx.h",
        "patchSetId": 1
      },
      "lineNbr": 1506,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-02-10T18:50:20Z",
      "side": 1,
      "message": "Nit: the word \"requires\" is duplicated. Remove one.",
      "revId": "d633329311fcc38b3724ab433b90555405330870",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5cccf1fd_86464fa6",
        "filename": "aom/aomcx.h",
        "patchSetId": 1
      },
      "lineNbr": 1506,
      "author": {
        "id": 6585
      },
      "writtenOn": "2023-02-16T00:35:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c6054385_b8d83548",
      "revId": "d633329311fcc38b3724ab433b90555405330870",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60d68b3e_db475afc",
        "filename": "av1/arg_defs.c",
        "patchSetId": 1
      },
      "lineNbr": 508,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-02-10T18:50:20Z",
      "side": 1,
      "message": "Nit: requires to read \u003d\u003e requires reading\n\nOr we can say \"it requires an input file specified by --rate-distribution-info.\"",
      "revId": "d633329311fcc38b3724ab433b90555405330870",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70e14e64_b92924fc",
        "filename": "av1/arg_defs.c",
        "patchSetId": 1
      },
      "lineNbr": 508,
      "author": {
        "id": 6585
      },
      "writtenOn": "2023-02-16T00:35:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "60d68b3e_db475afc",
      "revId": "d633329311fcc38b3724ab433b90555405330870",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdd4a46b_60fa743c",
        "filename": "av1/encoder/allintra_vis.c",
        "patchSetId": 1
      },
      "lineNbr": 488,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-02-10T19:00:24Z",
      "side": 1,
      "message": "Nit/optional: Since `BLOCK_16X16` is a constant, I probably would just use the constant 4 here, rather than look it up from the `mi_size_wide` table. This assumes the size of `mi` is 4x4 and will never change.",
      "revId": "d633329311fcc38b3724ab433b90555405330870",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "69c02251_e3fa488e",
        "filename": "av1/encoder/allintra_vis.c",
        "patchSetId": 1
      },
      "lineNbr": 488,
      "author": {
        "id": 6585
      },
      "writtenOn": "2023-02-16T00:35:55Z",
      "side": 1,
      "message": "Done\nUsed a constant 4 with description to step size.",
      "parentUuid": "bdd4a46b_60fa743c",
      "revId": "d633329311fcc38b3724ab433b90555405330870",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "167397db_4222ec3e",
        "filename": "av1/encoder/allintra_vis.c",
        "patchSetId": 1
      },
      "lineNbr": 506,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-02-10T18:50:20Z",
      "side": 1,
      "message": "A library should avoid writing a message to stdout or stderr. It is fine to do that in a program such as aomenc, but it is not appropriate to do that in the libaom library.\n\nCan this be avoided?\n\nAlso, ideally the function should fail rather than falling back on the default deltaq-mode\u003d3, so that the user can investigate what is wrong with the rate_distribution_info file. If we automatically fall back, the user may not notice this issue.",
      "revId": "d633329311fcc38b3724ab433b90555405330870",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fada2719_668405a7",
        "filename": "av1/encoder/allintra_vis.c",
        "patchSetId": 1
      },
      "lineNbr": 506,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-02-10T21:56:46Z",
      "side": 1,
      "message": "Just to wanted to elaborate on the comment \"A library should avoid writing a message to stdout or stderr.\"\n\nstdout and stderr are shared by everything in the process. This kind of process-wide resource should be controlled by the application. In this case, any message that libaom writes to stdout or stderr may interfere with the application\u0027s use of stdout or stderr.",
      "parentUuid": "167397db_4222ec3e",
      "revId": "d633329311fcc38b3724ab433b90555405330870",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6c840c2_0b64bb34",
        "filename": "av1/encoder/allintra_vis.c",
        "patchSetId": 1
      },
      "lineNbr": 506,
      "author": {
        "id": 6585
      },
      "writtenOn": "2023-02-16T00:35:55Z",
      "side": 1,
      "message": "Done\nThanks for the suggestion and explanation.\nI will let the assertion fail.",
      "parentUuid": "fada2719_668405a7",
      "revId": "d633329311fcc38b3724ab433b90555405330870",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
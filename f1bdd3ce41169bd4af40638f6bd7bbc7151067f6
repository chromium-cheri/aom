{
  "comments": [
    {
      "key": {
        "uuid": "f77ae86e_fe8162b8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 9823
      },
      "writtenOn": "2020-08-28T19:31:17Z",
      "side": 1,
      "message": "method",
      "range": {
        "startLine": 9,
        "startChar": 44,
        "endLine": 9,
        "endChar": 50
      },
      "revId": "f1bdd3ce41169bd4af40638f6bd7bbc7151067f6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "582d260a_e6b87a85",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 13265
      },
      "writtenOn": "2020-08-28T12:47:38Z",
      "side": 1,
      "message": "Hi Yunqing,\n\nIn this patch, we are selecting the full pixel search method based on the resolution and qindex. The search is made progressively more aggressive towards high quantizers. In addition, the total search range is reduced for low res and mid res at high quantizers.\n\nIn order to perform the above, we have introduced two new search methods, namely NSTEP_8PT and CLAMPED_DIAMOND.\nNSTEP_8PT is similar to NSTEP, but with all search stages using 8 points to search (with the first 8 points of NSTEP search by making tan_radius \u003d radius). To adjust for the loss of search points per stage, the maximum possible number of search stages is made 16 (it is 15 for NSTEP). The total number of search points for a complete search with NSTEP_8PT is thus 128 compared to 164 with NSTEP.\nCLAMPED_DIAMOND is similar to DIAMOND, but with the search radius fixed as 256 for the initial 3 stages of search (corresponding to stage_index \u003e\u003d 8). This will reduce the maximum total search range to 1023 compared to 2047 in DIAMOND. Since the number of search stages are similar to that of DIAMOND, fixing the search radius to a smaller value in the initial stages of the search results in relatively finer search in the initial search window, though the maximum search range that can be covered is less. This approach is seen to be helpful for smaller resolutions, where a large search range like in DIAMOND may be not be needed.\n\nThe search method is selected as follows.\nFor speed\u003d1,\n    Resolution   qindex range   mv_sf.search_method    tpl_sf.search_method\n    ----------   ------------   -------------------    --------------------\n     \u003e\u003d HDres       [0,200]          NSTEP                 NSTEP_8PT\n     \u003e\u003d HDres      [201,255]        NSTEP_8PT              NSTEP_8PT\n      \u003c HDres       [0,50]           NSTEP                 NSTEP_8PT\n      \u003c HDres      [51,170]         NSTEP_8PT              NSTEP_8PT\n      \u003c HDres      [171,255]     CLAMPED_DIAMOND        CLAMPED_DIAMOND\n      \nFor speed\u003d2,\n    Resolution   qindex range   mv_sf.search_method    tpl_sf.search_method\n    ----------   ------------   -------------------    --------------------\n     \u003e\u003d HDres       [0,40]           NSTEP                 NSTEP_8PT\n     \u003e\u003d HDres      [41,200]        NSTEP_8PT               NSTEP_8PT\n     \u003e\u003d HDres      [201,200]        DIAMOND                 DIAMOND\n      \u003c HDres       [0,40]           NSTEP                 NSTEP_8PT\n      \u003c HDres      [41,170]         NSTEP_8PT              NSTEP_8PT\n      \u003c HDres      [171,255]     CLAMPED_DIAMOND        CLAMPED_DIAMOND\n\t  \nPlease find the detailed borg results with the above approach below.\n \n                      Instruction Count        BD-Rate Loss(%)\ncpu-used  Resolution    Reduction(%)     avg.psnr  ovr.psnr   ssim\n--------  ----------  -----------------  --------  --------  --------\n   1       LOW RES        2.292           0.0240    0.0234    0.0878\n   1       MID RES        6.677           0.0749    0.0562    0.0292\n   1        HD RES*       1.839          -0.0142   -0.0174   -0.0218\n   1       Average        3.247           0.0273    0.0206    0.0373\n\n   2       LOW RES        2.309           0.0405    0.0349    0.1414\n   2       MID RES        7.365           0.0611    0.0667    0.0828\n   2        HD RES*       4.547           0.0657    0.0669    0.2475**\n   2       Average        4.111           0.0542    0.0539    0.1566\n   \n   *60 frames runs\n   **Excluding life_1080p30, SSIM BD rate loss for speed 2 HD res is 0.1466%. In speed 2, life_1080p30 loses by 2.67% in SSIM, but gains in BD rate by 0.249% and 0.239% respectively for avg psnr and ovr psnr.\n   \nFor other speed presets, this is a bit-exact change with no speed impact (verified locally). Kindly note that the above results are on patchset 1. Compared to patshet 1, patchset 2 has a variable renamed.\n\nWe are planning to extend similar logic to speed 0 as well.\n\nPlease review the patch.\n\nRegards,\nNithya",
      "revId": "f1bdd3ce41169bd4af40638f6bd7bbc7151067f6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8d9a739_c9f29841",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5185
      },
      "writtenOn": "2020-08-28T18:20:42Z",
      "side": 1,
      "message": "2        HD RES*       4.547           0.0657    0.0669    0.2475**\nThe above result included life_1080p30 or not?\n\nCurrently, we are trying to improve speed 0\u0027s quality. Maybe we want to hold off plans on speed 0 for now. Thanks.",
      "parentUuid": "582d260a_e6b87a85",
      "revId": "f1bdd3ce41169bd4af40638f6bd7bbc7151067f6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e134154d_2530e227",
        "filename": "av1/encoder/mcomp.c",
        "patchSetId": 2
      },
      "lineNbr": 349,
      "author": {
        "id": 5185
      },
      "writtenOn": "2020-08-28T18:20:42Z",
      "side": 1,
      "message": "This is quite similar to ds. Possible to combine/share code between these 2?\nThe same applies to nstep8pt change below.",
      "range": {
        "startLine": 349,
        "startChar": 5,
        "endLine": 349,
        "endChar": 37
      },
      "revId": "f1bdd3ce41169bd4af40638f6bd7bbc7151067f6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ad078af_eb8b44c1",
        "filename": "av1/encoder/mcomp.h",
        "patchSetId": 2
      },
      "lineNbr": 160,
      "author": {
        "id": 5185
      },
      "writtenOn": "2020-08-28T18:20:42Z",
      "side": 1,
      "message": "Possible to separate the search stage, so we don\u0027t need to add FAST_NSTEP_8PT as a new search method? I know we allowed this before, but the list gets longer now. What do you think?",
      "range": {
        "startLine": 160,
        "startChar": 2,
        "endLine": 160,
        "endChar": 16
      },
      "revId": "f1bdd3ce41169bd4af40638f6bd7bbc7151067f6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "023ea67c_c4632c5d",
        "filename": "av1/encoder/speed_features.c",
        "patchSetId": 2
      },
      "lineNbr": 1445,
      "author": {
        "id": 5185
      },
      "writtenOn": "2020-08-28T18:20:42Z",
      "side": 1,
      "message": "Possible to move threshold related code outside this function?",
      "range": {
        "startLine": 1435,
        "startChar": 6,
        "endLine": 1445,
        "endChar": 7
      },
      "revId": "f1bdd3ce41169bd4af40638f6bd7bbc7151067f6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    }
  ]
}
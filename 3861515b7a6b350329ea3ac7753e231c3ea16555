{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6feae902_1272ce12",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 5
      },
      "lineNbr": 3156,
      "author": {
        "id": 5185
      },
      "writtenOn": "2023-12-08T21:59:04Z",
      "side": 1,
      "message": "Does the issue happen while the user-set number of threads changes from frame to frame?",
      "range": {
        "startLine": 3155,
        "startChar": 9,
        "endLine": 3156,
        "endChar": 49
      },
      "revId": "3861515b7a6b350329ea3ac7753e231c3ea16555",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05ce500c_6d91b0aa",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 5
      },
      "lineNbr": 3156,
      "author": {
        "id": 6585
      },
      "writtenOn": "2023-12-08T22:07:14Z",
      "side": 1,
      "message": "It only happens when frame size changes too. Because when frame size changes, the number of required threads will be recomputed based on frame size.",
      "parentUuid": "6feae902_1272ce12",
      "range": {
        "startLine": 3155,
        "startChar": 9,
        "endLine": 3156,
        "endChar": 49
      },
      "revId": "3861515b7a6b350329ea3ac7753e231c3ea16555",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2c1ec1b_f0bb04d1",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 5
      },
      "lineNbr": 3156,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-08T22:17:34Z",
      "side": 1,
      "message": "I believe the new conditional expression is equivalent to:\n\n```\n    if ((num_workers \u003e 1) \u0026\u0026 (ppi-\u003ep_mt_info.num_workers \u003c num_workers)) {\n```",
      "revId": "3861515b7a6b350329ea3ac7753e231c3ea16555",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b439565_da6e60a2",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 5
      },
      "lineNbr": 3168,
      "author": {
        "id": 5185
      },
      "writtenOn": "2023-12-08T21:59:04Z",
      "side": 1,
      "message": "So this is needed besides terminate_worker_data()?",
      "range": {
        "startLine": 3162,
        "startChar": 6,
        "endLine": 3168,
        "endChar": 7
      },
      "revId": "3861515b7a6b350329ea3ac7753e231c3ea16555",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b00cfa8_7f70ba1c",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 5
      },
      "lineNbr": 3168,
      "author": {
        "id": 6585
      },
      "writtenOn": "2023-12-08T22:07:14Z",
      "side": 1,
      "message": "Yes. It is necessary, otherwise we will see thread racing.",
      "parentUuid": "7b439565_da6e60a2",
      "range": {
        "startLine": 3162,
        "startChar": 6,
        "endLine": 3168,
        "endChar": 7
      },
      "revId": "3861515b7a6b350329ea3ac7753e231c3ea16555",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3390d07f_935d53d1",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 5
      },
      "lineNbr": 3169,
      "author": {
        "id": 5185
      },
      "writtenOn": "2023-12-08T21:59:04Z",
      "side": 1,
      "message": "Here the threads and thread-related buffers are deleted, and re-created them if # of threads changes. Only adding those extra threads might be better?",
      "range": {
        "startLine": 3169,
        "startChar": 6,
        "endLine": 3169,
        "endChar": 24
      },
      "revId": "3861515b7a6b350329ea3ac7753e231c3ea16555",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a9fd5fe_57d516f8",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 5
      },
      "lineNbr": 3169,
      "author": {
        "id": 6585
      },
      "writtenOn": "2023-12-08T22:07:14Z",
      "side": 1,
      "message": "I thought about that too. But the memory is allocated according to the number of threads. I don\u0027t think we have a easy way to extend the memory, or appending on the original memory. So we have to de-allocate and reallocate.",
      "parentUuid": "3390d07f_935d53d1",
      "range": {
        "startLine": 3169,
        "startChar": 6,
        "endLine": 3169,
        "endChar": 24
      },
      "revId": "3861515b7a6b350329ea3ac7753e231c3ea16555",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "216ccb84_4c4ee9fe",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 5
      },
      "lineNbr": 3196,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-08T22:17:34Z",
      "side": 1,
      "message": "The code here (lines 3154-3196) is very complicated, and the newly-added code is the same as lines 3190-3194. I think someone who fully understands the code here should be able to simplify it. For example, I was able to simplify the conditional expression at line 3156. But I don\u0027t understand the rest of the code.\n\nPerhaps Yunqing can help us here?",
      "revId": "3861515b7a6b350329ea3ac7753e231c3ea16555",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "828fcb72_255e1ac6",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 5
      },
      "lineNbr": 1078,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-08T22:17:34Z",
      "side": 1,
      "message": "I compared your new code with the `create_enc_workers()` function in libvpx (vp9/encoder/vp9_ethread.c). I confirm that your new code is using the same approach. The only optimization I want to suggest is a shortcut if we happen to have the request number of workers already:\n\n```\n  assert(num_workers \u003e 0);\n  if (num_workers \u003d\u003d p_mt_info-\u003enum_workers) return;\n```",
      "revId": "3861515b7a6b350329ea3ac7753e231c3ea16555",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef7b7195_870a83fb",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 5
      },
      "lineNbr": 1081,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-08T22:17:34Z",
      "side": 1,
      "message": "Nit: Set `p_mt_info-\u003etile_thr_data` to NULL after freeing. Make the same change to `p_mt_info-\u003eworkers`.\n\nNote: Although we will immediately assign new values to these two pointers, we may make a longjmp() in AOM_CHECK_MEM_ERROR. So it is safer to always leave things in a clean state.",
      "revId": "3861515b7a6b350329ea3ac7753e231c3ea16555",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b87cd6a_6d262d59",
        "filename": "av1/encoder/ethread.h",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-08T22:17:34Z",
      "side": 1,
      "message": "1) Move this declaration after the closely-related `av1_create_workers()` function at line 100.\n\n2) Nit: Add the \"av1_\" prefix to the function name.\n\nThe function name is a little confusing. I think it should be named \"av1_terminate_workers\".\n\n3) I think this function does not need to be an inline function defined in the header file. We can remove \"static\" from the declaration and define the function in ethread.c, after `av1_create_workers()`.",
      "revId": "3861515b7a6b350329ea3ac7753e231c3ea16555",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1b72134_c20f8458",
        "filename": "av1/encoder/ethread.h",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-08T22:17:34Z",
      "side": 1,
      "message": "Optional: If we reverse the direction of this loop, then it will work with p_mt_info-\u003enum_workers \u003d\u003d 0:\n\n```\n  for (int t \u003d 0; t \u003c p_mt_info-\u003enum_workers; ++t) {\n```\n\nand we can omit the `if (p_mt_info-\u003enum_workers \u003e 0) {` check in `av1_create_workers()`.",
      "revId": "3861515b7a6b350329ea3ac7753e231c3ea16555",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d4c4f61_121e9059",
        "filename": "test/encode_api_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 502,
      "author": {
        "id": 5185
      },
      "writtenOn": "2023-12-08T21:59:04Z",
      "side": 1,
      "message": "Could you add a comment to describe the test?",
      "range": {
        "startLine": 502,
        "startChar": 0,
        "endLine": 502,
        "endChar": 4
      },
      "revId": "3861515b7a6b350329ea3ac7753e231c3ea16555",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16f7cd34_45424814",
        "filename": "test/encode_api_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 502,
      "author": {
        "id": 6585
      },
      "writtenOn": "2023-12-08T22:07:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1d4c4f61_121e9059",
      "range": {
        "startLine": 502,
        "startChar": 0,
        "endLine": 502,
        "endChar": 4
      },
      "revId": "3861515b7a6b350329ea3ac7753e231c3ea16555",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
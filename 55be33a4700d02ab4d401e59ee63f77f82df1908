{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8a68a4f4_06640019",
        "filename": "av1/qmode_rc/ratectrl_qmode.cc",
        "patchSetId": 1
      },
      "lineNbr": 1453,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-12-13T23:10:40Z",
      "side": 1,
      "message": "This is a copy of lines 861-868. It could be factored out.",
      "range": {
        "startLine": 1445,
        "startChar": 0,
        "endLine": 1453,
        "endChar": 0
      },
      "revId": "55be33a4700d02ab4d401e59ee63f77f82df1908",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be7a4066_31a64d85",
        "filename": "av1/qmode_rc/ratectrl_qmode.cc",
        "patchSetId": 1
      },
      "lineNbr": 1454,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-12-13T23:10:40Z",
      "side": 1,
      "message": "The API requires that there be stats for the whole GOP. Instead of quietly ignoring the problem if there aren\u0027t enough stats, I\u0027d prefer to have it check and return an error.",
      "range": {
        "startLine": 1454,
        "startChar": 0,
        "endLine": 1454,
        "endChar": 69
      },
      "revId": "55be33a4700d02ab4d401e59ee63f77f82df1908",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19a4dffd_12567151",
        "filename": "av1/qmode_rc/ratectrl_qmode.cc",
        "patchSetId": 1
      },
      "lineNbr": 1454,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-12-13T23:10:40Z",
      "side": 1,
      "message": "This could be const. Please mark as const any variables which aren\u0027t mutated.",
      "range": {
        "startLine": 1454,
        "startChar": 2,
        "endLine": 1454,
        "endChar": 5
      },
      "revId": "55be33a4700d02ab4d401e59ee63f77f82df1908",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df2dbf49_10082e9c",
        "filename": "av1/qmode_rc/ratectrl_qmode.cc",
        "patchSetId": 1
      },
      "lineNbr": 1456,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-12-13T23:10:40Z",
      "side": 1,
      "message": "It\u0027s an error for this pointer to be null. (See the comment in the header.)\nIf you want to check it, then return an error if it\u0027s null, instead of just silently ignoring it.",
      "range": {
        "startLine": 1456,
        "startChar": 36,
        "endLine": 1456,
        "endChar": 65
      },
      "revId": "55be33a4700d02ab4d401e59ee63f77f82df1908",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "264866ad_68ce206d",
        "filename": "av1/qmode_rc/ratectrl_qmode.cc",
        "patchSetId": 1
      },
      "lineNbr": 1456,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-12-13T23:10:40Z",
      "side": 1,
      "message": "It\u0027s clearer to use empty() to check if a container is empty rather than checking size().\n\nhttp://g3doc/devtools/cymbal/clang_tidy/g3doc/checks/readability-container-size-empty",
      "range": {
        "startLine": 1456,
        "startChar": 22,
        "endLine": 1456,
        "endChar": 32
      },
      "revId": "55be33a4700d02ab4d401e59ee63f77f82df1908",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4b2c5a3_cd15cef1",
        "filename": "av1/qmode_rc/ratectrl_qmode.cc",
        "patchSetId": 1
      },
      "lineNbr": 1459,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-12-13T23:10:40Z",
      "side": 1,
      "message": "Again, it should be an error if there aren\u0027t sufficient stats. Don\u0027t sweep it under the rug.",
      "range": {
        "startLine": 1459,
        "startChar": 0,
        "endLine": 1459,
        "endChar": 65
      },
      "revId": "55be33a4700d02ab4d401e59ee63f77f82df1908",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fe5e2f4_487816ab",
        "filename": "av1/qmode_rc/ratectrl_qmode.cc",
        "patchSetId": 1
      },
      "lineNbr": 1465,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-12-13T23:10:40Z",
      "side": 1,
      "message": "Use the prefix form (++i) of the increment and decrement operators unless you need postfix semantics. \n\nhttps://google.github.io/styleguide/cppguide.html#Preincrement_and_Predecrement",
      "range": {
        "startLine": 1465,
        "startChar": 35,
        "endLine": 1465,
        "endChar": 38
      },
      "revId": "55be33a4700d02ab4d401e59ee63f77f82df1908",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75e8bbec_8eb46484",
        "filename": "av1/qmode_rc/ratectrl_qmode.cc",
        "patchSetId": 1
      },
      "lineNbr": 1483,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-12-13T23:10:40Z",
      "side": 1,
      "message": "In C++ you may as well use std::max and std::min instead of AOMMAX and AOMMIN.",
      "range": {
        "startLine": 1483,
        "startChar": 28,
        "endLine": 1483,
        "endChar": 34
      },
      "revId": "55be33a4700d02ab4d401e59ee63f77f82df1908",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ef04b6b_a5a8a340",
        "filename": "av1/qmode_rc/ratectrl_qmode.cc",
        "patchSetId": 1
      },
      "lineNbr": 1500,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-12-13T23:10:40Z",
      "side": 1,
      "message": "It might help to have a more in-depth comment here explaining what this is doing.",
      "range": {
        "startLine": 1500,
        "startChar": 9,
        "endLine": 1500,
        "endChar": 22
      },
      "revId": "55be33a4700d02ab4d401e59ee63f77f82df1908",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4388fb22_f7ae8ce8",
        "filename": "av1/qmode_rc/ratectrl_qmode.cc",
        "patchSetId": 1
      },
      "lineNbr": 1509,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-12-13T23:10:40Z",
      "side": 1,
      "message": "This pattern is repeated many times. It would simplify the code to factor it out into a helper function like this:\n\n    double FlashAdjustedCorCoeff(const std::vector\u003cFIRSTPASS_STATS\u003e\u0026 stats_list,\n                                 int index) {\n      assert (index \u003e\u003d 1);\n      if (stats_list[index].is_flash || stats_list[index - 1].is_flash) {\n        return 1.0;\n      }\n      return stats_list[index].cor_coeff;\n    }",
      "range": {
        "startLine": 1505,
        "startChar": 0,
        "endLine": 1509,
        "endChar": 0
      },
      "revId": "55be33a4700d02ab4d401e59ee63f77f82df1908",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
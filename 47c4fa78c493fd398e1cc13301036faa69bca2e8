{
  "comments": [
    {
      "key": {
        "uuid": "7173d9d0_7ca3d5a1",
        "filename": "aom_dsp/simd/v64_intrinsics_arm.h",
        "patchSetId": 6
      },
      "lineNbr": 69,
      "author": {
        "id": 5435
      },
      "writtenOn": "2016-08-30T22:54:01Z",
      "side": 1,
      "message": "I\u0027m trying to do some 4x4 stuff with uint8_t and was looking to this for inspiration. I can\u0027t understand how this works though. vst1_u8 should require a uint8x8_t and store 8 values, not 4:\nhttp://infocenter.arm.com/help/index.jsp?topic\u003d/com.arm.doc.dui0491i/CIHEGDCF.html\n\nSo in my head, this either doesn\u0027t compile or stores 8 values. What\u0027s up?",
      "revId": "47c4fa78c493fd398e1cc13301036faa69bca2e8",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "91ff6d6b_12a38ca2",
        "filename": "aom_dsp/simd/v64_intrinsics_arm.h",
        "patchSetId": 6
      },
      "lineNbr": 69,
      "author": {
        "id": 5111
      },
      "writtenOn": "2016-08-31T06:27:28Z",
      "side": 1,
      "message": "Your head is right.  This will cause an overrun and things will only be ok (on little-endian) as long as things are written sequentially (and if there are four superfluous bytes at the end), so this bug could easily pass undetected.\n\nLooks like a cut\u0026paste bug, because an earlier version has the correct vst1_lane_u32().  Alternatively, leaving the implementation choice to the compiler:\n\n *(__packed uint32_t *)p) \u003d a;  (ARM CC)\n *((__attribute((packed)) uint32_t *)p) \u003d a; (GCC)",
      "parentUuid": "7173d9d0_7ca3d5a1",
      "revId": "47c4fa78c493fd398e1cc13301036faa69bca2e8",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1c4373ff_a48158d9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 32952
      },
      "writtenOn": "2023-09-07T23:48:23Z",
      "side": 1,
      "message": "Thank you @jzern@google.com. I have adjusted the commit title to address the patch check.",
      "revId": "74e846fe1242885d77806b00b07afa54908bdca1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2532a1fd_47993a88",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-09-19T05:04:16Z",
      "side": 1,
      "message": "At v3.7.0 and v3.7.0-423-g57be81b0fd I don\u0027t have any issue targeting arm64 (using `build/cmake/toolchains/arm64-macos.cmake`). I tried Unix Makefiles, Ninja and Xcode (14.3) as generators.\n\nAt what point do you see a hang? Can you add your cmake command line here please?",
      "revId": "74e846fe1242885d77806b00b07afa54908bdca1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2dc01a7f_799b76c1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-09-20T00:42:31Z",
      "side": 1,
      "message": "I also can\u0027t reproduce the hang with either libaom or the minimal reproducer.\n\nI wonder if this has to do with cmake. I have cmake 3.26.2, which I downloaded from https://cmake.org/download/. (I used the .dmg file.)",
      "revId": "74e846fe1242885d77806b00b07afa54908bdca1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4d67375_ef7005c4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-09-20T00:53:08Z",
      "side": 1,
      "message": "Also, when I ran `cmake -S . -B build --trace` in the minimal reproducer, the output did not contain `-Wl,--help`.",
      "parentUuid": "2dc01a7f_799b76c1",
      "revId": "74e846fe1242885d77806b00b07afa54908bdca1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f477d975_7a5d5b70",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 32952
      },
      "writtenOn": "2023-10-01T06:38:45Z",
      "side": 1,
      "message": "@wtc@google.com:\n\nYour mention of CMake version was a great hint. I downloaded CMake 3.26.4 and also wasn\u0027t able to reproduce this, but with CMake 3.27.0: this reliably fails on `main`. If you run `/usr/bin/as -Wl,--help` you should be able to see how that hangs.\n\n[Sorry for my delayed response; I don\u0027t have an arm64 Mac so I need a friend\u0027s help to verify. But as it turned out the underlying problem is not arm64-specific.]",
      "parentUuid": "a4d67375_ef7005c4",
      "revId": "74e846fe1242885d77806b00b07afa54908bdca1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da3ce524_10ac12c9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 32952
      },
      "writtenOn": "2023-10-01T06:46:57Z",
      "side": 1,
      "message": "@jzern@google.com:\n\nSorry for my delayed response; the command line that reproduces this is as simple as `cmake -S . -B _build`. However note that I believe you need CMake 3.27.0+ to be able to reproduce it (please see my response to @wtc@google.com). Please try:\n\n```\ncurl -fL https://github.com/Kitware/CMake/releases/download/v3.27.0/cmake-3.27.0-macos-universal.tar.gz | tar -xz --strip-components\u003d1\nCMake.app/Contents/bin/cmake -S \u003cpath-to-aom\u003e -B _build\n```",
      "parentUuid": "2532a1fd_47993a88",
      "revId": "74e846fe1242885d77806b00b07afa54908bdca1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4566b9c_7c77afc9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-11-04T02:28:31Z",
      "side": 1,
      "message": "\u003e @wtc@google.com:\n\u003e \n\u003e Your mention of CMake version was a great hint. I downloaded CMake 3.26.4 and also wasn\u0027t able to reproduce this, but with CMake 3.27.0: this reliably fails on `main`. If you run `/usr/bin/as -Wl,--help` you should be able to see how that hangs.\n\u003e \n\u003e [Sorry for my delayed response; I don\u0027t have an arm64 Mac so I need a friend\u0027s help to verify. But as it turned out the underlying problem is not arm64-specific.]\n\nI can reproduce this with the newer version of CMake. I wonder if this should be considered a bug in their detection.\n\nIf you don\u0027t mind rebasing this I think we can simplify the change.",
      "parentUuid": "f477d975_7a5d5b70",
      "revId": "74e846fe1242885d77806b00b07afa54908bdca1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c86365c6_48b3fb23",
        "filename": "build/cmake/aom_configure.cmake",
        "patchSetId": 5
      },
      "lineNbr": 187,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-09-09T02:41:47Z",
      "side": 1,
      "message": "I wonder if we need this set at all for aarch64 since we only have assembly for armv7.",
      "revId": "74e846fe1242885d77806b00b07afa54908bdca1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da6535a8_c228a356",
        "filename": "build/cmake/aom_configure.cmake",
        "patchSetId": 5
      },
      "lineNbr": 187,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-11-04T02:28:31Z",
      "side": 1,
      "message": "\u003e I wonder if we need this set at all for aarch64 since we only have assembly for armv7.\n\nThe check at 185 could become `elseif(AOM_TARGET_CPU MATCHES \"arm\" AND NOT AOM_TARGET_CPU STREQUAL \"arm64\")`, but that can be left as a follow up.",
      "parentUuid": "c86365c6_48b3fb23",
      "revId": "74e846fe1242885d77806b00b07afa54908bdca1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "095fb0eb_3ebf9143",
        "filename": "build/cmake/aom_configure.cmake",
        "patchSetId": 5
      },
      "lineNbr": 189,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-11-04T02:28:31Z",
      "side": 1,
      "message": "I think you can drop this block altogether and let the default take effect. Doing that works for me with `-DCMAKE_TOOLCHAIN_FILE\u003d../build/cmake/toolchains/armv7s-ios.cmake` and the default targeting arm64 macOS.",
      "revId": "74e846fe1242885d77806b00b07afa54908bdca1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
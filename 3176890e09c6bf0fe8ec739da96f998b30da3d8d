{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2809ccb5_761fab99",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-09-20T21:05:49Z",
      "side": 1,
      "message": "This changes the library ABI given what is [exported](https://aomedia.googlesource.com/aom/+/c689ee11aed1e77f4b6bec0108b4a9c1f693b698/av1/exports_com#2).\n\nThis function probably shouldn\u0027t have been exported only for an example, but we\u0027ll need to account for the change in versioning of the next release.\n\n```\nABI check for build-HEAD/I/lib/libaom.so failed (4):\nFunctions changes summary: 0 Removed, 1 Changed, 0 Added function\nVariables changes summary: 0 Removed, 0 Changed, 0 Added variable\n\n1 function with some indirect sub-type change:\n\n[C] \"function void av1_resize_frame420(const uint8_t* const, int, const uint8_t* const, const uint8_t* const, int, int, int, uint8_t, int, uint8_t, uint8_t*, int, int, int)\" at resize.c:1135:1 has some indirect sub-type changes:\nreturn type changed:\ntype name changed from \"void\" to \"bool\"\ntype size changed from 0 to 8 (in bits)\n```",
      "revId": "3176890e09c6bf0fe8ec739da96f998b30da3d8d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7a487ea_4f790808",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-09-20T22:28:02Z",
      "side": 1,
      "message": "I think we can treat `av1_resize_frame420()` as a \"private\" exported function.\n\nIn any case, I can restore the original function prototype and add an `av1_resize_frame420_v2()` function that returns bool.",
      "parentUuid": "2809ccb5_761fab99",
      "revId": "3176890e09c6bf0fe8ec739da96f998b30da3d8d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e4bc9ef_70157f82",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-09-20T23:12:29Z",
      "side": 1,
      "message": "I did this in https://aomedia-review.googlesource.com/c/aom/+/181621.",
      "parentUuid": "f7a487ea_4f790808",
      "revId": "3176890e09c6bf0fe8ec739da96f998b30da3d8d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d78aa0e0_9d8fdaf9",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 4
      },
      "lineNbr": 2540,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-09-21T20:32:39Z",
      "side": 1,
      "message": "If we pass `-DCONFIG_FPMT_TEST\u003d1` to cmake, the AV1/AVxFrameParallelThreadEncodeLowResTestLarge.FrameParallelThreadEncodeTest/6 test crashes here because `xd-\u003ecur_buf` is a null pointer:\n\n```\nThread 18 \"aom enc worker\" received signal SIGSEGV, Segmentation fault.\n[Switching to LWP 1517440]\n0x000055555671e823 in is_cur_buf_hbd (xd\u003d0x55555aca5f40)\n    at aom/av1/common/blockd.h:934\n934\t  return xd-\u003ecur_buf-\u003eflags \u0026 YV12_FLAG_HIGHBITDEPTH ? 1 : 0;\n(gdb) p xd\n$1 \u003d (const MACROBLOCKD *) 0x55555aca5f40\n(gdb) p xd-\u003ecur_buf\n$2 \u003d (const YV12_BUFFER_CONFIG *) 0x0\n(gdb) bt\n#0  0x000055555671e823 in is_cur_buf_hbd (xd\u003d0x55555aca5f40)\n    at aom/av1/common/blockd.h:934\n#1  0x000055555671def3 in compute_global_motion_for_ref_frame (\n    cpi\u003d0x55555900c8c0, xd\u003d0x55555aca5f40, ref_buf\u003d0x55555906ce60, frame\u003d5, \n    motion_models\u003d0x55555acccb50, \n    segment_map\u003d0x7fffd4260630 \"\\001\\001\\001\\001\", segment_map_w\u003d11, \n    segment_map_h\u003d9, ref_params\u003d0x555556fa5304 \u003cdefault_warp_params\u003e)\n    at aom/av1/encoder/global_motion_facade.c:134\n#2  0x000055555671dcc8 in av1_compute_gm_for_valid_ref_frames (\n    cpi\u003d0x55555900c8c0, xd\u003d0x55555aca5f40, ref_buf\u003d0x55555906ce60, frame\u003d5, \n    motion_models\u003d0x55555acccb50, \n    segment_map\u003d0x7fffd4260630 \"\\001\\001\\001\\001\", segment_map_w\u003d11, \n    segment_map_h\u003d9)\n    at aom/av1/encoder/global_motion_facade.c:204\n#3  0x0000555556711689 in gm_mt_worker_hook (arg1\u003d0x555559f22670, unused\u003d0x0)\n    at aom/av1/encoder/ethread.c:2539\n#4  0x00005555566202c5 in execute (worker\u003d0x555557b1b460)\n    at aom/aom_util/aom_thread.c:171\n#5  0x000055555662044c in thread_loop (ptr\u003d0x555557b1b460)\n    at aom/aom_util/aom_thread.c:77\n#6  0x00007ffff7aa641c in start_thread (arg\u003d\u003coptimized out\u003e)\n    at ./nptl/pthread_create.c:444\n#7  0x00007ffff7b267ac in clone3 ()\n    at ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\n```\n\nYunqing suggested the fix I implemented in https://aomedia-review.googlesource.com/c/aom/+/181721.",
      "revId": "3176890e09c6bf0fe8ec739da96f998b30da3d8d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
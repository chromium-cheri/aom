{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "81ee86f0_2aa71d90",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 31012
      },
      "writtenOn": "2022-11-09T13:24:48Z",
      "side": 1,
      "message": "Hi Yunqing,\n\nThe function aom_hadamard_lp_8x8_dual() computes the 2-D hadamard transform of two 8x8 (i.e, 8x16) blocks. Currently, 2-D hadamard transform is happening as follows\n- 1-D column transform on the source block\n- Transpose the output of column transform\n- Apply 1-D column transform on the transpose column output\n\nIn this CL, we tried avoiding the transpose after column 1-D transform by directly performing 1-D row transform on column output. As the hadamard transform uses only addition/subtraction, this is possible using hadd() and hsub() instructions available in x86 intrinsics.\n\nAt module level, the speed-up gains\\scaling have improved by ~13%. Please check the encoder speed-up measured (for AVX2) using instruction count as below.\n```\n               Instruction Count    \ncpu Resolution    Reduction(%)\n 7   rtc_1080p      0.758\n 7         rtc      0.539\n 7    rtc_derf      0.407\n 7  rtc_screen      0.352\n\n 8   rtc_1080p      0.567\n 8         rtc      0.419\n 8    rtc_derf      0.305\n 8  rtc_screen      0.330\n\n 9   rtc_1080p      0.568\n 9         rtc      0.439\n 9    rtc_derf      0.318\n 9  rtc_screen      0.376\n\n10   rtc_1080p      0.557\n10         rtc      0.400\n10    rtc_derf      0.302\n10  rtc_screen      0.377\n```\nThe instruction count reduction specified has been measured using command:\n$ perf stat -e instructions:u ./aomenc â€¦\n\nPlease review the CL.\n\nThanks \u0026 Regards,\nDiksha",
      "revId": "55312c1ea6c6311a3fecc75931a43bd8f53f4147",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
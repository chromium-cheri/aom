{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6fb6ca07_1bf905f3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-31T21:14:57Z",
      "side": 1,
      "message": "Thanks for the fix. I verified this CL fixes the crash (memory error). I will take a closer look at this bug.",
      "revId": "5a277b248d3aa33877986e5b11267fa31d2f894e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e3461b8_9f14c63c",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 1
      },
      "lineNbr": 827,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-11-01T16:43:47Z",
      "side": 1,
      "message": "I studied the relevant code yesterday afternoon. It is very complicated and I still don\u0027t fully understand it. But I have roughly identified two reasons this code is brittle.\n\n1. Although this function, `av1_init_mt_sync()`, calls `av1_loop_restoration_alloc()` if the `lr_sync-\u003elrworkerdata` buffer is not large enough, `encoder_encode()` calls this function only once, before entering the while loop that encodes the frames. So if we (inadvertently) modified the `lr_sync-\u003elrworkerdata` buffer size during the post-processing of a frame, the while loop won\u0027t call this function to check the `lr_sync-\u003elrworkerdata` buffer size.\n\n2. During the post-processing of a frame, the encoder calls `av1_loop_restoration_filter_frame_mt()`, a function that is shared with the decoder. `av1_loop_restoration_filter_frame_mt()` may also call `av1_loop_restoration_alloc()`. The `num_workers` parameter the encoder passes to `av1_loop_restoration_filter_frame_mt()` is used for two purposes, but when FPMT is enabled, the `num_workers` parameter seems incorrect for one purpose (for the `av1_loop_restoration_alloc()` call). So it is important that the encoder\u0027s `av1_loop_restoration_filter_frame_mt()` call NOT call `av1_loop_restoration_alloc()`. I believe Rachel\u0027s fix works by making sure this doesn\u0027t happen.",
      "revId": "5a277b248d3aa33877986e5b11267fa31d2f894e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "5a277b248d3aa33877986e5b11267fa31d2f894e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "5a277b248d3aa33877986e5b11267fa31d2f894e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "5a277b248d3aa33877986e5b11267fa31d2f894e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a90ebe0c_766345a5",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 2
      },
      "lineNbr": 969,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-07-12T00:42:18Z",
      "side": 1,
      "message": "This change isn\u0027t really necessary. It is more of a cosmetic change (so that all operands in the expresssion at lines 3043-3044 are unsigned).\n\nPlease let me know if you prefer the original `int` type.",
      "revId": "aa9a9f0d844e500051a9bbe54981d10460719db6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c057e575_26967728",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 2
      },
      "lineNbr": 969,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-07-12T18:17:32Z",
      "side": 1,
      "message": "I reverted this change.",
      "parentUuid": "a90ebe0c_766345a5",
      "revId": "aa9a9f0d844e500051a9bbe54981d10460719db6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8f49954_49c6e838",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 2
      },
      "lineNbr": 3044,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-07-12T00:42:18Z",
      "side": 1,
      "message": "This fix the `-fsanitize\u003dinteger` error:\n\n\u003e unsigned integer overflow: 1108994048 * 24 cannot be represented in type \u0027unsigned int\u0027\n\nAll the operands are of the `uint32_t` or `int` type, so the `int` operands are promoted to `uint32_t`.",
      "revId": "aa9a9f0d844e500051a9bbe54981d10460719db6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e4d6d309_56f50922",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 2
      },
      "lineNbr": 3044,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-07-12T17:46:50Z",
      "side": 1,
      "message": "\u003e This fix the `-fsanitize\u003dinteger` error:\n\u003e \n\u003e \u003e unsigned integer overflow: 1108994048 * 24 cannot be represented in type \u0027unsigned int\u0027\n\u003e \n\u003e All the operands are of the `uint32_t` or `int` type, so the `int` operands are promoted to `uint32_t`.\n\n`size_t` will be 32-bit in 32-bit builds, though maybe we wouldn\u0027t make it this far.",
      "parentUuid": "c8f49954_49c6e838",
      "revId": "aa9a9f0d844e500051a9bbe54981d10460719db6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c9a04e2_b34af386",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 2
      },
      "lineNbr": 3044,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-07-12T18:17:32Z",
      "side": 1,
      "message": "Done. Good point. I now cast the operands to `uint64_t` and cast the final result to `size_t`.\n\nI assume the input `img` is valid. Since th caller has successfully allocated buffers for the uncompressed image, the uncompressed image size can be represented in `size_t`. So it is safe to cast the final `uint64_t` result to `size_t` without checking.",
      "parentUuid": "e4d6d309_56f50922",
      "revId": "aa9a9f0d844e500051a9bbe54981d10460719db6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1358c24a_79ae4cfb",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 2
      },
      "lineNbr": 3044,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-07-12T18:24:46Z",
      "side": 1,
      "message": "\u003e Done. Good point. I now cast the operands to `uint64_t` and cast the final result to `size_t`.\n\u003e \n\u003e I assume the input `img` is valid. Since th caller has successfully allocated buffers for the uncompressed image, the uncompressed image size can be represented in `size_t`. So it is safe to cast the final `uint64_t` result to `size_t` without checking.\n\nThat\u0027s one way to look at it, we don\u0027t validate the data in `validate_img()`. I was worried because larger sizes will overflow. There\u0027s also a multiplier of 8 or 2 that will be applied at line 3060.",
      "parentUuid": "0c9a04e2_b34af386",
      "revId": "aa9a9f0d844e500051a9bbe54981d10460719db6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c18bf9fb_af2594e8",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 2
      },
      "lineNbr": 3044,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-07-12T18:42:44Z",
      "side": 1,
      "message": "Thanks. I added a check for the multiplication by `multiplier`.",
      "parentUuid": "1358c24a_79ae4cfb",
      "revId": "aa9a9f0d844e500051a9bbe54981d10460719db6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "54802e80_8df36925",
        "filename": "av1/encoder/encodeframe.c",
        "patchSetId": 2
      },
      "lineNbr": 2110,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-07-12T00:42:18Z",
      "side": 1,
      "message": "Note that `sum` is the sum of all the `cpi-\u003etd.rd_counts.tx_type_used[i][j]` values.",
      "revId": "aa9a9f0d844e500051a9bbe54981d10460719db6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9abd4c6b_b3bac549",
        "filename": "av1/encoder/encodeframe.c",
        "patchSetId": 2
      },
      "lineNbr": 2117,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-07-12T00:42:18Z",
      "side": 1,
      "message": "This fixes the UBSan error:\n\n\u003e signed integer overflow: 4172333 * 1024 cannot be represented in type \u0027int\u0027\n\nHere, the fraction `cpi-\u003etd.rd_counts.tx_type_used[i][j] / sum` is \u003c\u003d 1 (see my note at line 2110), so the whole expression is \u003c\u003d `MAX_TX_TYPE_PROB` (\u003d 1024). Therefore it is safe to cast the result of the whole expression to `int`.",
      "revId": "aa9a9f0d844e500051a9bbe54981d10460719db6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2c1c7e9_3d5530ec",
        "filename": "av1/encoder/encodetxb.c",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-07-12T01:43:10Z",
      "side": 1,
      "message": "James: I was using the `%zu` format to print `size_t` values here, but the GCC (GNU 10.0.0) in the mingw configurations does not support the `z` format specifier (a C99 feature):\nhttps://build.aomedia.org/jenkins/job/libaom__commit_trigger/76976/\n\nIs that expected? The console output shows that compiler supports C99:\n\n```\n16:20:14 Checking C compiler flag support for: -std\u003dc99\n16:20:14 -- Performing Test HAVE_C_FLAG\n16:20:14 -- Performing Test HAVE_C_FLAG - Success\n```",
      "revId": "aa9a9f0d844e500051a9bbe54981d10460719db6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27f66f02_d7564d72",
        "filename": "av1/encoder/encodetxb.c",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-07-12T17:11:34Z",
      "side": 1,
      "message": "\u003e James: I was using the `%zu` format to print `size_t` values here, but the GCC (GNU 10.0.0) in the mingw configurations does not support the `z` format specifier (a C99 feature):\n\u003e https://build.aomedia.org/jenkins/job/libaom__commit_trigger/76976/\n\u003e \n\u003e Is that expected? The console output shows that compiler supports C99:\n\u003e \n\u003e ```\n\u003e 16:20:14 Checking C compiler flag support for: -std\u003dc99\n\u003e 16:20:14 -- Performing Test HAVE_C_FLAG\n\u003e 16:20:14 -- Performing Test HAVE_C_FLAG - Success\n\u003e ```\n\nA simple test with `printf` using the same flags seems to work. I\u0027ll look a little closer.",
      "parentUuid": "b2c1c7e9_3d5530ec",
      "revId": "aa9a9f0d844e500051a9bbe54981d10460719db6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc158bdb_778360bf",
        "filename": "av1/encoder/encodetxb.c",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-07-12T17:27:25Z",
      "side": 1,
      "message": "\u003e \u003e James: I was using the `%zu` format to print `size_t` values here, but the GCC (GNU 10.0.0) in the mingw configurations does not support the `z` format specifier (a C99 feature):\n\u003e \u003e https://build.aomedia.org/jenkins/job/libaom__commit_trigger/76976/\n\u003e \u003e \n\u003e \u003e Is that expected? The console output shows that compiler supports C99:\n\u003e \u003e \n\u003e \u003e ```\n\u003e \u003e 16:20:14 Checking C compiler flag support for: -std\u003dc99\n\u003e \u003e 16:20:14 -- Performing Test HAVE_C_FLAG\n\u003e \u003e 16:20:14 -- Performing Test HAVE_C_FLAG - Success\n\u003e \u003e ```\n\u003e \n\u003e A simple test with `printf` using the same flags seems to work. I\u0027ll look a little closer.\n\nChanging [`__printf__` to `__gnu_printf__`](https://aomedia.googlesource.com/aom/+/refs/tags/v3.9.1/aom/internal/aom_codec_internal.h#393) works. The same issue persists with {i686,x86_64}-w64-mingw32-gcc-13. I don\u0027t know what other effects that might have.",
      "parentUuid": "27f66f02_d7564d72",
      "revId": "aa9a9f0d844e500051a9bbe54981d10460719db6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4166bc46_a7fd6d60",
        "filename": "av1/encoder/encodetxb.c",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-07-12T17:44:26Z",
      "side": 1,
      "message": "\u003e \u003e \u003e James: I was using the `%zu` format to print `size_t` values here, but the GCC (GNU 10.0.0) in the mingw configurations does not support the `z` format specifier (a C99 feature):\n\u003e \u003e \u003e https://build.aomedia.org/jenkins/job/libaom__commit_trigger/76976/\n\u003e \u003e \u003e \n\u003e \u003e \u003e Is that expected? The console output shows that compiler supports C99:\n\u003e \u003e \u003e \n\u003e \u003e \u003e ```\n\u003e \u003e \u003e 16:20:14 Checking C compiler flag support for: -std\u003dc99\n\u003e \u003e \u003e 16:20:14 -- Performing Test HAVE_C_FLAG\n\u003e \u003e \u003e 16:20:14 -- Performing Test HAVE_C_FLAG - Success\n\u003e \u003e \u003e ```\n\u003e \u003e \n\u003e \u003e A simple test with `printf` using the same flags seems to work. I\u0027ll look a little closer.\n\u003e \n\u003e Changing [`__printf__` to `__gnu_printf__`](https://aomedia.googlesource.com/aom/+/refs/tags/v3.9.1/aom/internal/aom_codec_internal.h#393) works. The same issue persists with {i686,x86_64}-w64-mingw32-gcc-13. I don\u0027t know what other effects that might have.\n\nhttps://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-format-function-attribute\n\nThough it doesn\u0027t seem to be referenced in much older 4.x docs. If we wanted to use this we\u0027d need to check for the availability.",
      "parentUuid": "cc158bdb_778360bf",
      "revId": "aa9a9f0d844e500051a9bbe54981d10460719db6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a3982d21_59eec5b9",
        "filename": "av1/encoder/encodetxb.c",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-07-12T18:17:32Z",
      "side": 1,
      "message": "Thanks a lot for investigating this! With your findings, I found a relevant Stack Overflow article:\nhttps://stackoverflow.com/questions/68900199/how-to-get-mingw-gcc-to-recognize-the-zu-format-specifier-for-size-t\n\nI think I understand the situation now.\n\n1) The `printf()` in the old msvcrt.dll does NOT support the `z` format specifier for `size_t`.\n\n2) The `printf()` in the new UCRT supports the `z` format specifier. (So you must have tested `printf()` with UCRT.)\n\n3) GCC\u0027s printf format checker in mingw assumes the worst case (msvcrt.dll), hence the warning.\n\nIf my understanding is correct, I propose the following.\n\n1) We only supoort the new UCRT mingw environments.\n\n2) We define `LIBAOM_FORMAT_PRINTF(string_index, first_to_check)\n` as empty in mingw.",
      "parentUuid": "4166bc46_a7fd6d60",
      "revId": "aa9a9f0d844e500051a9bbe54981d10460719db6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b9fb865_0714ad57",
        "filename": "av1/encoder/encodetxb.c",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-07-12T18:24:46Z",
      "side": 1,
      "message": "\u003e Thanks a lot for investigating this! With your findings, I found a relevant Stack Overflow article:\n\u003e https://stackoverflow.com/questions/68900199/how-to-get-mingw-gcc-to-recognize-the-zu-format-specifier-for-size-t\n\u003e \n\u003e I think I understand the situation now.\n\u003e \n\u003e 1) The `printf()` in the old msvcrt.dll does NOT support the `z` format specifier for `size_t`.\n\u003e \n\u003e 2) The `printf()` in the new UCRT supports the `z` format specifier. (So you must have tested `printf()` with UCRT.)\n\u003e \n\nI don\u0027t think that\u0027s true. I was building using the older gcc-10 version as well as gcc-13 with their defaults on linux. I looked at stdio.h for those and noticed the use of `__gnu_printf__`. The linux version doesn\u0027t have them at all in the headers, there might be some builtin attributes for them.\n\n\u003e 3) GCC\u0027s printf format checker in mingw assumes the worst case (msvcrt.dll), hence the warning.\n\u003e \n\u003e If my understanding is correct, I propose the following.\n\u003e \n\u003e 1) We only supoort the new UCRT mingw environments.\n\u003e \n\u003e 2) We define `LIBAOM_FORMAT_PRINTF(string_index, first_to_check)\n\u003e ` as empty in mingw.",
      "parentUuid": "a3982d21_59eec5b9",
      "revId": "aa9a9f0d844e500051a9bbe54981d10460719db6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73ea3a8e_e6ed8e94",
        "filename": "av1/encoder/encodetxb.c",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-07-12T18:25:29Z",
      "side": 1,
      "message": "This GCC bug report also has useful info: https://gcc.gnu.org/bugzilla/show_bug.cgi?id\u003d95130",
      "parentUuid": "a3982d21_59eec5b9",
      "revId": "aa9a9f0d844e500051a9bbe54981d10460719db6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a765aea6_fb0be543",
        "filename": "av1/encoder/encodetxb.c",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-07-12T20:39:53Z",
      "side": 1,
      "message": "\u003e This GCC bug report also has useful info: https://gcc.gnu.org/bugzilla/show_bug.cgi?id\u003d95130\n\nI saw that one. I thought that might have to do with a second attribute being ignored on the function.",
      "parentUuid": "73ea3a8e_e6ed8e94",
      "revId": "aa9a9f0d844e500051a9bbe54981d10460719db6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c5454582_feb49f10",
        "filename": "av1/encoder/encodetxb.c",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-07-12T00:42:18Z",
      "side": 1,
      "message": "This multiplication will overflow `int`. (I forgot to save the UBSan error message.) We cast the operands to `size_t`. Since `size_t` may be 32 bits, we still check for potential overflow here and below.",
      "revId": "aa9a9f0d844e500051a9bbe54981d10460719db6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
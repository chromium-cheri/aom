{
  "comments": [
    {
      "key": {
        "uuid": "0d309f99_f1e82fcc",
        "filename": "av1/decoder/decodemv.c",
        "patchSetId": 1
      },
      "lineNbr": 1710,
      "author": {
        "id": 5005
      },
      "writtenOn": "2017-04-10T19:22:24Z",
      "side": 1,
      "message": "Would this be equivalent to the following? \n      for (ref \u003d 0; ref \u003c 1 + is_compound; ++ref) {\n        if (rf[ref] \u003d\u003d NONE_FRAME) continue;\n        lower_mv_precision(\u0026ref_mvs[rf[ref]][0].as_mv, allow_hp);\n        lower_mv_precision(\u0026ref_mvs[rf[ref]][1].as_mv, allow_hp);\n\n        if (ref_mvs[rf[ref]][0].as_int !\u003d zeromv[ref].as_int ||\n            ref_mvs[rf[ref]][1].as_int !\u003d zeromv[ref].as_int)\n          inter_mode_ctx[ref_frame] \u0026\u003d ~(1 \u003c\u003c ALL_ZERO_FLAG_OFFSET);\n      }\n\nIf yes, the bug you were try to fix in previous patch was the indices used in address zeromv[] are wrong and caused the mismatch you were seeing.",
      "range": {
        "startLine": 1700,
        "startChar": 0,
        "endLine": 1710,
        "endChar": 66
      },
      "revId": "6ad4919219ed514a512cfbc6dc607c1fa1962322",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d94b714_22bc0bb0",
        "filename": "av1/decoder/decodemv.c",
        "patchSetId": 1
      },
      "lineNbr": 1710,
      "author": {
        "id": 5186
      },
      "writtenOn": "2017-04-10T19:31:34Z",
      "side": 1,
      "message": "No, I don\u0027t think the two are equivalent because the call to inter_mode_ctx[ref_frame] \u0026\u003d ~(1 \u003c\u003c ALL_ZERO_FLAG_OFFSET) is outside the loop; however, there is an issue here that I addressed in my second patch set.",
      "parentUuid": "0d309f99_f1e82fcc",
      "range": {
        "startLine": 1700,
        "startChar": 0,
        "endLine": 1710,
        "endChar": 66
      },
      "revId": "6ad4919219ed514a512cfbc6dc607c1fa1962322",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    }
  ]
}
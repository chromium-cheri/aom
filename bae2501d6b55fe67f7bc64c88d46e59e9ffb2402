{
  "comments": [
    {
      "key": {
        "uuid": "ccc18c47_eca77806",
        "filename": "aom/src/aom_image.c",
        "patchSetId": 2
      },
      "lineNbr": 351,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-18T20:18:54Z",
      "side": 1,
      "message": "I think we should set img-\u003emetadata_owner to 1 after this line (line 351). In other word, we should set img-\u003emetadata_owner to 1 when we successfully set img-\u003emetadata to a metadata array that we allocated.",
      "revId": "bae2501d6b55fe67f7bc64c88d46e59e9ffb2402",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a32b9863_fd614e14",
        "filename": "aom/src/aom_image.c",
        "patchSetId": 2
      },
      "lineNbr": 365,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-18T20:18:54Z",
      "side": 1,
      "message": "Optional: We should check for realloc() failure. You can do this in a separate CL.\n\nNote: To leaking the original img-\u003emetadata-\u003emetadata_array when realloc() fails, we need to save the return value of realloc() in a local variable first.",
      "range": {
        "startLine": 363,
        "startChar": 0,
        "endLine": 365,
        "endChar": 79
      },
      "revId": "bae2501d6b55fe67f7bc64c88d46e59e9ffb2402",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a937e6ab_f6af6d3d",
        "filename": "aom/src/aom_image.c",
        "patchSetId": 2
      },
      "lineNbr": 369,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-18T20:18:54Z",
      "side": 1,
      "message": "Please see my comment at line 351. I think we should move this line after line 351. We don\u0027t need to set img-\u003emetadata_owner to 1 whenever we add a new element to the metadata array. It is sufficient to set img-\u003emetadata_owner to 1 only once.",
      "revId": "bae2501d6b55fe67f7bc64c88d46e59e9ffb2402",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "099a9a5a_099750e0",
        "filename": "aom/src/aom_image.c",
        "patchSetId": 2
      },
      "lineNbr": 372,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-18T20:18:54Z",
      "side": 1,
      "message": "We need to check if img-\u003emetadata_owner is true before calling aom_img_metadata_array_free().",
      "revId": "bae2501d6b55fe67f7bc64c88d46e59e9ffb2402",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a65f8bf_ed497dc1",
        "filename": "aom/src/aom_image.c",
        "patchSetId": 2
      },
      "lineNbr": 380,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-18T20:18:54Z",
      "side": 1,
      "message": "We need to check if img-\u003emetadata_owner is true before calling aom_img_metadata_array_free().",
      "revId": "bae2501d6b55fe67f7bc64c88d46e59e9ffb2402",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf5c387c_0002f4f9",
        "filename": "aom/src/aom_image.c",
        "patchSetId": 2
      },
      "lineNbr": 390,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-18T20:18:54Z",
      "side": 1,
      "message": "Nit: the array-\u003esz \u003e 0 check can be omitted. If array-\u003esz \u003c\u003d 0, then index \u003c array-\u003esz cannot be true.",
      "range": {
        "startLine": 390,
        "startChar": 12,
        "endLine": 390,
        "endChar": 28
      },
      "revId": "bae2501d6b55fe67f7bc64c88d46e59e9ffb2402",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c50780a4_f26fe8a2",
        "filename": "aom_scale/generic/yv12config.c",
        "patchSetId": 2
      },
      "lineNbr": 305,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-18T20:18:54Z",
      "side": 1,
      "message": "We should set ybf-\u003emetadata_owner to 1 after this line (line 305), because we have just successfully set ybf-\u003emetadata to a metadata array that we allocated.",
      "revId": "bae2501d6b55fe67f7bc64c88d46e59e9ffb2402",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "123f4da3_246bb79b",
        "filename": "aom_scale/generic/yv12config.c",
        "patchSetId": 2
      },
      "lineNbr": 318,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-18T20:18:54Z",
      "side": 1,
      "message": "Move this line after line 305.",
      "revId": "bae2501d6b55fe67f7bc64c88d46e59e9ffb2402",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1bea851c_3ea65a17",
        "filename": "av1/av1_dx_iface.c",
        "patchSetId": 2
      },
      "lineNbr": 772,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-18T20:18:54Z",
      "side": 1,
      "message": "Nit/optional: This is correct but inefficient. We don\u0027t need to do a deep copy here. We can just move (as opposed to copy) the metadata. (In fact, the function name says \"move\".)",
      "range": {
        "startLine": 770,
        "startChar": 0,
        "endLine": 772,
        "endChar": 65
      },
      "revId": "bae2501d6b55fe67f7bc64c88d46e59e9ffb2402",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df64e5db_aa8291c1",
        "filename": "av1/av1_dx_iface.c",
        "patchSetId": 2
      },
      "lineNbr": 772,
      "author": {
        "id": 14148
      },
      "writtenOn": "2019-12-18T21:41:28Z",
      "side": 1,
      "message": "Do you mean just copy the metadata pointer?\nThe deep copy is more for security because I\u0027m not sure the metadata will still be valid/correct when a user wants to actually obtain the img metadata with the API, since pbi metadata is being overwritten every time.",
      "parentUuid": "1bea851c_3ea65a17",
      "range": {
        "startLine": 770,
        "startChar": 0,
        "endLine": 772,
        "endChar": 65
      },
      "revId": "bae2501d6b55fe67f7bc64c88d46e59e9ffb2402",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55cbb37a_b4103535",
        "filename": "av1/av1_dx_iface.c",
        "patchSetId": 2
      },
      "lineNbr": 772,
      "author": {
        "id": 14148
      },
      "writtenOn": "2019-12-19T00:50:35Z",
      "side": 1,
      "message": "Maybe I can change this whole function to a single shallow copy, then setting pbi metadata to null since it won\u0027t be used afterwards and we can prevent the same that with the deep copy.\n\nimg-\u003emetadata \u003d pbi-\u003emetadata;\npbi-\u003emetadata \u003d NULL",
      "parentUuid": "df64e5db_aa8291c1",
      "range": {
        "startLine": 770,
        "startChar": 0,
        "endLine": 772,
        "endChar": 65
      },
      "revId": "bae2501d6b55fe67f7bc64c88d46e59e9ffb2402",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d07dbbff_d4b067f1",
        "filename": "av1/av1_dx_iface.c",
        "patchSetId": 2
      },
      "lineNbr": 772,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-19T19:26:37Z",
      "side": 1,
      "message": "\u003e Maybe I can change this whole function to a single shallow copy, then setting pbi metadata to null since it won\u0027t be used afterwards and we can prevent the same that with the deep copy.\n\u003e \n\u003e img-\u003emetadata \u003d pbi-\u003emetadata;\n\u003e pbi-\u003emetadata \u003d NULL\n\nYes, this is what I meant. (In C++11, this kind of operation is called a \"move\".) We will also need to set img-\u003emetadata_owner to 1 if you decide to keep the metadata_owner field.\n\nAlso, this function should assert that img-\u003emetadata is NULL before the move. So the function would look like this:\n\nstatic void move_decoder_metadata_to_img(AV1Decoder *pbi, aom_image_t *img) {\n  if (pbi-\u003emetadata \u0026\u0026 img) {\n    assert(!img-\u003emetadata);\n    img-\u003emetadata \u003d pbi-\u003emetadata;\n    img-\u003emetadata_owner \u003d 1;\n    pbi-\u003emetadata \u003d NULL;\n  }\n}",
      "parentUuid": "55cbb37a_b4103535",
      "range": {
        "startLine": 770,
        "startChar": 0,
        "endLine": 772,
        "endChar": 65
      },
      "revId": "bae2501d6b55fe67f7bc64c88d46e59e9ffb2402",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "173c4dfa_f2571c29",
        "filename": "av1/av1_dx_iface.c",
        "patchSetId": 2
      },
      "lineNbr": 774,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-18T20:18:54Z",
      "side": 1,
      "message": "Delete this line. This is done inside aom_img_add_metadata.",
      "revId": "bae2501d6b55fe67f7bc64c88d46e59e9ffb2402",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2148a4d0_76acbd06",
        "filename": "av1/av1_dx_iface.c",
        "patchSetId": 2
      },
      "lineNbr": 822,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-18T20:18:54Z",
      "side": 1,
      "message": "IMPORTANT/optional: Now that I see you remove the metadata from both sd and \u0026ctx-\u003eimg before the yuvconfig2image() call, I think a simpler solution to the metadata ownership problem is to change yuvconfig2image() and image2yuvconfig() to *not* copy metadata. Then we don\u0027t need to add the metadata_owner fields to YV12_BUFFER_CONFIG and aom_image_t, because they always own their metadata fields.",
      "revId": "bae2501d6b55fe67f7bc64c88d46e59e9ffb2402",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2a565b1_b65234d9",
        "filename": "av1/av1_dx_iface.c",
        "patchSetId": 2
      },
      "lineNbr": 822,
      "author": {
        "id": 5215
      },
      "writtenOn": "2019-12-18T20:54:21Z",
      "side": 1,
      "message": "+1 to this-- it would be nice to avoid having the ownership field because the setup can be error prone. It\u0027s quite easy to forget about checking for proper usage when reviewing future changes.",
      "parentUuid": "2148a4d0_76acbd06",
      "revId": "bae2501d6b55fe67f7bc64c88d46e59e9ffb2402",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f8aef17_504a455e",
        "filename": "av1/av1_dx_iface.c",
        "patchSetId": 2
      },
      "lineNbr": 822,
      "author": {
        "id": 14148
      },
      "writtenOn": "2019-12-18T21:41:28Z",
      "side": 1,
      "message": "Right now we only do pointer copy, not deep copy. Do you mean we shouldn\u0027t even copy the pointer? and let move_decoder_metadata_to_img() take care of all metadata handling? \n\n\nIn image2yuvconfig() the pointer copy is necessary due to current encoder implementation. We could do a similar approach on encode of giving the metadata copy responsibility to another function for consistency.",
      "parentUuid": "c2a565b1_b65234d9",
      "revId": "bae2501d6b55fe67f7bc64c88d46e59e9ffb2402",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f46966b2_04d8b43a",
        "filename": "av1/av1_dx_iface.c",
        "patchSetId": 2
      },
      "lineNbr": 822,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-19T01:02:47Z",
      "side": 1,
      "message": "\u003e Right now we only do pointer copy, not deep copy.\n\u003e Do you mean we shouldn\u0027t even copy the pointer?\n\u003e and let move_decoder_metadata_to_img() take care\n\u003e of all metadata handling?\n\nYes, I mean yuvconfig2image() shouldn\u0027t even copy the pointer.",
      "parentUuid": "6f8aef17_504a455e",
      "revId": "bae2501d6b55fe67f7bc64c88d46e59e9ffb2402",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e39a88dc_8b10fb1b",
        "filename": "av1/av1_dx_iface.c",
        "patchSetId": 2
      },
      "lineNbr": 823,
      "author": {
        "id": 14148
      },
      "writtenOn": "2019-12-18T21:41:28Z",
      "side": 1,
      "message": "Inside this function we could call aom_img_remove_metadata(\u0026ctx-\u003eimg).",
      "range": {
        "startLine": 823,
        "startChar": 10,
        "endLine": 823,
        "endChar": 38
      },
      "revId": "bae2501d6b55fe67f7bc64c88d46e59e9ffb2402",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42d0b71e_19745e63",
        "filename": "av1/av1_dx_iface.c",
        "patchSetId": 2
      },
      "lineNbr": 828,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-18T20:18:54Z",
      "side": 1,
      "message": "This argument should be \u0026pbi-\u003etile_list_outbuf, not sd, right? Note that we pass \u0026pbi-\u003etile_list_outbuf to the yuvconfig2image() call in line 830.",
      "range": {
        "startLine": 828,
        "startChar": 50,
        "endLine": 828,
        "endChar": 52
      },
      "revId": "bae2501d6b55fe67f7bc64c88d46e59e9ffb2402",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37ff70d9_6524046c",
        "filename": "av1/av1_dx_iface.c",
        "patchSetId": 2
      },
      "lineNbr": 828,
      "author": {
        "id": 14148
      },
      "writtenOn": "2019-12-18T21:41:28Z",
      "side": 1,
      "message": "Copy paste effect from above...",
      "parentUuid": "42d0b71e_19745e63",
      "range": {
        "startLine": 828,
        "startChar": 50,
        "endLine": 828,
        "endChar": 52
      },
      "revId": "bae2501d6b55fe67f7bc64c88d46e59e9ffb2402",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "391f03f4_601751ef",
        "filename": "av1/decoder/obu.c",
        "patchSetId": 2
      },
      "lineNbr": 560,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-18T20:18:54Z",
      "side": 1,
      "message": "Nit/optional: We can rewrite these lines as follows:\n\n  int i \u003d (int)sz - 1;\t\n  while (i \u003e\u003d 0 \u0026\u0026 data[i] \u003d\u003d 0) {\n    --i;\n  }\t\n  return i;",
      "range": {
        "startLine": 555,
        "startChar": 0,
        "endLine": 560,
        "endChar": 12
      },
      "revId": "bae2501d6b55fe67f7bc64c88d46e59e9ffb2402",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d838f10_92b58ad4",
        "filename": "av1/decoder/obu.c",
        "patchSetId": 2
      },
      "lineNbr": 570,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-18T20:18:54Z",
      "side": 1,
      "message": "We should also check for itu_t_t35_country_code_extension_byte if itu_t_t35_country_code \u003d\u003d 0xFF.\n\nIt is fine to include the country code in the metadata block, but we should still validate the country code.",
      "revId": "bae2501d6b55fe67f7bc64c88d46e59e9ffb2402",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a99709c_805858d8",
        "filename": "av1/decoder/obu.c",
        "patchSetId": 2
      },
      "lineNbr": 588,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-18T20:18:54Z",
      "side": 1,
      "message": "Nit/optional: The code here is correct but is inefficient. We need to grow metadata-\u003emetadata_array, but we don\u0027t need to do a deep copy of the existing elements in the array.\n\nFor example, the corresponding code in aom_img_add_metadata() does a shallow copy of the existing elements in the array.",
      "revId": "bae2501d6b55fe67f7bc64c88d46e59e9ffb2402",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c7c02a8_b7263d89",
        "filename": "av1/decoder/obu.c",
        "patchSetId": 2
      },
      "lineNbr": 728,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-18T20:18:54Z",
      "side": 1,
      "message": "Nit/optional: Change this to:\n\n   if (get_last_nonzero_byte_index(data + type_length, sz - type_length) \u003c 0) {",
      "revId": "bae2501d6b55fe67f7bc64c88d46e59e9ffb2402",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c140d5b_3538816a",
        "filename": "av1/decoder/obu.c",
        "patchSetId": 2
      },
      "lineNbr": 991,
      "author": {
        "id": 9545
      },
      "writtenOn": "2019-12-18T20:18:54Z",
      "side": 1,
      "message": "Nit/optional: Change this to:\n\n            get_last_nonzero_byte_index(data, payload_size) \u003c 0) {",
      "revId": "bae2501d6b55fe67f7bc64c88d46e59e9ffb2402",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "06c209a0_9c9bf9f7",
        "filename": "test/encoder_parms_get_to_decoder.cc",
        "patchSetId": 2
      },
      "lineNbr": 139,
      "author": {
        "id": 5010
      },
      "writtenOn": "2017-04-20T20:28:35Z",
      "side": 1,
      "message": "if video fails to allocate can you do video.get()?",
      "range": {
        "startLine": 139,
        "startChar": 20,
        "endLine": 139,
        "endChar": 23
      },
      "revId": "6514d6c05657321f2d7844ae6da8da9c2a46b4a3",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db1696b9_f6dd1752",
        "filename": "test/encoder_parms_get_to_decoder.cc",
        "patchSetId": 2
      },
      "lineNbr": 139,
      "author": {
        "id": 5020
      },
      "writtenOn": "2017-04-20T22:03:23Z",
      "side": 1,
      "message": "\u003e if video fails to allocate can you do video.get()?\n\nvideo itself isn\u0027t a pointer, the allocation goes to its constructor (or reset) to wrap the pointer. Calling get() is always safe to retrieve the value of the allocation. See unique_ptr (its c++11 descendant) for details:\n\nhttp://en.cppreference.com/w/cpp/memory/unique_ptr",
      "parentUuid": "06c209a0_9c9bf9f7",
      "range": {
        "startLine": 139,
        "startChar": 20,
        "endLine": 139,
        "endChar": 23
      },
      "revId": "6514d6c05657321f2d7844ae6da8da9c2a46b4a3",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68429fd1_0a7994cf",
        "filename": "test/encoder_parms_get_to_decoder.cc",
        "patchSetId": 2
      },
      "lineNbr": 139,
      "author": {
        "id": 5010
      },
      "writtenOn": "2017-04-20T22:04:54Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "db1696b9_f6dd1752",
      "range": {
        "startLine": 139,
        "startChar": 20,
        "endLine": 139,
        "endChar": 23
      },
      "revId": "6514d6c05657321f2d7844ae6da8da9c2a46b4a3",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "adca3f8d_35225f26",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-05-09T19:24:19Z",
      "side": 1,
      "message": "We dealt with OOMs in the libaom decoder before in two ways.\n\n1. By actually reducing the memory consumption. I did this by setting a conditional breakpoint in aom_memalign for size greater than a threshold and inspecting the big allocations.\n\n2. By setting`AOM_MAX_ALLOCABLE_MEMORY`, `DECODE_WIDTH_LIMIT`, and `DECODE_HEIGHT_LIMIT` in the build script. See https://github.com/google/oss-fuzz/blob/master/projects/libaom/build.sh\n\nShould we try these two methods, especially the second one, for the two new OOM bugs?",
      "revId": "14b12991a928c9b986db995db5d2ed8fdf9fcb8c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b00a95fb_98041acc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-05-09T20:47:14Z",
      "side": 1,
      "message": "\u003e We dealt with OOMs in the libaom decoder before in two ways.\n\u003e \n\u003e 1. By actually reducing the memory consumption. I did this by setting a conditional breakpoint in aom_memalign for size greater than a threshold and inspecting the big allocations.\n\u003e \n\u003e 2. By setting`AOM_MAX_ALLOCABLE_MEMORY`, `DECODE_WIDTH_LIMIT`, and `DECODE_HEIGHT_LIMIT` in the build script. See https://github.com/google/oss-fuzz/blob/master/projects/libaom/build.sh\n\u003e \n\u003e Should we try these two methods, especially the second one, for the two new OOM bugs?\n\n2 is already done. I forgot to consider AOM_MAX_ALLOCABLE_MEMORY that will probably achieve the same thing here.",
      "parentUuid": "adca3f8d_35225f26",
      "revId": "14b12991a928c9b986db995db5d2ed8fdf9fcb8c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22af8118_85369393",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-05-09T20:49:02Z",
      "side": 1,
      "message": "\u003e \u003e We dealt with OOMs in the libaom decoder before in two ways.\n\u003e \u003e \n\u003e \u003e 1. By actually reducing the memory consumption. I did this by setting a conditional breakpoint in aom_memalign for size greater than a threshold and inspecting the big allocations.\n\u003e \u003e \n\u003e \u003e 2. By setting`AOM_MAX_ALLOCABLE_MEMORY`, `DECODE_WIDTH_LIMIT`, and `DECODE_HEIGHT_LIMIT` in the build script. See https://github.com/google/oss-fuzz/blob/master/projects/libaom/build.sh\n\u003e \u003e \n\u003e \u003e Should we try these two methods, especially the second one, for the two new OOM bugs?\n\u003e \n\u003e 2 is already done. I forgot to consider AOM_MAX_ALLOCABLE_MEMORY that will probably achieve the same thing here.\n\nThough it is already in use. It will need to be reduced.",
      "parentUuid": "b00a95fb_98041acc",
      "revId": "14b12991a928c9b986db995db5d2ed8fdf9fcb8c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0344e5ba_fa059268",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-05-09T22:26:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "22af8118_85369393",
      "revId": "14b12991a928c9b986db995db5d2ed8fdf9fcb8c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f85164c_469fdf68",
        "filename": "examples/av1_dec_fuzzer.cc",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-05-09T21:03:41Z",
      "side": 1,
      "message": "It is good to keep the `aom_codec_peek_stream_info()` call.",
      "revId": "14b12991a928c9b986db995db5d2ed8fdf9fcb8c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51b075fd_2832b742",
        "filename": "examples/av1_dec_fuzzer.cc",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-05-09T22:26:20Z",
      "side": 1,
      "message": "\u003e It is good to keep the `aom_codec_peek_stream_info()` call.\n\nDone.",
      "parentUuid": "2f85164c_469fdf68",
      "revId": "14b12991a928c9b986db995db5d2ed8fdf9fcb8c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7dd612ee_063119d5",
        "filename": "examples/av1_dec_fuzzer.cc",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-05-09T19:24:19Z",
      "side": 1,
      "message": "Are `DECODE_WIDTH_LIMIT` and `DECODE_HEIGHT_LIMIT` not working well to stop the two new OOM bugs?",
      "revId": "14b12991a928c9b986db995db5d2ed8fdf9fcb8c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b31210dd_29181fb3",
        "filename": "examples/av1_dec_fuzzer.cc",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-05-09T20:47:14Z",
      "side": 1,
      "message": "\u003e Are `DECODE_WIDTH_LIMIT` and `DECODE_HEIGHT_LIMIT` not working well to stop the two new OOM bugs?\n\nThey\u0027re set higher than what might be feasible, especially for high bitdepth where we might have 8 reference buffers.",
      "parentUuid": "7dd612ee_063119d5",
      "revId": "14b12991a928c9b986db995db5d2ed8fdf9fcb8c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "14b12991a928c9b986db995db5d2ed8fdf9fcb8c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "14b12991a928c9b986db995db5d2ed8fdf9fcb8c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "14b12991a928c9b986db995db5d2ed8fdf9fcb8c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
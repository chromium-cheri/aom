{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "adca3f8d_35225f26",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-05-09T19:24:19Z",
      "side": 1,
      "message": "We dealt with OOMs in the libaom decoder before in two ways.\n\n1. By actually reducing the memory consumption. I did this by setting a conditional breakpoint in aom_memalign for size greater than a threshold and inspecting the big allocations.\n\n2. By setting`AOM_MAX_ALLOCABLE_MEMORY`, `DECODE_WIDTH_LIMIT`, and `DECODE_HEIGHT_LIMIT` in the build script. See https://github.com/google/oss-fuzz/blob/master/projects/libaom/build.sh\n\nShould we try these two methods, especially the second one, for the two new OOM bugs?",
      "revId": "14b12991a928c9b986db995db5d2ed8fdf9fcb8c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7dd612ee_063119d5",
        "filename": "examples/av1_dec_fuzzer.cc",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-05-09T19:24:19Z",
      "side": 1,
      "message": "Are `DECODE_WIDTH_LIMIT` and `DECODE_HEIGHT_LIMIT` not working well to stop the two new OOM bugs?",
      "revId": "14b12991a928c9b986db995db5d2ed8fdf9fcb8c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
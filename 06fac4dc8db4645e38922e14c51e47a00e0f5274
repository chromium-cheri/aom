{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9414f37a_734fee7d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-02-22T23:41:53Z",
      "side": 1,
      "message": "How do I reproduce the compiler warnings? (No need to add the steps to the commit message.)",
      "revId": "06fac4dc8db4645e38922e14c51e47a00e0f5274",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48e5dfb1_6c298cfb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-02-22T23:54:21Z",
      "side": 1,
      "message": "\u003e How do I reproduce the compiler warnings? (No need to add the steps to the commit message.)\n\nI saw them with `aarch64-linux-gnu-gcc (Debian 12.2.0-3) 12.2.0` and likely `arm-linux-gnueabihf-gcc`. Using build/cmake/toolchains/arm64-linux-gcc.cmake should be enough.",
      "parentUuid": "9414f37a_734fee7d",
      "revId": "06fac4dc8db4645e38922e14c51e47a00e0f5274",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a867272_2baa3f97",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-02-22T23:41:53Z",
      "side": 1,
      "message": "Thank you for analyzing the code.",
      "revId": "06fac4dc8db4645e38922e14c51e47a00e0f5274",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcf28032_76c3ee1b",
        "filename": "av1/encoder/av1_fwd_txfm2d.c",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-02-22T19:53:47Z",
      "side": 1,
      "message": "This and line 50 look like an earlier attempt at fixing this warning. They were added in https://aomedia-review.googlesource.com/c/aom/+/17640.\n\nThey were also added to av1/common/av1_inv_txfm2d.c.",
      "revId": "06fac4dc8db4645e38922e14c51e47a00e0f5274",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf1fd73b_ad6b7a50",
        "filename": "av1/encoder/av1_fwd_txfm2d.c",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-02-22T20:24:46Z",
      "side": 1,
      "message": "\u003e This and line 50 look like an earlier attempt at fixing this warning. They were added in https://aomedia-review.googlesource.com/c/aom/+/17640.\n\u003e \n\u003e They were also added to av1/common/av1_inv_txfm2d.c.\n\nI missed this. It\u0027s one way around it, but the check should be redundant so we\u0027re adding unnecessary overhead.",
      "parentUuid": "bcf28032_76c3ee1b",
      "revId": "06fac4dc8db4645e38922e14c51e47a00e0f5274",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3d6762ef_9ef04c79",
        "filename": "av1/encoder/av1_fwd_txfm2d.c",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-02-22T23:32:51Z",
      "side": 1,
      "message": "\u003e \u003e This and line 50 look like an earlier attempt at fixing this warning. They were added in https://aomedia-review.googlesource.com/c/aom/+/17640.\n\u003e \u003e \n\u003e \u003e They were also added to av1/common/av1_inv_txfm2d.c.\n\u003e \n\u003e I missed this. It\u0027s one way around it, but the check should be redundant so we\u0027re adding unnecessary overhead.\n\nI\u0027ll normalize to this form first with a note in the commit message.",
      "parentUuid": "bf1fd73b_ad6b7a50",
      "revId": "06fac4dc8db4645e38922e14c51e47a00e0f5274",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "efd7bd36_8f0dcc58",
        "filename": "av1/encoder/av1_fwd_txfm2d.c",
        "patchSetId": 1
      },
      "lineNbr": 394,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-02-22T18:26:01Z",
      "side": 1,
      "message": "I don\u0027t have a better workaround at the moment and I think in general the warning is useful. If these were int type the warning wouldn\u0027t be emitted.",
      "range": {
        "startLine": 394,
        "startChar": 40,
        "endLine": 394,
        "endChar": 46
      },
      "revId": "06fac4dc8db4645e38922e14c51e47a00e0f5274",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc4043e8_537e7bb8",
        "filename": "av1/encoder/av1_fwd_txfm2d.c",
        "patchSetId": 1
      },
      "lineNbr": 405,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-02-22T19:53:47Z",
      "side": 1,
      "message": "This line should be moved into the if block at line 406. See the corresponding line 416 for `range_mult2_row`.",
      "revId": "06fac4dc8db4645e38922e14c51e47a00e0f5274",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc305600_4330b9dc",
        "filename": "av1/encoder/av1_fwd_txfm2d.c",
        "patchSetId": 1
      },
      "lineNbr": 405,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-02-22T20:24:46Z",
      "side": 1,
      "message": "\u003e This line should be moved into the if block at line 406. See the corresponding line 416 for `range_mult2_row`.\n\nIt\u0027s used at line 420. So there\u0027s an assumption that this is 2D, but that may not be true.",
      "parentUuid": "dc4043e8_537e7bb8",
      "revId": "06fac4dc8db4645e38922e14c51e47a00e0f5274",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68d40ea7_e0672be1",
        "filename": "av1/encoder/av1_fwd_txfm2d.c",
        "patchSetId": 1
      },
      "lineNbr": 405,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-02-22T23:32:51Z",
      "side": 1,
      "message": "\u003e \u003e This line should be moved into the if block at line 406. See the corresponding line 416 for `range_mult2_row`.\n\u003e \n\u003e It\u0027s used at line 420. So there\u0027s an assumption that this is 2D, but that may not be true.\n\nI\u0027ll fix the warning first and then convert the checks to asserts.",
      "parentUuid": "bc305600_4330b9dc",
      "revId": "06fac4dc8db4645e38922e14c51e47a00e0f5274",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66479127_f41d81c3",
        "filename": "av1/encoder/av1_fwd_txfm2d.c",
        "patchSetId": 1
      },
      "lineNbr": 445,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-02-22T19:53:47Z",
      "side": 1,
      "message": "These two lines should be guarded by checks similar to line 406 and line 413. The `av1_txfm_type_ls` array contains some `TXFM_TYPE_INVALID` entries, so `cfg-\u003etxfm_type_col` and `cfg-\u003etxfm_type_row` may potentially be equal to `TXFM_TYPE_INVALID`.\n\nA good way to do that is to move these two lines into `set_fwd_txfm_non_scale_range()`. If `cfg-\u003etxfm_type_col` is invalid, we probably should set `cfg-\u003estage_num_col` to 0. Similarly for `cfg-\u003estage_num_row`.",
      "range": {
        "startLine": 444,
        "startChar": 0,
        "endLine": 445,
        "endChar": 67
      },
      "revId": "06fac4dc8db4645e38922e14c51e47a00e0f5274",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "362b3d36_60a0a3ab",
        "filename": "av1/encoder/av1_fwd_txfm2d.c",
        "patchSetId": 1
      },
      "lineNbr": 445,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-02-22T20:24:46Z",
      "side": 1,
      "message": "\u003e These two lines should be guarded by checks similar to line 406 and line 413. The `av1_txfm_type_ls` array contains some `TXFM_TYPE_INVALID` entries, so `cfg-\u003etxfm_type_col` and `cfg-\u003etxfm_type_row` may potentially be equal to `TXFM_TYPE_INVALID`.\n\u003e \n\u003e A good way to do that is to move these two lines into `set_fwd_txfm_non_scale_range()`. If `cfg-\u003etxfm_type_col` is invalid, we probably should set `cfg-\u003estage_num_col` to 0. Similarly for `cfg-\u003estage_num_row`.\n\nThis is unfortunate.",
      "parentUuid": "66479127_f41d81c3",
      "range": {
        "startLine": 444,
        "startChar": 0,
        "endLine": 445,
        "endChar": 67
      },
      "revId": "06fac4dc8db4645e38922e14c51e47a00e0f5274",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "908db916_cbcd9ea7",
        "filename": "av1/encoder/av1_fwd_txfm2d.c",
        "patchSetId": 1
      },
      "lineNbr": 445,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-02-22T23:32:51Z",
      "side": 1,
      "message": "\u003e \u003e These two lines should be guarded by checks similar to line 406 and line 413. The `av1_txfm_type_ls` array contains some `TXFM_TYPE_INVALID` entries, so `cfg-\u003etxfm_type_col` and `cfg-\u003etxfm_type_row` may potentially be equal to `TXFM_TYPE_INVALID`.\n\u003e \u003e \n\nLooking a little more closely, `TXFM_TYPE_INVALID` should be impossible and the checks made into assert()s. The entries in `av1_txfm_type_ls` describe the possible transforms for each block size. ADST only goes to 16, identity to 32, etc.\n\n\u003e \u003e A good way to do that is to move these two lines into `set_fwd_txfm_non_scale_range()`. If `cfg-\u003etxfm_type_col` is invalid, we probably should set `cfg-\u003estage_num_col` to 0. Similarly for `cfg-\u003estage_num_row`.\n\u003e \n\u003e This is unfortunate.",
      "parentUuid": "362b3d36_60a0a3ab",
      "range": {
        "startLine": 444,
        "startChar": 0,
        "endLine": 445,
        "endChar": 67
      },
      "revId": "06fac4dc8db4645e38922e14c51e47a00e0f5274",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
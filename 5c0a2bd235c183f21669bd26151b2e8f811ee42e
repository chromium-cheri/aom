{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "209d22cf_c3d15daa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 32923
      },
      "writtenOn": "2023-10-13T13:07:24Z",
      "side": 1,
      "message": "This CL fixes the memory leaks due to the thread-specific `mv_costs` and `dv_costs` allocated in `prepare_enc_workers()` in case of an early termination by adding the aom_free() calls for the same in `free_thread_data()`.\n \nDirectly invoking aom_free() on thread-specific `mv_costs` and `dv_costs` in `free_thread_data()` can result in double free error for some cases. For e.g., freeing `thread_data-\u003etd-\u003emb.mv_costs` after first pass encode as it points to the same address as `cpi-\u003etd.mb.mv_costs` which would have already been freed in `dealloc_compressor_data()`. Hence, the allocation and freeing of `x-\u003emv_costs` and `x-\u003edv_costs` are done using newly introduced `mv_costs_base_ptr` and `dv_costs_base_ptr` respectively in ThreadData structure. `x-\u003emv_costs` and `x-\u003edv_costs` are initialized appropriately using these base pointers.\n\nThis change is bit-exact and has been verified using bitstream-match tests for a combination of various configuration values for --threads, --tile-rows, --tile-columns, --cpu-used, --end-usage, --row-mt, --fp-mt, etc. Validated all unit-tests with sanitizers (address and thread) and valgrind.",
      "revId": "5c0a2bd235c183f21669bd26151b2e8f811ee42e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c97740e_683a6778",
        "filename": "av1/encoder/encoder.h",
        "patchSetId": 2
      },
      "lineNbr": 1445,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-10-13T22:15:45Z",
      "side": 1,
      "message": "is this extra indirection necessary, could the original pointers just be freed and nulled?",
      "revId": "5c0a2bd235c183f21669bd26151b2e8f811ee42e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89a448b4_8e73946a",
        "filename": "av1/encoder/encoder.h",
        "patchSetId": 2
      },
      "lineNbr": 1445,
      "author": {
        "id": 32923
      },
      "writtenOn": "2023-10-16T11:59:27Z",
      "side": 1,
      "message": "For some MT modules, `thread_data-\u003etd-\u003emb.mv_costs` is not thread-specific and  points to the same memory as `cpi-\u003etd.mb.mv_costs` (e.g., fp_prepare_enc_workers() - please check line 1627 in ethread.c). For these cases, even though `cpi-\u003etd.mb.mv_costs` is freed and set to NULL, `thread_data-\u003etd-\u003emb.mv_costs` will hold the address of the freed memory resulting in double free error. To avoid this scenario, the base_ptr is introduced. Please check the review message where an example w.r.t. first pass encode is explained.",
      "parentUuid": "2c97740e_683a6778",
      "revId": "5c0a2bd235c183f21669bd26151b2e8f811ee42e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
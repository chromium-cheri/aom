{
  "comments": [
    {
      "key": {
        "uuid": "26a2bf07_6e3a98c6",
        "filename": "aom/internal/aom_codec_internal.h",
        "patchSetId": 2
      },
      "lineNbr": 168,
      "author": {
        "id": 9545
      },
      "writtenOn": "2020-05-01T21:19:58Z",
      "side": 1,
      "message": "Optional: We can also define CTRL_MAP_END as { -1, NULL } (as in the original code), and change this comment to say \"positive\" instead of \"non-zero\".\n\nMore important, I don\u0027t understand how a catch-all mapping can be useful. Maybe we should remove that feature.",
      "range": {
        "startLine": 167,
        "startChar": 12,
        "endLine": 168,
        "endChar": 25
      },
      "revId": "defe893ca261fe232d939ae7028f7f7fb583062c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e60b073_798105a0",
        "filename": "aom/internal/aom_codec_internal.h",
        "patchSetId": 2
      },
      "lineNbr": 168,
      "author": {
        "id": 10034
      },
      "writtenOn": "2020-05-01T21:42:03Z",
      "side": 1,
      "message": "I do not either. Let\u0027s just remove it since there is no catch-all in the code.",
      "parentUuid": "26a2bf07_6e3a98c6",
      "range": {
        "startLine": 167,
        "startChar": 12,
        "endLine": 168,
        "endChar": 25
      },
      "revId": "defe893ca261fe232d939ae7028f7f7fb583062c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a7cbd5c_a6a8fb31",
        "filename": "aom/internal/aom_codec_internal.h",
        "patchSetId": 2
      },
      "lineNbr": 176,
      "author": {
        "id": 9545
      },
      "writtenOn": "2020-05-01T21:19:58Z",
      "side": 1,
      "message": "This macro does not need to have the function-like form. Also, we should not need to use line continuation. Does this work?\n\n#define CTRL_MAP_END { 0, NULL }",
      "range": {
        "startLine": 175,
        "startChar": 0,
        "endLine": 176,
        "endChar": 13
      },
      "revId": "defe893ca261fe232d939ae7028f7f7fb583062c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21a778bb_a0471f05",
        "filename": "aom/internal/aom_codec_internal.h",
        "patchSetId": 2
      },
      "lineNbr": 176,
      "author": {
        "id": 10034
      },
      "writtenOn": "2020-05-01T21:42:03Z",
      "side": 1,
      "message": "That does not work (if a macro has {  } in it, it must start with (), otherwise you get a compiler error)",
      "parentUuid": "3a7cbd5c_a6a8fb31",
      "range": {
        "startLine": 175,
        "startChar": 0,
        "endLine": 176,
        "endChar": 13
      },
      "revId": "defe893ca261fe232d939ae7028f7f7fb583062c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c29f249e_0d0af03c",
        "filename": "aom/internal/aom_codec_internal.h",
        "patchSetId": 2
      },
      "lineNbr": 176,
      "author": {
        "id": 9545
      },
      "writtenOn": "2020-05-02T18:41:23Z",
      "side": 1,
      "message": "I looked into this. clang-format does not require (), but it does insert the line continuation backslash. I consider this a quirk of clang-format. I suggest we remove ():\n\n  #define CTRL_MAP_END \\\n    { 0, NULL }",
      "parentUuid": "21a778bb_a0471f05",
      "range": {
        "startLine": 175,
        "startChar": 0,
        "endLine": 176,
        "endChar": 13
      },
      "revId": "defe893ca261fe232d939ae7028f7f7fb583062c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c42276e_f403e6bb",
        "filename": "aom/internal/aom_codec_internal.h",
        "patchSetId": 2
      },
      "lineNbr": 176,
      "author": {
        "id": 10034
      },
      "writtenOn": "2020-05-04T02:07:46Z",
      "side": 1,
      "message": "Weird, it compiles now. Maybe I was doing something wrong. I prefer it without the () as well, so it\u0027s updated now.",
      "parentUuid": "c29f249e_0d0af03c",
      "range": {
        "startLine": 175,
        "startChar": 0,
        "endLine": 176,
        "endChar": 13
      },
      "revId": "defe893ca261fe232d939ae7028f7f7fb583062c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7410aa5f_b57f15aa",
        "filename": "aom/internal/aom_codec_internal.h",
        "patchSetId": 2
      },
      "lineNbr": 276,
      "author": {
        "id": 9545
      },
      "writtenOn": "2020-05-02T18:41:23Z",
      "side": 1,
      "message": "[Just a comment. No change requested.] ctrl_maps has two problems:\n\n1. It requires aom_codec_control() to search in ctrl_maps (currently a linear search).\n2. It is hard to detect duplicate entries in ctrl_maps.\n\nIf we replace ctrl_maps with a \u0027control\u0027 function pointer, then the \u0027control\u0027 function can be implemented with a switch statement, which automatically detect control id conflicts between aom.h and aomcx.h or between aom.h and aomdx.h. (However, it cannot detect control id conflicts between aomcx.h and aomdx.h because AV1 decoder and encoder are implemented as separate aom_codec_iface objects.)\n\nAs an interim solution to problem #2, we can add code, possibly conditionally compiled in debug mode only, to aom_codec_dec_init_ver and aom_codec_enc_init_ver to search in ctrl_maps for duplicate entries.",
      "revId": "defe893ca261fe232d939ae7028f7f7fb583062c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "144a7454_607c20fa",
        "filename": "aom/internal/aom_codec_internal.h",
        "patchSetId": 2
      },
      "lineNbr": 276,
      "author": {
        "id": 10034
      },
      "writtenOn": "2020-05-04T02:09:05Z",
      "side": 1,
      "message": "Agree -- I was thinking the same thing. However, this is outside the scope of the bug.",
      "parentUuid": "7410aa5f_b57f15aa",
      "revId": "defe893ca261fe232d939ae7028f7f7fb583062c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d9d88c2_48279835",
        "filename": "aom/src/aom_codec.c",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 9545
      },
      "writtenOn": "2020-05-01T21:19:58Z",
      "side": 1,
      "message": "Delete this? I don\u0027t see \u0027bool\u0027, \u0027true\u0027 or \u0027false\u0027 used in this file.",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 20
      },
      "revId": "defe893ca261fe232d939ae7028f7f7fb583062c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de1d5084_2a581b57",
        "filename": "aom/src/aom_codec.c",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 10034
      },
      "writtenOn": "2020-05-01T21:42:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6d9d88c2_48279835",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 20
      },
      "revId": "defe893ca261fe232d939ae7028f7f7fb583062c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    }
  ]
}
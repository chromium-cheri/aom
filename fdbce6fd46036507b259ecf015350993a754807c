{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "bbd9358e_2dc5cc09",
        "filename": "test/ratectrl_qmode_test.cc",
        "patchSetId": 10
      },
      "lineNbr": 600,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-04-28T15:46:28Z",
      "side": 1,
      "message": "It just occurred to me: is there any reason for firstpass_stats and kf_group_duration to be separate data files? It would be easy to change the code which generates them to spit out a C++ aggregate definition, and just define them in code, allowing the test to be more self-contained.",
      "range": {
        "startLine": 600,
        "startChar": 2,
        "endLine": 600,
        "endChar": 15
      },
      "revId": "fdbce6fd46036507b259ecf015350993a754807c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "222dc88d_8837ffb2",
        "filename": "test/ratectrl_qmode_test.cc",
        "patchSetId": 10
      },
      "lineNbr": 600,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-04-28T16:36:14Z",
      "side": 1,
      "message": "One other thing: the test currently passes if the files can\u0027t be found, because both vectors end up as [0]. If the test is going to read from data files, it should probably do some error checking to verify that the file was read correctly. Unfortunately doing that when reading from ifstream is a little tricky.\n\nOne possibility would be to keep the fp stats in a data file, but hardcode the durations (or even the key frame numbers) into the test, i.e., \nEXPECT_THAT(get_key_frame_list(firstpass_info),\n            ElementsAre(0, 30, 60, 90, 120, 150, 180, 210, 240));",
      "parentUuid": "bbd9358e_2dc5cc09",
      "range": {
        "startLine": 600,
        "startChar": 2,
        "endLine": 600,
        "endChar": 15
      },
      "revId": "fdbce6fd46036507b259ecf015350993a754807c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39956d06_05171e4f",
        "filename": "test/ratectrl_qmode_test.cc",
        "patchSetId": 10
      },
      "lineNbr": 600,
      "author": {
        "id": 5960
      },
      "writtenOn": "2022-04-28T16:37:44Z",
      "side": 1,
      "message": "Firstpass stats could be used on multiple tests so it could be used repeatedly without reading the file without other unrelated data.\n\nThe place where it is spit out is C code. How can we change C code to do that? I assume you\u0027re talking about defining stream operator for the structure?",
      "parentUuid": "bbd9358e_2dc5cc09",
      "range": {
        "startLine": 600,
        "startChar": 2,
        "endLine": 600,
        "endChar": 15
      },
      "revId": "fdbce6fd46036507b259ecf015350993a754807c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01332245_2514b843",
        "filename": "test/ratectrl_qmode_test.cc",
        "patchSetId": 10
      },
      "lineNbr": 600,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-04-28T16:42:04Z",
      "side": 1,
      "message": "On your first point, that could be handled with parameterized tests.\nThe pass data file name and the expected frame locations (or durations) could be test parameters.\nI had been thinking parameterized tests might be a good idea anyway, so that we could test that hardware stats and libaom stats both give the same result.\n\nOn the second point, I just meant something like this:\n\n printf(\"{%f, %f, %f, %f, ... etc. %f},\\n\");\n\ninstead of printing out with spaces in between.\n\nThen you could easily paste it into a declaration in the code, and let clang-format fix it up.\n\nBut perhaps the best approach is to leave the fp stats in a data file, but keep the expectations in the code.",
      "parentUuid": "39956d06_05171e4f",
      "range": {
        "startLine": 600,
        "startChar": 2,
        "endLine": 600,
        "endChar": 15
      },
      "revId": "fdbce6fd46036507b259ecf015350993a754807c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f988103_ec0f7d5d",
        "filename": "test/ratectrl_qmode_test.cc",
        "patchSetId": 10
      },
      "lineNbr": 634,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-04-28T16:36:14Z",
      "side": 1,
      "message": "go/c-readability-advice#using-the-testing-namespace-with-expect-that",
      "range": {
        "startLine": 634,
        "startChar": 14,
        "endLine": 634,
        "endChar": 21
      },
      "revId": "fdbce6fd46036507b259ecf015350993a754807c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
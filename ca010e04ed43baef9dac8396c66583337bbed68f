{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "724b3c33_11d094a4",
        "filename": "third_party/googletest/src/googletest/include/gtest/internal/gtest-internal.h",
        "patchSetId": 1
      },
      "lineNbr": 1294,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-04-14T19:11:32Z",
      "side": 1,
      "message": "this is really where they could use do/while",
      "revId": "ca010e04ed43baef9dac8396c66583337bbed68f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "28f5ee5a_01f34a46",
        "filename": "third_party/googletest/src/googletest/include/gtest/internal/gtest-internal.h",
        "patchSetId": 1
      },
      "lineNbr": 1294,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-04-14T19:21:33Z",
      "side": 1,
      "message": "You mean putting the if statement inside do-while?\n\n```\n#define GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement) \\\n  do {                                                          \\\n    if (::testing::internal::AlwaysTrue()) { statement; }       \\\n  } while (false)\n```",
      "parentUuid": "724b3c33_11d094a4",
      "revId": "ca010e04ed43baef9dac8396c66583337bbed68f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "19d14ae0_40cbac03",
        "filename": "third_party/googletest/src/googletest/include/gtest/internal/gtest-internal.h",
        "patchSetId": 1
      },
      "lineNbr": 1294,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-04-14T19:42:39Z",
      "side": 1,
      "message": "Agreed. It\u0027s odd that it\u0027s not just do { statement; } while(0),\nbut perhaps they have their reasons. ¯\\_(ツ)_/¯",
      "parentUuid": "724b3c33_11d094a4",
      "revId": "ca010e04ed43baef9dac8396c66583337bbed68f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9191b6a8_8d5834fe",
        "filename": "third_party/googletest/src/googletest/include/gtest/internal/gtest-internal.h",
        "patchSetId": 1
      },
      "lineNbr": 1294,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-04-14T19:56:02Z",
      "side": 1,
      "message": "Oh yeah, I guess you need the AlwaysTrue to leave the compiler guessing about whether it will be executed or not. \n\nIn any case,  my inclination would be to cherry pick it now; there\u0027s no point in diverging from upstream.\n\nI was going to say you could ask calabrese@ why he didn\u0027t use do/while in cl/311327491, but he seems to have left Google in 2020.",
      "parentUuid": "19d14ae0_40cbac03",
      "revId": "ca010e04ed43baef9dac8396c66583337bbed68f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b155297_b2d70453",
        "filename": "third_party/googletest/src/googletest/include/gtest/internal/gtest-internal.h",
        "patchSetId": 1
      },
      "lineNbr": 1294,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-04-14T19:58:52Z",
      "side": 1,
      "message": "Wan-Teh, yes that\u0027s what I meant. I didn\u0027t mean to cause confusion, I wasn\u0027t suggesting a change be made here. I just found the comment and structure suspicious.",
      "parentUuid": "9191b6a8_8d5834fe",
      "revId": "ca010e04ed43baef9dac8396c66583337bbed68f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "ca010e04ed43baef9dac8396c66583337bbed68f",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "ca010e04ed43baef9dac8396c66583337bbed68f",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "ca010e04ed43baef9dac8396c66583337bbed68f",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ad0f0f22_bab7e060",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9611
      },
      "writtenOn": "2023-03-20T09:03:22Z",
      "side": 1,
      "message": "The below shows the summary of speed levels that support compound type evaluation and MV refinement in the parent version.\n```\nCompound Type     Speeds for which      Speeds for which MV\n                  tool is enabled       refinement is enabled\nAVERAGE                All                        ≤ 4\nDISTWTD                ≤ 1                        ≤ 1\nWEDGE                  ≤ 3                        ≤ 3\nDIFFWTD                All                        ≤ 1\n```\nFrom the above it is seen that, only COMPOUND_AVERAGE and COMPOUND_DIFFWTD types are enabled and MV refinement for the same types are disabled for speeds 5 and 6. The sf `enable_fast_compound_mode_search` is used to enable/disable the MV refinement for COMPOUND_AVERAGE, COMPOUND_DISTWTD (currently, this compound type is disabled for speeds \u003e\u003d 2 using the sf `use_dist_wtd_comp_flag`) and COMPOUND_DIFFWTD types based on the availability (i.e. if the compound type is enabled).\nIn the parent version, the sf is set as follows.\n- 0: MV Refinement is enabled for all compound modes and uses two iterations of refinement in av1_joint_motion_search() for NEW_NEWMV mode.\n- 1: MV Refinement is disabled for COMPOUND_DIFFWTD and enabled for COMPOUND_AVERAGE \u0026 COMPOUND_DISTWTD.\n- 2: MV Refinement is disabled\n\nFor speeds 5 and 6, we conducted few experiments by enabling MV refinement for different frame types, modes, etc., From the results it is seen that enabling MV refinement for only NEW_NEWMV mode with reduced number of iterations in `av1_joint_motion_search()` gives a better trade-off (i.e. more bd-rate improvement with less increase in encode time).\n\nThis CL enables the MV refinement for speeds 5 and 6 by modifying the existing sf `enable_fast_compound_mode_search` as below in order to support the approach as mentioned before.\n\n- 0: MV Refinement is enabled and for NEW_NEWMV mode uses two iterations of refinement in `av1_joint_motion_search()`.\n- 1: MV Refinement is disabled for COMPOUND_DIFFWTD and enabled for COMPOUND_AVERAGE \u0026 COMPOUND_DISTWTD.\n- 2: MV Refinement is enabled for COMPOUND_AVERAGE \u0026 COMPOUND_DISTWTD for NEW_NEWMV mode with one iteration of refinement in `av1_joint_motion_search()` and MV refinement is disabled for other compound type modes.\n- 3: MV Refinement is disabled (this level is not used after the CL)\n\nThe below shows the borg results for \u0027good’ encoding mode\n```\n                   Instruction Count      BD-Rate Loss(%)\n   cpu   Testset       Reduction(%)    avg.psnr   ovr.psnr   ssim\n    5     LOWRES2      -1.423         -0.3728    -0.3773    -0.2676\n    5     MIDRES2      -1.540         -0.4068    -0.4097    -0.3025\n    5      HDRES2      -1.806         -0.6438    -0.6424    -0.5366\n    6     LOWRES2      -1.763         -0.5167    -0.5321    -0.3449\n    6     MIDRES2      -1.588         -0.5520    -0.5623    -0.3898\n    6      HDRES2      -1.374         -0.7545    -0.7282    -0.5728\n```\nThe instruction count reduction specified has been measured using command:\n`$ perf stat -e instructions:u ./aomenc …`\n\nWe verified that the CL is bit-exact for speed \u003c\u003d 4. Please review the CL.",
      "revId": "ce3f7cb68bdd49ae5dbf7387ad0796a0ec8d84d4",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
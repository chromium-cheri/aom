{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "33c7668f_b4b14bf0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 25857
      },
      "writtenOn": "2022-11-03T13:50:19Z",
      "side": 1,
      "message": "Hi Wan-Teh, Frank, Marco,\n\nIn this CL, should_skip_postproc_filtering() is modified to handle all possible cases to skip the application of post-processing filters on the reconstructed frame for ALLINTRA encode (based on tool configuration and speed features). An enum \u0027SKIP_POSTPROC_FILTER_APPL\u0027 is newly introduced which is used to set the bit-mask \u0027skip_apply_postproc_filters\u0027 if:\n\n1.subsequent post-processing stages are not dependent on the filtered output from the current stage or\n2.subsequent post-processing stages are disabled\n\nThis is a bit-exact change. For AVIF still-image encode on a typical image dataset, this change results in 0.036% and 0.068% instruction count reduction for speed 3 and 4 respectively (since the application of loop restoration filters are being skipped with this CL).\n\nFor libaom AV1 video encode, bit-match is verified (w.r.t. parent commit) for \u0027GOOD\u0027, \u0027RT\u0027 and \u0027ALLINTRA\u0027 encoding modes for a few contents with different encoding configurations. \n\nWe see that the application of deblocking and CDEF filters on the reconstructed frame is skipped for non-reference frames in case of svc encoding. We can choose to modify the relevant code as in the current CL. Please let us know your opinion on pursuing the above mentioned refactoring in a separate CL.\n\nPlease review.\n\nRegards,\nMudassir",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4f85712_b180c577",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 25857
      },
      "writtenOn": "2022-11-07T13:54:47Z",
      "side": 1,
      "message": "Hi Chi Yo, Yunqing,\n\nPlease review this patch.\n\nRegards,\nMudassir",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c88cb95_836da6e6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5185
      },
      "writtenOn": "2022-11-07T17:14:24Z",
      "side": 1,
      "message": "I didn\u0027t follow your CLs on post-processing filter skipping. What is this CL for? Any feature implementation or only some refactoring?",
      "parentUuid": "a4f85712_b180c577",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "218cd4db_2414e4cc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-11-07T23:03:17Z",
      "side": 1,
      "message": "\u003e We see that the application of deblocking and CDEF filters on the reconstructed frame is skipped for non-reference frames in case of svc encoding. We can choose to modify the relevant code as in the current CL. Please let us know your opinion on pursuing the above mentioned refactoring in a separate CL.\n\nI think it\u0027s a good idea to pursue this refactoring in a separate CL.",
      "parentUuid": "33c7668f_b4b14bf0",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b44e77a5_c428963d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-11-07T23:03:17Z",
      "side": 1,
      "message": "Hi Mudassir,\n\nThank you for the CL. Sorry about the late reply because I was out of the office.\n\nI suggest some changes.",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c663d8a_bb77b855",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 25857
      },
      "writtenOn": "2022-11-08T14:42:45Z",
      "side": 1,
      "message": "Hi Yunqing,\nWe had earlier submitted a CL ( https://aomedia-review.googlesource.com/c/aom/+/162681) which skips  the application of deblocking filters on reconstructed frames in case of ALLINTRA encode, as the frame is never referenced. This CL handles all possible cases (based on tool configuration and speed features) to skip the application of different post-processing filters (not just deblocking filters) on the reconstructed frame for ALLINTRA encode.",
      "parentUuid": "0c88cb95_836da6e6",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "187b453c_f46de698",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5185
      },
      "writtenOn": "2022-11-08T16:45:46Z",
      "side": 1,
      "message": "Thanks for the explanation! Good that Wan-Teh was back and reviewing the CL.",
      "parentUuid": "6c663d8a_bb77b855",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b46bd746_0115c7ca",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 2
      },
      "lineNbr": 2219,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-11-07T23:03:17Z",
      "side": 1,
      "message": "Nit: change `uint8_t` to `unsigned int` to match the return type of `derive_skip_apply_postproc_filters()`.",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e58ca263_d9cca65c",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 2
      },
      "lineNbr": 2219,
      "author": {
        "id": 25857
      },
      "writtenOn": "2022-11-08T14:42:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b46bd746_0115c7ca",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e812dd3_245fa505",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 2
      },
      "lineNbr": 2266,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-11-07T23:03:17Z",
      "side": 1,
      "message": "Nit: I suggest removing the following early return statement from `av1_superres_post_encode()`:\n\n```\n  if (!av1_superres_scaled(cm)) return;\n```\n\nAnd put lines 2264-2266 inside an if statement:\n\n```\n  const int use_superres \u003d av1_superres_scaled(cm);\n  if (use_superres) {\n    if ((skip_apply_postproc_filters \u0026 (1 \u003c\u003c SKIP_APPL_SR)) \u003d\u003d 0) {\n      av1_superres_post_encode(cpi);\n    }\n  }\n```\n\nThis makes it clear that the `SKIP_APPL_SR` bit is only checked when `use_superres` is true, similar to when the other SKIP_APPL_xxx` bits are checked.",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4261e89f_cf4fed3e",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 2
      },
      "lineNbr": 2266,
      "author": {
        "id": 25857
      },
      "writtenOn": "2022-11-08T14:42:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1e812dd3_245fa505",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6abef40_2520a4cd",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 2
      },
      "lineNbr": 2335,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-11-07T23:03:17Z",
      "side": 1,
      "message": "Nit: change `uint8_t` to `unsigned int` to match the return type of `derive_skip_apply_postproc_filters()`.",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "919852a6_db504651",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 2
      },
      "lineNbr": 2335,
      "author": {
        "id": 25857
      },
      "writtenOn": "2022-11-08T14:42:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b6abef40_2520a4cd",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff3ad658_fc5217a6",
        "filename": "av1/encoder/encoder.h",
        "patchSetId": 2
      },
      "lineNbr": 240,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-11-07T23:03:17Z",
      "side": 1,
      "message": "Nit: Do not use abbreviations in the comments. Say \"loop restoration filter\" instead of \"LRF\", \"super resolution\" instead of \"SR\", etc. \"CDEF\" is okay because the abbreviation is commonly used.\n\nIn fact, it is not necessary to use abbreviations in the enum names. We can model after the parameter names of `derive_skip_apply_postproc_filters()`:\n\n```\nstatic INLINE unsigned int derive_skip_apply_postproc_filters(\n    const AV1_COMP *cpi, int use_loopfilter, int use_cdef, int use_superres,\n    int use_restoration) {\n```",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "545fedc6_98abfa78",
        "filename": "av1/encoder/encoder.h",
        "patchSetId": 2
      },
      "lineNbr": 240,
      "author": {
        "id": 25857
      },
      "writtenOn": "2022-11-08T14:42:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ff3ad658_fc5217a6",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa4cef37_6f26f45a",
        "filename": "av1/encoder/encoder.h",
        "patchSetId": 2
      },
      "lineNbr": 243,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-11-07T23:03:17Z",
      "side": 1,
      "message": "Define these enum values as follows (I omitted the comments for brevity):\n\n```\ntypedef enum {\n  SKIP_APPL_LRF \u003d 1 \u003c\u003c 0,\n  SKIP_APPL_SR \u003d 1 \u003c\u003c 1,\n  SKIP_APPL_CDEF \u003d 1 \u003c\u003c 2,\n  SKIP_APPL_LPF \u003d 1 \u003c\u003c 3,\n} SKIP_POSTPROC_FILTER_APPL;\n```\n\nThen change `1 \u003c\u003c SKIP_APPL_LRF` to `SKIP_APPL_LRF`, etc.",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b7bfb21_d70566f4",
        "filename": "av1/encoder/encoder.h",
        "patchSetId": 2
      },
      "lineNbr": 243,
      "author": {
        "id": 25857
      },
      "writtenOn": "2022-11-08T14:42:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aa4cef37_6f26f45a",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10739c2d_c8dcfcc0",
        "filename": "av1/encoder/encoder.h",
        "patchSetId": 2
      },
      "lineNbr": 244,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-11-07T23:03:17Z",
      "side": 1,
      "message": "1. Nit: I suggest naming this enum type `SKIP_APPL_POSTPROC_FILTER` so that it matches the name convention of its values `SKIP_APPL_xxx`.\n\n2. Optional: In addition, it might be good to change \"APPL\" to \"APPLY\" to match the variable name `skip_apply_postproc_filters` and function name `derive_skip_apply_postproc_filters`, even though the word \"application\" (a noun) is more grammatical than \"apply\" (a verb).",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e88edefc_bfc3b44b",
        "filename": "av1/encoder/encoder.h",
        "patchSetId": 2
      },
      "lineNbr": 244,
      "author": {
        "id": 25857
      },
      "writtenOn": "2022-11-08T14:42:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "10739c2d_c8dcfcc0",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34af7722_704ac3a5",
        "filename": "av1/encoder/encoder.h",
        "patchSetId": 2
      },
      "lineNbr": 4152,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-11-07T23:03:17Z",
      "side": 1,
      "message": "Nit: This case is not obvious and could be explained with a comment.",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "513f2684_296c88a9",
        "filename": "av1/encoder/encoder.h",
        "patchSetId": 2
      },
      "lineNbr": 4152,
      "author": {
        "id": 25857
      },
      "writtenOn": "2022-11-08T14:42:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "34af7722_704ac3a5",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2945d99_a5a118f0",
        "filename": "av1/encoder/encoder.h",
        "patchSetId": 2
      },
      "lineNbr": 4156,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-11-07T23:03:17Z",
      "side": 1,
      "message": "Optional: It would be helpful to explain why `use_restoration`, `use_superres`, `use_cdef`, `use_loopfilter` must be checked in this order. I think it has to do with the input-output relations between the post-processing filters. Most people are probably not familiar with that.",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a484656_853f7d9c",
        "filename": "av1/encoder/encoder.h",
        "patchSetId": 2
      },
      "lineNbr": 4156,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-11-07T23:03:17Z",
      "side": 1,
      "message": "Nit: Do not use \"else\" after a return statement:\n\n```\n  if (use_restoration)\n    return 1 \u003c\u003c SKIP_APPL_LRF;\n  if (use_superres)\n    return 1 \u003c\u003c SKIP_APPL_SR;\n  if (use_cdef) {\n    return (cpi-\u003esf.lpf_sf.cdef_pick_method \u003d\u003d CDEF_PICK_FROM_Q \u0026\u0026\n            use_loopfilter)\n               ? (1 \u003c\u003c SKIP_APPL_LPF) | (1 \u003c\u003c SKIP_APPL_CDEF)\n               : 1 \u003c\u003c SKIP_APPL_CDEF;\n  }\n  if (use_loopfilter)\n    return 1 \u003c\u003c SKIP_APPL_LPF;\n```",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0e2b53f_aa715845",
        "filename": "av1/encoder/encoder.h",
        "patchSetId": 2
      },
      "lineNbr": 4156,
      "author": {
        "id": 25857
      },
      "writtenOn": "2022-11-08T14:42:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1a484656_853f7d9c",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1edc1549_440f812f",
        "filename": "av1/encoder/encoder.h",
        "patchSetId": 2
      },
      "lineNbr": 4156,
      "author": {
        "id": 25857
      },
      "writtenOn": "2022-11-08T14:42:45Z",
      "side": 1,
      "message": "We have taken care of your suggestion by  modifying the comment in line 4139 to indicate the order in which different post-processing filters are applied. Also, the first point in the comment in line 4143 indicates that the input to one stage is dependent on the output from the previous stage.",
      "parentUuid": "a2945d99_a5a118f0",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d0121a2_94a4536d",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 2
      },
      "lineNbr": 1610,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-11-07T23:03:17Z",
      "side": 1,
      "message": "Nit: change `uint8_t` to `unsigned int` to match the return type of `derive_skip_apply_postproc_filters()`.",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1914bf9_c5f79c0e",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 2
      },
      "lineNbr": 1610,
      "author": {
        "id": 25857
      },
      "writtenOn": "2022-11-08T14:42:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7d0121a2_94a4536d",
      "revId": "5f4b9e5b65646a665f414c93d3be6642456caf27",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b1dcdba3_258caf4d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 33002
      },
      "writtenOn": "2023-10-16T13:44:25Z",
      "side": 1,
      "message": "In the parent version, `sb_org_stats` is allocated locally in `encode_rd_sb()` and freed at the end of the function. In case of an early termination between this allocation and free calls, this will show up as leaks. In order to fix this issue, the allocation of `SB_FIRST_PASS_STATS` buffer is done using a pointer introduced in the MACROBLOCK structure so that it can be freed in `encoder_destroy()`.\n\nThis change is bit-exact and has been verified using bitstream-match tests for a combination of various configuration values for --threads, --tile-rows, --tile-columns, --cpu-used, --end-usage, --row-mt, --fp-mt, etc. Validated all unit-tests with sanitizers (address and thread) and valgrind.",
      "revId": "fcd197d4cedf7ecf7cb8bb477e795187d0fdb740",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7710e40a_12cfa3b1",
        "filename": "av1/encoder/encodeframe.c",
        "patchSetId": 5
      },
      "lineNbr": 813,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-10-16T21:09:54Z",
      "side": 1,
      "message": "can this be moved to the block at 846? Are there any aom_internal_error calls in that scope?",
      "revId": "fcd197d4cedf7ecf7cb8bb477e795187d0fdb740",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "865814ca_81e43cb9",
        "filename": "av1/encoder/encodeframe.c",
        "patchSetId": 5
      },
      "lineNbr": 813,
      "author": {
        "id": 33002
      },
      "writtenOn": "2023-10-17T13:38:53Z",
      "side": 1,
      "message": "\u003d\u003e can this be moved to the block at 846? \nAs per our code study, moving the allocation of `sb_org_stats` to the block at 846 seems to be feasible. But this change needs to be validated by running some tests.\nIn case the above change can be done, do you recommend using a stack allocation for this structure (similar to line 889) and thus avoiding the heap memory allocation ?\n\n\u003d\u003e Are there any aom_internal_error calls in that scope?\nYes, there are multiple `aom_internal_error()` calls within this scope. For e.g., \n`av1_alloc_pc_tree_node()` calls in `sb_qp_sweep() -\u003e av1_rd_pick_partition()`.",
      "parentUuid": "7710e40a_12cfa3b1",
      "revId": "fcd197d4cedf7ecf7cb8bb477e795187d0fdb740",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79e6991f_bb7d6d90",
        "filename": "av1/encoder/encodeframe.c",
        "patchSetId": 5
      },
      "lineNbr": 813,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-10-17T20:01:45Z",
      "side": 1,
      "message": "\u003e \u003d\u003e can this be moved to the block at 846? \n\u003e As per our code study, moving the allocation of `sb_org_stats` to the block at 846 seems to be feasible. But this change needs to be validated by running some tests.\n\u003e In case the above change can be done, do you recommend using a stack allocation for this structure (similar to line 889) and thus avoiding the heap memory allocation ?\n\u003e \n\nThe structure is ~19K. It\u0027s good to try to keep the stack size down, we have some warnings for this. I wonder if this is the reason it was made an allocation. Lin, any comments on the reasoning?\n\nIf you can scope the variable, then for consistency a stack variable would be all right. If there are size issues identified later then both instances should be addressed.\n\n\u003e \u003d\u003e Are there any aom_internal_error calls in that scope?\n\u003e Yes, there are multiple `aom_internal_error()` calls within this scope. For e.g., \n\u003e `av1_alloc_pc_tree_node()` calls in `sb_qp_sweep() -\u003e av1_rd_pick_partition()`.",
      "parentUuid": "865814ca_81e43cb9",
      "revId": "fcd197d4cedf7ecf7cb8bb477e795187d0fdb740",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac9c3906_41c8b830",
        "filename": "av1/encoder/encodeframe.c",
        "patchSetId": 5
      },
      "lineNbr": 813,
      "author": {
        "id": 33002
      },
      "writtenOn": "2023-10-19T12:46:00Z",
      "side": 1,
      "message": "We ran a few quick tests to check if the allocation can be moved within the block of line 846 and observed that the results are bit-exact. Depending on Lin\u0027s confirmation, we shall plan to submit this change (using stack allocation).",
      "parentUuid": "79e6991f_bb7d6d90",
      "revId": "fcd197d4cedf7ecf7cb8bb477e795187d0fdb740",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8258ef82_0629ac1e",
        "filename": "av1/encoder/encodeframe.c",
        "patchSetId": 5
      },
      "lineNbr": 813,
      "author": {
        "id": 31132
      },
      "writtenOn": "2023-10-19T14:15:18Z",
      "side": 1,
      "message": "James, I saw the stack size warnings before, but I can\u0027t remember if this one does.\n\nSatheesh, thanks for the tests. When you ran the tests, did you turn sb_qp_sweep on? It\u0027s off by default, and it\u0027s configurable in av1_cx_iface.c.\n\nIf no size warning by using it to stack allocation, nor no behavior impact with sb_qp_sweep\u003d1, I\u0027m fine to move this one to line 846 block. Thanks.",
      "parentUuid": "ac9c3906_41c8b830",
      "revId": "fcd197d4cedf7ecf7cb8bb477e795187d0fdb740",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d45aef46_61287342",
        "filename": "av1/encoder/encodeframe.c",
        "patchSetId": 5
      },
      "lineNbr": 813,
      "author": {
        "id": 33002
      },
      "writtenOn": "2023-10-20T14:17:57Z",
      "side": 1,
      "message": "Hi Lin, James,\n\nYes, we observed bit-match after setting `--sb-qp-sweep\u003d1`. But while testing for a windows VS build, we observed that the existing stack allocation (line no: 889) throws stack overflow warnings as below\n`C6262 Function uses \u002719540\u0027 bytes of stack: exceeds /analyze:stacksize \u002716384\u0027.`  `Consider moving some data to heap. aom_av1_encoder \u003c\u003e \\aom\\av1\\encoder\\encodeframe.c 757.`\n\nWe can overcome this issue by either increasing the allowed stack size (-Wstack-usage) or by moving the existing stack allocation to heap. Since these allocations are not present in a typical use-case we think the later solution would be preferred.\n\nWe shall proceed by adding one more pointer named `sb_fp_stats` in MACROBLOCK structure to handle the allocation at 889 similar to the changes done for `sb_org_stats`. Though the usage of these 2 structures do not overlap and the relevant memory can be overlaid, we shall add 2 separate instances as highlighted above for readability. Please let us know your opinion.",
      "parentUuid": "8258ef82_0629ac1e",
      "revId": "fcd197d4cedf7ecf7cb8bb477e795187d0fdb740",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
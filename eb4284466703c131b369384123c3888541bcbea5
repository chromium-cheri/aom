{
  "comments": [
    {
      "key": {
        "uuid": "15931d59_ee5484dd",
        "filename": "av1/common/blockd.c",
        "patchSetId": 5
      },
      "lineNbr": 205,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-05-26T18:34:12Z",
      "side": 1,
      "message": "I love these asserts to document your assumptions.\n\nBut if you\u0027re requiring that plane \u003d\u003d 0, maybe it should be removed as a parameter to this function entirely?",
      "revId": "eb4284466703c131b369384123c3888541bcbea5",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70b8c0cf_c5bf5fd0",
        "filename": "av1/common/blockd.c",
        "patchSetId": 5
      },
      "lineNbr": 216,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-05-26T18:34:12Z",
      "side": 1,
      "message": "As you may know, I\u0027m trying to move the TX_2X2 transform size behind the chroma_2x2 flag in \u003chttps://aomedia-review.googlesource.com/#/c/11826/\u003e, since cb4x4 does not actually need it. I could add this special case to that patch, but you can also write this as\n\nif ((r \u0026 tx_size_high_unit[TX_4X4]) \u0026\u0026 (c \u0026 tx_size_wide_unit[TX_4X4])) {\n  mi_visit(plane, i, r - tx_size_high_unit[TX_4X4], c - tx_size_wide_unit[TX_4X4], plane_bsize, tx_size, arg);\n\nand it will work both with and without cb4x4 (and later both with and without chroma_2x2).\n\nAlso, if tx_size is TX_4X8 or TX_8X4, only one of the two conditions above will be true, instead of both of them, or did I misunderstand something?",
      "revId": "eb4284466703c131b369384123c3888541bcbea5",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8518efaa_7f18c345",
        "filename": "av1/encoder/block.h",
        "patchSetId": 5
      },
      "lineNbr": 216,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-05-26T18:34:12Z",
      "side": 1,
      "message": "Since you are indexing this based on TX units, is a hard-coded 256 a good idea here? I think this should be defined in terms of some named constants. I don\u0027t think 256 is enough with TX_2X2 defined, nor with 128x128 superblocks enabled.",
      "revId": "eb4284466703c131b369384123c3888541bcbea5",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f954101c_08f56cf6",
        "filename": "av1/encoder/block.h",
        "patchSetId": 5
      },
      "lineNbr": 218,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-05-26T18:34:12Z",
      "side": 1,
      "message": "Is it okay for this to be a uint8_t? Or will that break for high bit-depth (which is now the default)?",
      "revId": "eb4284466703c131b369384123c3888541bcbea5",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    }
  ]
}
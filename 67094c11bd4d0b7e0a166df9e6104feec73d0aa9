{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "06819056_5bcab1b2",
        "filename": "test/dr_prediction_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-01-11T00:35:39Z",
      "side": 1,
      "message": "I think `bw_` should be changed to `dst_stride`.",
      "range": {
        "startLine": 199,
        "startChar": 26,
        "endLine": 199,
        "endChar": 35
      },
      "revId": "67094c11bd4d0b7e0a166df9e6104feec73d0aa9",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "611a7e61_8eb3441a",
        "filename": "test/dr_prediction_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 200,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-01-11T00:35:39Z",
      "side": 1,
      "message": "[This is a pre-existing problem.] This seems wrong. I think this should be the other way around:\n\n```\n        dst_tst[i] \u003d dst_ref[i];\n```",
      "revId": "67094c11bd4d0b7e0a166df9e6104feec73d0aa9",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2096da6_35d86dc0",
        "filename": "test/dr_prediction_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 229,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-01-10T18:48:03Z",
      "side": 1,
      "message": "add `#include \u003cvector\u003e`",
      "revId": "67094c11bd4d0b7e0a166df9e6104feec73d0aa9",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4114a40d_dfd423af",
        "filename": "test/dr_prediction_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 230,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-01-10T18:48:03Z",
      "side": 1,
      "message": "this can be const",
      "revId": "67094c11bd4d0b7e0a166df9e6104feec73d0aa9",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3ebc8ab_77c41573",
        "filename": "test/dr_prediction_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 230,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-01-11T00:35:39Z",
      "side": 1,
      "message": "I wonder if some SIMD function requires each row to be 32-byte or 64-byte aligned. If so, then `dst_stride` need to be a multiple of the alignment size.",
      "revId": "67094c11bd4d0b7e0a166df9e6104feec73d0aa9",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22b258a6_9a9f2ede",
        "filename": "test/dr_prediction_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 230,
      "author": {
        "id": 31817
      },
      "writtenOn": "2024-01-11T17:37:48Z",
      "side": 1,
      "message": "if we need to pad the vector to 32 or 64 bytes anyway then i guess that defeats the idea of being able to catch the over-write with address sanitizer? i could guard the allocation such that we only allocate the exact bounds on aarch64 and fall back to the old 64*64 allocation on other arches or something like that? what would you prefer?",
      "parentUuid": "a3ebc8ab_77c41573",
      "revId": "67094c11bd4d0b7e0a166df9e6104feec73d0aa9",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
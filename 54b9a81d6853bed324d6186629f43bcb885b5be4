{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "861a9dae_b25975a5",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 8
      },
      "lineNbr": 3119,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-10T03:05:41Z",
      "side": 1,
      "message": "Cheng: There is a memory leak here. I am debugging this.\n\nI think we probably need to put lines 3116-3124 inside `if (ppi-\u003ep_mt_info.num_workers \u003e 1)`.",
      "revId": "54b9a81d6853bed324d6186629f43bcb885b5be4",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b908bb0_549b6444",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 8
      },
      "lineNbr": 3123,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-10T16:02:35Z",
      "side": 1,
      "message": "I verified tha memory leak can be fixed by putting lines 3117-3123 inside `if (ppi-\u003ep_mt_info.num_workers \u003e 1)`.\n\n```\n#if CONFIG_MULTITHREAD\n    if (ppi-\u003ep_mt_info.num_workers \u003e 1) {\n      for (int i \u003d 0; i \u003c ppi-\u003enum_fp_contexts; i++) {\n        av1_init_mt_sync(ppi-\u003eparallel_cpi[i],\n                         ppi-\u003eparallel_cpi[i]-\u003eoxcf.pass \u003d\u003d AOM_RC_FIRST_PASS);\n      }\n      if (cpi_lap !\u003d NULL) {\n        av1_init_mt_sync(cpi_lap, 1);\n      }\n    }\n#endif  // CONFIG_MULTITHREAD\n```\n\nBut I just realized that we do not need the change here to pass the tests. I suggest that this CL contain only the smallest (and safest) changes to fix the crash. Then we write a separate CL to make the change here so that we can analyze the relevant code better.",
      "revId": "54b9a81d6853bed324d6186629f43bcb885b5be4",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60d47ddf_b75ba7d0",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 8
      },
      "lineNbr": 3123,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-10T16:10:15Z",
      "side": 1,
      "message": "I forgot to explain the reason for the memory leak.\n\nIn `av1_remove_compressor()`, the memory is freed as follows:\n\n```\n  if (mt_info-\u003enum_workers \u003e 1) {\n    av1_loop_filter_dealloc(\u0026mt_info-\u003elf_row_sync);\n    av1_cdef_mt_dealloc(\u0026mt_info-\u003ecdef_sync);\n#if !CONFIG_REALTIME_ONLY\n    av1_loop_restoration_dealloc(\u0026mt_info-\u003elr_row_sync, mt_info-\u003elr_row_sync.num_workers);\n    av1_tf_mt_dealloc(\u0026mt_info-\u003etf_sync);\n#endif\n  }\n```\n\nThat code assumes the memory is allocated only if `mt_info-\u003enum_workers \u003e 1`. That\u0027s why we should put the code here in the same if conditional.\n\nNote: `av1_remove_compressor()` operates on `cpi`. Here we have not copied `ppi-\u003ep_mt_info` to `cpi` yet, so we need to check `ppi-\u003ep_mt_info.num_workers` instead. We will copy `ppi-\u003ep_mt_info` to `cpi` at lines 3140-3145 below.",
      "parentUuid": "1b908bb0_549b6444",
      "revId": "54b9a81d6853bed324d6186629f43bcb885b5be4",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
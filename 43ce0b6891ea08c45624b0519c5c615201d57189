{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "77371db3_1b0287de",
        "filename": "av1/encoder/av1_fwd_txfm2d.c",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-01-31T17:39:42Z",
      "side": 1,
      "message": "`row_buffer` is passed as the first argument to this `av1_round_shift_array()` call. `av1_round_shift_array` has only one SIMD specialization (sse4_1) for x86:\n\n```\n# Helper functions.\nadd_proto qw/void av1_round_shift_array/, \"int32_t *arr, int size, int bit\";\nspecialize \"av1_round_shift_array\", qw/sse4_1 neon/;\n```\n\n`av1_round_shift_array_sse4_1()` casts its first parameter to `__m128i *`:\n\n```\nvoid av1_round_shift_array_sse4_1(int32_t *arr, int size, int bit) {\n  __m128i *const vec \u003d (__m128i *)arr;\n  const int vec_size \u003d size \u003e\u003e 2;\n  av1_round_shift_array_32_sse4_1(vec, vec, vec_size, bit);\n}\n```\n\nSo `row_buffer` needs to be 16-byte aligned.\n\nNote: I also inspected `av1_round_shift_array_neon()`. It does not have any alignment requirement beyond `int32_t`:\n\n```\nvoid av1_round_shift_array_neon(int32_t *arr, int size, int bit) {\n  assert(!(size % 4));\n  if (!bit) return;\n  const int32x4_t dup_bits_n_32x4 \u003d vdupq_n_s32((int32_t)(-bit));\n  for (int i \u003d 0; i \u003c size; i +\u003d 4) {\n    int32x4_t tmp_q_s32 \u003d vld1q_s32(arr);\n    tmp_q_s32 \u003d vrshlq_s32(tmp_q_s32, dup_bits_n_32x4);\n    vst1q_s32(arr, tmp_q_s32);\n    arr +\u003d 4;\n  }\n}\n```",
      "revId": "43ce0b6891ea08c45624b0519c5c615201d57189",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "43ce0b6891ea08c45624b0519c5c615201d57189",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "43ce0b6891ea08c45624b0519c5c615201d57189",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "43ce0b6891ea08c45624b0519c5c615201d57189",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "497700a2_b9fdf0a1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 9545
      },
      "writtenOn": "2020-05-08T16:31:04Z",
      "side": 1,
      "message": "I looked at the implementation of aom_codec_dec_init() and aom_codec_enc_init(). I found that they make an effort to preserve the err_detail string from the codec_iface\u0027s init function:\n\n    res \u003d ctx-\u003eiface-\u003einit(ctx);\n    if (res) {\n      ctx-\u003eerr_detail \u003d ctx-\u003epriv ? ctx-\u003epriv-\u003eerr_detail : NULL;\n      aom_codec_destroy(ctx);\n    }\n\nI suggest we remove the ctx-\u003eerr_detail line.\n\nDetails:\n\nIn the current implementation, ctx-\u003eiface-\u003einit is either decode_init() or encoder_init(). Neither of them sets ctx-\u003eerr_detail or ctx-\u003epriv-\u003eerr_detail on failure. So the only error info we have after a failed codec init is the error code, which is available as the return value (also redundantly in ctx-\u003eerr).\n\nLooking at this more closely, I believe that ctx-\u003epriv-\u003eerr_detail, when set, often points to the following \u0027detail\u0027 buffer somewhere in ctx-\u003epriv:\n\nstruct aom_internal_error_info {\n  aom_codec_err_t error_code;\n  int has_detail;\n  char detail[80];\n  int setjmp;  // Boolean: whether \u0027jmp\u0027 is valid.\n  jmp_buf jmp;\n};\n\nThat buffer is gone after the aom_codec_destroy() call, which frees ctx-\u003epriv. So ctx-\u003eerr_detail would be a dangling pointer. Therefore, I suggest that we delete the line:\n\n      ctx-\u003eerr_detail \u003d ctx-\u003epriv ? ctx-\u003epriv-\u003eerr_detail : NULL;\n\nfrom aom_codec_dec_init() and aom_codec_enc_init() (or set ctx-\u003eerr_detail to NULL).",
      "revId": "d31d719a5817e345b9b488b05961d586996714e3",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ff41eae_fe5c4115",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 9545
      },
      "writtenOn": "2020-05-08T17:17:10Z",
      "side": 1,
      "message": "I found some code that sets err_detail to a string literal (e.g., the RANGE_CHECK macro). So the problematic case is when err_detail is set after an aom_internal_error() call.",
      "parentUuid": "497700a2_b9fdf0a1",
      "revId": "d31d719a5817e345b9b488b05961d586996714e3",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9b45ea2_dcb47e8c",
        "filename": "examples/aom_cx_set_ref.c",
        "patchSetId": 3
      },
      "lineNbr": 296,
      "author": {
        "id": 9545
      },
      "writtenOn": "2020-05-08T16:31:04Z",
      "side": 1,
      "message": "Nit/optional: We could print the error code, but that requires either using ecodec.err (contradicting our statement that the state of ecodec is undefined at this point) or capturing the return value in a local variable. I don\u0027t want to make you do more work, so we can wait until we actually run into a codec init failure to do that.",
      "revId": "d31d719a5817e345b9b488b05961d586996714e3",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    }
  ]
}
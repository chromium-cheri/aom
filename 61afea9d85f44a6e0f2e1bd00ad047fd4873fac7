{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ba2cd2d2_87a4330c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9611
      },
      "writtenOn": "2022-02-17T08:06:09Z",
      "side": 1,
      "message": "Hi James, Yunqing,\n\nDuring our study of row-mt decoding, we observed that currently when a thread encounters an internal error during decoding it ends the processing of the current thread and also sets flags accordingly to avoid fetching the next job. But it was not addressed how the other threads which are in conditional wait can come out of it. The hang issue arose when an SB row (erroneous row) processed by a thread encountered an internal error and another thread waited on processing of this erroneous row (due to top-right sync). The current CL addresses the issue by ensuring that other threads which wait upon the completion of SB\u0027s present in erroneous row are not waited indefinitely.\n\nEven though the hang issue is resolved/addressed in this patch, it can happen that the thread which comes out of conditional wait will go ahead and process the SB with erroneous decoding information of top superblocks. This process was not needed to happen and the whole decoding can exit whenever an internal error hits. This also can be avoided by using the flag ‘row_mt_exit’ (it\u0027s a common variable across threads which was set when an error occurs), but accessing of this flag needs to be under mutex lock, which is an overhead for error-free streams. Please let us know if we should address this through patch submission.\n\nWe observed a build failure in patch-set1, as structure cm was derived inside the signal_decoding_done_for_erroneous_row() which calls upon hitting longjmp() when internal error occurs. The compiler assumes that the state of structure cm might be clobbered by longjmp() as it was first derived in row_mt_worker_hook() before doing setjmp(). The same problem should have been seen with structure pbi, but it was not. To silence this warning, we have moved the structure cm derivation to after setjmp() in row_mt_worker_hook().\n\nPlease let us know your opinion on the fix and merge the same in case of no issues.\n\nThanks \u0026 Regards,\nVenkata.\n",
      "revId": "61afea9d85f44a6e0f2e1bd00ad047fd4873fac7",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "affcbd51_6a34846c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5185
      },
      "writtenOn": "2022-02-17T16:17:54Z",
      "side": 1,
      "message": "Looks good. Thanks for fixing it!",
      "revId": "61afea9d85f44a6e0f2e1bd00ad047fd4873fac7",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da40e7c1_b1040e22",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5185
      },
      "writtenOn": "2022-02-18T00:55:15Z",
      "side": 1,
      "message": "Also, the potential issue you mentioned above -- was that reproducible or based on logical derivation? Namely, if we fix it, is there any way to test it?\n\nTo fix that, would the overhead you mentioned be significant? If not, it is better to fix that. Can it be done in a separate CL?\n\nThanks for the study.",
      "parentUuid": "ba2cd2d2_87a4330c",
      "revId": "61afea9d85f44a6e0f2e1bd00ad047fd4873fac7",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b24df574_28135b99",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9611
      },
      "writtenOn": "2022-02-18T12:07:54Z",
      "side": 1,
      "message": "Hi Yunqing,\n\nAbove behavior is introduced with the current fix and it is related to unnecessary decoding time spent by a thread when another thread encounters an internal error.\n\nEg: Consider thread 0 processing row 0 exited due to error in 10th SB and thread 1 is processing 3rd SB of row 1. As per current CL, all SBs in row 1 will be decoded including the SBs that are dependent on error SBs of row 0.\n\nWe proposed an alternate approach where thread1 also can exit as soon as it sees that thread0 exited with error. In this case some of the error free SBs in row1 will also not be decoded. This alternate approach requires the ‘row_mt_exit’ flag which needs to be read under mutex (this increases decode time by 0.2% in error-free streams).\n\nPlease let us know if we should submit an alternate approach in a separate CL.\n\nThanks \u0026 Regards,\nVenkata",
      "parentUuid": "da40e7c1_b1040e22",
      "revId": "61afea9d85f44a6e0f2e1bd00ad047fd4873fac7",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a3a12ed_2a1e9341",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5185
      },
      "writtenOn": "2022-02-18T16:37:31Z",
      "side": 1,
      "message": "So, in this CL, thread 1 only knows something is wrong and stops decoding at around 9th SB. With proposed approach, it could stop sooner at around 3rd SB. Right?\nSince this CL can fix the issue already, I will merge this one. Please submit the alternate approach in a separate CL. Thanks!",
      "parentUuid": "b24df574_28135b99",
      "revId": "61afea9d85f44a6e0f2e1bd00ad047fd4873fac7",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66d65b4b_4c3d8f43",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9611
      },
      "writtenOn": "2022-02-21T11:48:36Z",
      "side": 1,
      "message": "Hi Yunqing,\n\nIn the above example, thread0 processes till 9th SB and during 10th SB it exits from decoding of row0 due to internal error.  At this point of time thread1 has already picked a valid job (which is SB row) and it finishes once all SB’s present in row1 are decoded. However, from 9th SB in row1 onwards the data it fetches from top right might be wrong (as 10th SB of row0 is not processed by thread0 due to an internal error), but decoding goes ahead with this error info.\n\nWe have submitted a below patch with an alternative approach, where 4th SB in row1 onwards the decoding will be avoided using the ‘row_mt_exit’ flag set by thread0.\nhttps://aomedia-review.googlesource.com/c/aom/+/153942\n\nThanks \u0026 Regards,\nVenkata.",
      "parentUuid": "4a3a12ed_2a1e9341",
      "revId": "61afea9d85f44a6e0f2e1bd00ad047fd4873fac7",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ae98a73_62ed8f06",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5185
      },
      "writtenOn": "2022-02-22T18:21:36Z",
      "side": 1,
      "message": "Thanks for the explaination.",
      "parentUuid": "66d65b4b_4c3d8f43",
      "revId": "61afea9d85f44a6e0f2e1bd00ad047fd4873fac7",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
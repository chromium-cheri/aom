{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a9161120_c464d58a",
        "filename": "aom_util/aom_thread.c",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-12T19:54:15Z",
      "side": 1,
      "message": "Please add a short comment to explain why this is necessary. Your commit message would make a good comment. We can reference bug aomedia:3379.",
      "revId": "99c369ae9435f9f07172bfa7b9ce66cb8a50ef07",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1eb2a93_b6563ec5",
        "filename": "aom_util/aom_thread.c",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-12T19:54:15Z",
      "side": 1,
      "message": "Ideally we should only do this in a Debug build. But I guess it is impossible to detect that.",
      "revId": "99c369ae9435f9f07172bfa7b9ce66cb8a50ef07",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9012ae99_aaf3b9cb",
        "filename": "aom_util/aom_thread.c",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-13T02:05:32Z",
      "side": 1,
      "message": "We should add `\u0026\u0026 AOM_ARCH_ARM` because we only have this problem with Arm.",
      "revId": "99c369ae9435f9f07172bfa7b9ce66cb8a50ef07",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e7d6afd5_acafbb75",
        "filename": "aom_util/aom_thread.c",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-10-13T05:08:33Z",
      "side": 1,
      "message": "\u003e We should add `\u0026\u0026 AOM_ARCH_ARM` because we only have this problem with Arm.\n\nGood point, we can start with that (I added `__APPLE__` too). I didn\u0027t try this on x86-64 macOS, emulated or not.",
      "parentUuid": "9012ae99_aaf3b9cb",
      "revId": "99c369ae9435f9f07172bfa7b9ce66cb8a50ef07",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b81c06e0_1959ef8d",
        "filename": "aom_util/aom_thread.c",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-10-13T05:08:33Z",
      "side": 1,
      "message": "\u003e Ideally we should only do this in a Debug build. But I guess it is impossible to detect that.\n\nI was thinking that too. I can use `NDEBUG` as a test, which in most cases will hold except where we enable asserts.",
      "parentUuid": "c1eb2a93_b6563ec5",
      "revId": "99c369ae9435f9f07172bfa7b9ce66cb8a50ef07",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "54b05844_9ce04bff",
        "filename": "aom_util/aom_thread.c",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-10-13T05:08:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a9161120_c464d58a",
      "revId": "99c369ae9435f9f07172bfa7b9ce66cb8a50ef07",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a017680_3d78fffd",
        "filename": "aom_util/aom_thread.c",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-10-13T18:40:13Z",
      "side": 1,
      "message": "\u003e \u003e We should add `\u0026\u0026 AOM_ARCH_ARM` because we only have this problem with Arm.\n\u003e \n\u003e Good point, we can start with that (I added `__APPLE__` too). I didn\u0027t try this on x86-64 macOS, emulated or not.\n\nA native x86-64 macOS build does not show the issue.",
      "parentUuid": "e7d6afd5_acafbb75",
      "revId": "99c369ae9435f9f07172bfa7b9ce66cb8a50ef07",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d431d572_7f110cfe",
        "filename": "aom_util/aom_thread.c",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-13T19:19:30Z",
      "side": 1,
      "message": "Yes, we can use `NDEBUG` as a test even though it may be incorrect in some uncommon build configurations.\n\nDetails:\n\nA Debug build differs from a Release build in the following ways:\n1. Debug symbols are generated.\n2. Compiler optimizations are disabled.\n3. The `NDEBUG` macro is not defined, so assertions are present.\n4. (libaom specific): The `CONFIG_DEBUG` is defined.\n\nI don\u0027t know which of these causes the thread stack to overflow. The `!defined(NDEBUG)` check only defects #3. I don\u0027t think we can detect #1 and #2.",
      "parentUuid": "b81c06e0_1959ef8d",
      "revId": "99c369ae9435f9f07172bfa7b9ce66cb8a50ef07",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6acd0e10_14e0ba98",
        "filename": "aom_util/aom_thread.c",
        "patchSetId": 2
      },
      "lineNbr": 153,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-12T19:54:15Z",
      "side": 1,
      "message": "Optional: `1 \u003c\u003c 20` may be more obviously 1 MiB.",
      "revId": "99c369ae9435f9f07172bfa7b9ce66cb8a50ef07",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae8e71fa_b27f096f",
        "filename": "aom_util/aom_thread.c",
        "patchSetId": 2
      },
      "lineNbr": 153,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-10-13T05:08:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6acd0e10_14e0ba98",
      "revId": "99c369ae9435f9f07172bfa7b9ce66cb8a50ef07",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e37d137_43d76be4",
        "filename": "aom_util/aom_thread.c",
        "patchSetId": 2
      },
      "lineNbr": 163,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-12T19:54:15Z",
      "side": 1,
      "message": "Move this call outside the critical section. We should do as little work as possible inside the critical section.\n\nIf we must set `worker-\u003estatus_` inside the critcal section, I think it is fine to assume the `pthread_attr_destroy()` call will succeed and ignore its return value. Note that we ignore the return value of `pthread_attr_destroy()` at line 156.",
      "revId": "99c369ae9435f9f07172bfa7b9ce66cb8a50ef07",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be978a10_41471d73",
        "filename": "aom_util/aom_thread.c",
        "patchSetId": 2
      },
      "lineNbr": 163,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-10-13T05:08:33Z",
      "side": 1,
      "message": "\u003e Move this call outside the critical section. We should do as little work as possible inside the critical section.\n\u003e \n\u003e If we must set `worker-\u003estatus_` inside the critcal section, I think it is fine to assume the `pthread_attr_destroy()` call will succeed and ignore its return value. Note that we ignore the return value of `pthread_attr_destroy()` at line 156.\n\nAt 156 we already had an error, but we can ignore it here too, likely at the cost of at least a static analysis warning.",
      "parentUuid": "6e37d137_43d76be4",
      "revId": "99c369ae9435f9f07172bfa7b9ce66cb8a50ef07",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
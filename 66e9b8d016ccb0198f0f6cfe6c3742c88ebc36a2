{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "097db12e_c4bce52d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-06-26T23:20:12Z",
      "side": 1,
      "message": "Hi Jonathan, Gerda, and James,\n\nDo you think this alternative fix is faster for bit depth 8?",
      "revId": "66e9b8d016ccb0198f0f6cfe6c3742c88ebc36a2",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c466837b_c7828f42",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 31392
      },
      "writtenOn": "2023-06-27T14:19:28Z",
      "side": 1,
      "message": "Performance wise there is no difference between using vaddq and vrhaddq, the problem will be that store_tran_low_to_s16q will be much slower given that it does widening, sshll can executed on half of the Neon pipes.\n\nhttps://godbolt.org/z/bb34nM6jj",
      "parentUuid": "097db12e_c4bce52d",
      "revId": "66e9b8d016ccb0198f0f6cfe6c3742c88ebc36a2",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e3302fd5_28c2465e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 31042
      },
      "writtenOn": "2023-06-27T21:31:14Z",
      "side": 1,
      "message": "CR-1 as per the inline comment - would result in a performance regression for standard bitdepth.",
      "revId": "66e9b8d016ccb0198f0f6cfe6c3742c88ebc36a2",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa4290d5_b8d0122d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 31042
      },
      "writtenOn": "2023-06-27T21:31:14Z",
      "side": 1,
      "message": "Gerda is correct - please don\u0027t merge this as it\u0027ll be slower for 8-bit than the current code.",
      "parentUuid": "c466837b_c7828f42",
      "revId": "66e9b8d016ccb0198f0f6cfe6c3742c88ebc36a2",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08ab50df_96e76c4b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-06-27T23:11:26Z",
      "side": 1,
      "message": "Thank you both for your comments. I can measure on my MacBook Pro M1 that this version of `aom_hadamard_32x32_neon()` is slower. I will abandon this CL.\n\nBased on your comments, I changed `aom_hadamard_16x16_neon()` to use `int32x4_t` instead of `int16x8_t`. That also speeds it up on my MacBook Pro M1. I will upload a CL for you to review.",
      "parentUuid": "fa4290d5_b8d0122d",
      "revId": "66e9b8d016ccb0198f0f6cfe6c3742c88ebc36a2",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b1296472_fc116549",
        "filename": "aom_dsp/arm/highbd_hadamard_neon.c",
        "patchSetId": 1
      },
      "lineNbr": 201,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-06-26T23:22:20Z",
      "side": 1,
      "message": "The change to aom_highbd_hadamard_16x16_neon() is not necessary. It is intended to make the code look similar to the alternative fix for aom_hadamard_16x16_neon().\n\nI can revert this change if the original code is better.",
      "revId": "66e9b8d016ccb0198f0f6cfe6c3742c88ebc36a2",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "66e9b8d016ccb0198f0f6cfe6c3742c88ebc36a2",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "66e9b8d016ccb0198f0f6cfe6c3742c88ebc36a2",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "66e9b8d016ccb0198f0f6cfe6c3742c88ebc36a2",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
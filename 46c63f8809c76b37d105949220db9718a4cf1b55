{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "29ce8164_30ccd562",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 29295
      },
      "writtenOn": "2022-11-09T07:01:32Z",
      "side": 1,
      "message": "Hello Yunqing, Marco,\n\nThe parent version is triggering an assert in av1_encode_mv() for a testcase: desktop2360p, 200 kbps for cpu 8. The assert catches if the mv difference (new - ref) is zero. \n\nIn the CL, a condition is added to check whether the NEWMV is same as NEARESTMV in search_new_mv() in the reduced-complexity ME path. For NEARMV, this is not needed since early-term of NEARMV would mean early-term of NEWMV as well. For the combined_motion_search() path, this is already taken care by a similar condition. For good presets, it is taken care by av1_check_newmv_joint_nonzero().\n\nThe details of worst-case drops are:\n```\ncpu      clip                  BD Rate Loss (%)          Instr. Cnt \n                         avg.psnr   ovr.psnr   ssim      Red (%)\n 7   marcooffice720p     0.0490     0.0306     0.0652     0.003\n 8   desktop2360p        0.2430     0.2748     0.3202     0.034\n 9   desktop_marco_                                      \n     30fps.1920_1080     0.0088     0.0088     0.0260     0.021\n```\n\nPlease review the CL.\n\nThanks,\nNeeraj",
      "revId": "46c63f8809c76b37d105949220db9718a4cf1b55",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9f222e9_b4b0e38a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5185
      },
      "writtenOn": "2022-11-09T19:28:18Z",
      "side": 1,
      "message": "Thanks for fixing it. Sounds good to me.\nHi Marco, Chi Yo, you are more familiar with this part. what do you think?",
      "parentUuid": "29ce8164_30ccd562",
      "revId": "46c63f8809c76b37d105949220db9718a4cf1b55",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52bcb4f4_a6859792",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5190
      },
      "writtenOn": "2022-11-09T19:43:08Z",
      "side": 1,
      "message": "I\u0027m fine with this.\n\nYou say (ALTREF, NEARESTMV) was not evaluated due to an early exit, but (ALTREF,NEWMV) gets checked. What early exit is causing NEAREST to be skipped but not NEWMV? Wonder if there an issue there (whether we should make sure NEAREST is always checked before NEWMV).",
      "revId": "46c63f8809c76b37d105949220db9718a4cf1b55",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "adea1cd7_003e25b6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 29295
      },
      "writtenOn": "2022-11-10T09:58:13Z",
      "side": 1,
      "message": "Thanks for the review.",
      "revId": "46c63f8809c76b37d105949220db9718a4cf1b55",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fbe678de_29bffcef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 29295
      },
      "writtenOn": "2022-11-10T09:58:13Z",
      "side": 1,
      "message": "Hi Marco,\n\nWe have identified one set of cases that have the following mode evaluation behavior in the parent commit: \n1. (ALTREF, NEARESTMV) has an early exit in early_term_inter_search_with_sse() based on the best_sse so far. \n2. (ALTREF, NEARMV) gets fully evaluated and eventually selected as the best mode based on RD cost. Its sse is slightly higher than the best_sse so far. \n3. (ALTREF, NEWMV) does ME to obtain best motion vector which happens to be same as NEARESTMV. Thus, it produces the same sse as that earlier produced by (ALTREF, NEARESTMV) prior to its early exit. But NEWMV does not early exit because of a higher best_sse that comes from (ALTREF, NEARMV) being the best mode in Step 2. As a result, NEWMV (that is same as NEARESTMV) sails through and eventually wins as the best mode. \n\nAssuming we retain the assert in av1_encode_mv(), we have a few options: \n(A) Do not early exit based on sse for (ALTREF, NEARESTMV). But the trade-off is not good here:\n```\ncpu   Testset  Instr Cnt        BD-Rate Loss(%)       \n                Red(%)   avg.psnr  ovr.psnr   ssim                        \n 8     rtc      -1.048    -0.0455  -0.0400  -0.0448\n ```\nIf this is done for other ref frames for consistency, there would be more speed-loss. In other words, the early exit based on SSE seems to work well here.\n(B) Keep evaluating NEWMV even if it is equal to ref mv after ME. If NEWMV is the eventual winner and same as ref mv, we change the signaling. However, this involves more code changes, especially we should remove the condition from combined_motion_search(). Other checks are also needed to make this work for all cases.\n(C) Do not proceed with NEWMV if it comes out same as ref mv. This is assuming whatever decision was made for NEARESTMV would apply here. This is consistent with a similar check done at the end of combined_motion_search() for other ref frames. \n\nIn the CL, we have (C) which is better than (A), somewhat sub-optimal to (B), but it currently fixes the issue. Please let us know if any suggestions.\n\nThanks,\nNeeraj",
      "parentUuid": "52bcb4f4_a6859792",
      "revId": "46c63f8809c76b37d105949220db9718a4cf1b55",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba093a3a_e1642457",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5190
      },
      "writtenOn": "2022-11-10T17:42:55Z",
      "side": 1,
      "message": "OK thanks for the investigation. I prefer option C then (current CL).",
      "parentUuid": "adea1cd7_003e25b6",
      "revId": "46c63f8809c76b37d105949220db9718a4cf1b55",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "bde8be72_47b39365",
        "filename": "av1/ratectrl_qmode_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-04-27T14:26:11Z",
      "side": 1,
      "message": "Is this guaranteed to either be -1 or be equal to one of the indices in ref_frame_list?\n\nI\u0027m not sure I see the need to rename it. The header field which this will determine is called primary_ref_frame, so primary_ref_idx seems like a perfectly valid name.",
      "range": {
        "startLine": 98,
        "startChar": 6,
        "endLine": 98,
        "endChar": 39
      },
      "revId": "fadc04f5adc3538ab2592a54ac7a405ad2889894",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dab987a6_d3c23d8e",
        "filename": "av1/ratectrl_qmode_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 5250
      },
      "writtenOn": "2022-04-27T23:02:42Z",
      "side": 1,
      "message": "We change the type to primary_ref_frame.\nSo you will have index(ref_idx) and name.\nThe index \u003d\u003d -1, when no ref frame is available.\n\nI also change ref_frame_list to contain all the available reference frames sorted by priority. (Lower index means more likely to be good)\n\nTherefore, the primary_ref_frame is guarantee to exist in ref_frame_list.",
      "parentUuid": "bde8be72_47b39365",
      "range": {
        "startLine": 98,
        "startChar": 6,
        "endLine": 98,
        "endChar": 39
      },
      "revId": "fadc04f5adc3538ab2592a54ac7a405ad2889894",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "236e0402_e48fbf1e",
        "filename": "av1/reference_manager.cc",
        "patchSetId": 1
      },
      "lineNbr": 259,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-04-27T14:26:11Z",
      "side": 1,
      "message": "This seems strange to me and possibly incorrect. I understand that you\u0027re creating a distance as an unsigned number that essentially has three fields (layer distance, type differences, order distance), where the higher-order fields take precedence over the lower-order fields.\n\nThe problem is that the width of the bottom field isn\u0027t fixed, so the higher-order fields won\u0027t line up when comparing two distances for which order_dist_bits differs.\n\nYou\u0027d be better off representing the distance as a std::tuple. Tuples are automatically compared lexicographically, so sorting by tuples will do the right thing if you arrange the keys correctly (i.e., primary key is first).\n\nYou could still smoosh some of the frame types together if you want, although I think it would be cleaner to keep them all separate like this:\n\n using Key \u003d std::tuple\u003cint,  // abs layer delta\n                        bool, // is_key_frame differs\n                        bool, // is_golden_frame differs\n                        bool, // is_arf_frame differs\n                        bool, // is_show_frame differs\n                        bool, // encode_ref_mode differs\n                        int\u003e; // abs ordere delta",
      "range": {
        "startLine": 256,
        "startChar": 0,
        "endLine": 259,
        "endChar": 0
      },
      "revId": "fadc04f5adc3538ab2592a54ac7a405ad2889894",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b5ec716d_ec0fdbb5",
        "filename": "av1/reference_manager.cc",
        "patchSetId": 1
      },
      "lineNbr": 259,
      "author": {
        "id": 5250
      },
      "writtenOn": "2022-04-27T23:02:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "236e0402_e48fbf1e",
      "range": {
        "startLine": 256,
        "startChar": 0,
        "endLine": 259,
        "endChar": 0
      },
      "revId": "fadc04f5adc3538ab2592a54ac7a405ad2889894",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a47d9878_c680121d",
        "filename": "av1/reference_manager.cc",
        "patchSetId": 1
      },
      "lineNbr": 262,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-04-27T14:26:11Z",
      "side": 1,
      "message": "I believe the corresponding function in libaom is choose_primary_ref_frame.\nhttp://google3/third_party/libaom/git_root/av1/encoder/encode_strategy.c?rcl\u003d444426981\u0026l\u003d168\n\nWhy doesn\u0027t this do something similar to that function? (Or is it doing something similar and I just don\u0027t understand?)",
      "range": {
        "startLine": 262,
        "startChar": 0,
        "endLine": 262,
        "endChar": 46
      },
      "revId": "fadc04f5adc3538ab2592a54ac7a405ad2889894",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "77d3d6b1_eea82ba7",
        "filename": "av1/reference_manager.cc",
        "patchSetId": 1
      },
      "lineNbr": 262,
      "author": {
        "id": 5250
      },
      "writtenOn": "2022-04-27T23:02:42Z",
      "side": 1,
      "message": "Yep, we are doing something similar.",
      "parentUuid": "a47d9878_c680121d",
      "range": {
        "startLine": 262,
        "startChar": 0,
        "endLine": 262,
        "endChar": 46
      },
      "revId": "fadc04f5adc3538ab2592a54ac7a405ad2889894",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
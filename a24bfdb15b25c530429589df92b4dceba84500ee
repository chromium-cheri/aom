{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "79a37d4a_c506682d",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 5
      },
      "lineNbr": 492,
      "author": {
        "id": 5185
      },
      "writtenOn": "2023-07-05T16:48:06Z",
      "side": 1,
      "message": "This is fine. If # of tiles is large, this probably is less efficient than letting each thread signal for themselves? Anyway, just my thoughts.",
      "range": {
        "startLine": 492,
        "startChar": 12,
        "endLine": 492,
        "endChar": 29
      },
      "revId": "a24bfdb15b25c530429589df92b4dceba84500ee",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a9333f5_88f3802d",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 5
      },
      "lineNbr": 492,
      "author": {
        "id": 25857
      },
      "writtenOn": "2023-07-06T11:31:53Z",
      "side": 1,
      "message": "Acknowledged. With this approach only the problematic thread calls `set_encoding_done()` (inside the setjmp() target code). Other threads return from the function based on the flag `row_mt_exit`  and the call to `set_encoding_done_for_row()` is not required. This seems to be a cleaner implementation. Please let us know your opinion on if we should change to letting each thread signal for themselves.",
      "parentUuid": "79a37d4a_c506682d",
      "range": {
        "startLine": 492,
        "startChar": 12,
        "endLine": 492,
        "endChar": 29
      },
      "revId": "a24bfdb15b25c530429589df92b4dceba84500ee",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "63e24988_75dc881d",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 5
      },
      "lineNbr": 492,
      "author": {
        "id": 5185
      },
      "writtenOn": "2023-07-06T15:35:19Z",
      "side": 1,
      "message": "Yes, this is fine. Thanks.",
      "parentUuid": "9a9333f5_88f3802d",
      "range": {
        "startLine": 492,
        "startChar": 12,
        "endLine": 492,
        "endChar": 29
      },
      "revId": "a24bfdb15b25c530429589df92b4dceba84500ee",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a64a371_a45c7fb1",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 5
      },
      "lineNbr": 582,
      "author": {
        "id": 5185
      },
      "writtenOn": "2023-07-05T16:48:06Z",
      "side": 1,
      "message": "This is not needed since it is checked in get_next_job()?",
      "range": {
        "startLine": 582,
        "startChar": 8,
        "endLine": 582,
        "endChar": 23
      },
      "revId": "a24bfdb15b25c530429589df92b4dceba84500ee",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1b47752_cd26ed2d",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 5
      },
      "lineNbr": 582,
      "author": {
        "id": 25857
      },
      "writtenOn": "2023-07-06T11:31:53Z",
      "side": 1,
      "message": "`row_mt_exit` is not checked in `get_next_job()` (In the decoder, `row_mt_exit` is checked in `get_next_job_info()`). Yes, this check can be avoided as `row_mt_exit` is checked after `sync_read_ptr()` in `encode_sb_row()`. However, checking `row_mt_exit` here, tries to return before calling the function `get_next_job()`.",
      "parentUuid": "9a64a371_a45c7fb1",
      "range": {
        "startLine": 582,
        "startChar": 8,
        "endLine": 582,
        "endChar": 23
      },
      "revId": "a24bfdb15b25c530429589df92b4dceba84500ee",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2cb6f75_15c6d837",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 5
      },
      "lineNbr": 582,
      "author": {
        "id": 5185
      },
      "writtenOn": "2023-07-06T15:35:19Z",
      "side": 1,
      "message": "Ok. Could you add this explanation as a comment in the code, so we know this intention?",
      "parentUuid": "e1b47752_cd26ed2d",
      "range": {
        "startLine": 582,
        "startChar": 8,
        "endLine": 582,
        "endChar": 23
      },
      "revId": "a24bfdb15b25c530429589df92b4dceba84500ee",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f05884d5_c9e33b1e",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 5
      },
      "lineNbr": 596,
      "author": {
        "id": 5185
      },
      "writtenOn": "2023-07-05T16:48:06Z",
      "side": 1,
      "message": "same here - probably not needed?",
      "range": {
        "startLine": 596,
        "startChar": 4,
        "endLine": 596,
        "endChar": 30
      },
      "revId": "a24bfdb15b25c530429589df92b4dceba84500ee",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "436e681e_a65165f6",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 5
      },
      "lineNbr": 596,
      "author": {
        "id": 25857
      },
      "writtenOn": "2023-07-06T11:31:53Z",
      "side": 1,
      "message": "Checking `row_mt_exit` here, tries to return before calling the function `av1_encode_sb_row()`.",
      "parentUuid": "f05884d5_c9e33b1e",
      "range": {
        "startLine": 596,
        "startChar": 4,
        "endLine": 596,
        "endChar": 30
      },
      "revId": "a24bfdb15b25c530429589df92b4dceba84500ee",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73f1ec6f_77637bd0",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 5
      },
      "lineNbr": 596,
      "author": {
        "id": 5185
      },
      "writtenOn": "2023-07-06T15:35:19Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "436e681e_a65165f6",
      "range": {
        "startLine": 596,
        "startChar": 4,
        "endLine": 596,
        "endChar": 30
      },
      "revId": "a24bfdb15b25c530429589df92b4dceba84500ee",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "a24bfdb15b25c530429589df92b4dceba84500ee",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "a24bfdb15b25c530429589df92b4dceba84500ee",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "a24bfdb15b25c530429589df92b4dceba84500ee",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "2a23a901_0905a642",
        "filename": "aom_dsp/aom_dsp_common.h",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 5030
      },
      "writtenOn": "2017-02-24T19:41:59Z",
      "side": 1,
      "message": "In the rest of the codebase we just use this idiom directly. It\u0027s pretty straight forward.\n\nAlso the comment is wrong in that the optimizer is free use the fact that this shift exists to \"prove\" all kinds of crazy things (like that x is positive).",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 53
      },
      "revId": "03ec9ccdc5f02320dcb2863bf70c77141db22d82",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94278115_fb77f311",
        "filename": "aom_dsp/aom_dsp_common.h",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 5035
      },
      "writtenOn": "2017-02-24T20:51:45Z",
      "side": 1,
      "message": "So, this is cheaper than\n(x \u003e\u003d 0) ? x \u003c\u003c shift : -((-x) \u003c\u003c shift) ?",
      "parentUuid": "2a23a901_0905a642",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 53
      },
      "revId": "03ec9ccdc5f02320dcb2863bf70c77141db22d82",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "359cfc85_a289c25c",
        "filename": "aom_dsp/aom_dsp_common.h",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 5030
      },
      "writtenOn": "2017-02-24T20:56:32Z",
      "side": 1,
      "message": "At O1 or higher they are the same:\nhttps://godbolt.org/g/9q42e5",
      "parentUuid": "94278115_fb77f311",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 53
      },
      "revId": "03ec9ccdc5f02320dcb2863bf70c77141db22d82",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c78b862_cc756fc0",
        "filename": "aom_dsp/aom_dsp_common.h",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-02-24T21:01:05Z",
      "side": 1,
      "message": "This should compile to exactly the same sll (or equivalent) instruction as before, though I believe when FLAC made a similar conversion, they found using the multiply idiom actually improved performance (I don\u0027t think anyone ever adequately explained why).\n\nA compiler might also be able to transform your suggestion into the same single instruction, but it seems less obvious that it would succeed (I haven\u0027t tested it).",
      "parentUuid": "94278115_fb77f311",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 53
      },
      "revId": "03ec9ccdc5f02320dcb2863bf70c77141db22d82",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d82415b_267648aa",
        "filename": "aom_dsp/aom_dsp_common.h",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-02-24T21:01:05Z",
      "side": 1,
      "message": "\u003e In the rest of the codebase we just use this idiom directly. It\u0027s\n \u003e pretty straight forward.\n\nWell, I think it\u0027s good to have names for things that are not \"obvious\". It serves as documentation for why things are done the way they are, so no one will accidentally undo it. It also makes it easy to switch to, e.g., an implementation like (int)((unsigned)(x) \u003c\u003c (shift)) if we ever find a compiler that does something bad with the multiply.\n\n \u003e Also the comment is wrong in that the optimizer is free use the\n \u003e fact that this shift exists to \"prove\" all kinds of crazy things\n \u003e (like that x is positive).\n\nI\u0027m not sure where I said anything in the comment that contradicts this.",
      "parentUuid": "2a23a901_0905a642",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 53
      },
      "revId": "03ec9ccdc5f02320dcb2863bf70c77141db22d82",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a35bc3d1_546a5e6a",
        "filename": "aom_dsp/aom_dsp_common.h",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 5030
      },
      "writtenOn": "2017-02-24T22:38:13Z",
      "side": 1,
      "message": "I think the macro hides what\u0027s going on from, the term SAFE lulls the user into a false sense of securtiy, and has surprising behavior. \n\nConsider the following cases\n\nint a \u003d 0x00FF00FF;\nint a2 \u003d AOM_SAFE_SHL(a, 8);  // This undefined, a reasonable user might expect the result to be a well defined (int)0xFF00FF00.\n\nint64_t b \u003d -1;\nint64_t b2 \u003d AOM_SAFE_SHL(b, 48);  // This macro is now doing a shift that is undefined for being wider than the type, this is likely to manifest as a real bug\nint64_t b3 \u003d b * (1 \u003c\u003c 48);  // A reviewer actually has a chance of catching this mistake.\n\nI misread the comment and withdraw my objection to it.",
      "parentUuid": "5c78b862_cc756fc0",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 53
      },
      "revId": "03ec9ccdc5f02320dcb2863bf70c77141db22d82",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "317d5ccd_6b398545",
        "filename": "aom_dsp/aom_dsp_common.h",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-02-24T22:47:30Z",
      "side": 1,
      "message": "\u003e int a \u003d 0x00FF00FF;\n \u003e int a2 \u003d AOM_SAFE_SHL(a, 8);  // This undefined, a reasonable user\n \u003e might expect the result to be a well defined (int)0xFF00FF00.\n\nOkay. If you want this to be defined, as well, the version that casts to unsigned instead of multiplying will work (that only relies on implementation-defined behavior). You can argue whether you want to be able to detect such overflows or not. At least in the usage in this patch, they would be indicative of a real bug. Alternatively, we could keep the current multiply-based implementation and simply rename it to AOM_SIGNED_SHL(). That might have less of a chance of confusion.\n\n \u003e int64_t b \u003d -1;\n \u003e int64_t b2 \u003d AOM_SAFE_SHL(b, 48);  // This macro is now doing a\n \u003e shift that is undefined for being wider than the type, this is\n \u003e likely to manifest as a real bug\n\nThis is a pretty good, point, though. Maybe we could call it AOM_SIGNED_SHL32? It\u0027s probably not worth trying to make a single implementation that does the right thing for all integer types.",
      "parentUuid": "a35bc3d1_546a5e6a",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 53
      },
      "revId": "03ec9ccdc5f02320dcb2863bf70c77141db22d82",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    }
  ]
}
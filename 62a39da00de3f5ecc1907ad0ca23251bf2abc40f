{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "74300597_0974c2d8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 22433
      },
      "writtenOn": "2021-11-19T12:16:07Z",
      "side": 1,
      "message": "Hi Chi Yo, Yunqing,\n\nAs per our study, the mbmi buffers are used to store mode information at block level and the same can be allocated based on the minimum partition size used for encoding. Currently, these buffers are allocated/initialized at init time (through init_config() or av1_change_config() functions). However the minimum partition size is not known in few cases when the same is set based on sfs in encode stage. Eg:  In allintra encode, speed\u003e\u003d7 for resolution\u003c4k, allocation is done as if minimum partition size is BLOCK_4X4 though the sf ‘default_min_partition_size’ is set as BLOCK_8X8 during the encode stage.\n\nThis CL, moves the allocations of mbmi buffers to the encoder stage where the minimum partition size used for encoding is known. In the encoder stage, these allocations are kept before the first usage of these buffers (i.e. in av1_encode_strategy()). The speed-up mentioned in the commit message for AVIF image encode is with speed\u003d9, threads\u003d4 and the speed-up is seen due to following:\n1. Reduction in the size of mbmi buffers which need to be memset by 1/4th (In the parent version, buffers were allocated assuming minimum partition size as BLOCK_4X4 where as in the current CL BLOCK_8X8 is used for allocation based on sf setting).\n2. Reduction in the number of mbmi buffer allocations from 2 to 1, for resolutions 480p or lesser (In parent version, allocation happened during init time and during control time when sb_size is changed to 64x64).\n\nFor libaom AV1 video encode, bit-match is verified (w.r.t. parent commit) for \u0027GOOD\u0027, \u0027RT\u0027 and \u0027ALLINTRA\u0027 encoding modes for a few contents with different encoding configurations. It was also verified that the output of AVIF encode is bit-exact w.r.t. parent version for a typical image dataset.\n\nFor libaom \u0027GOOD\u0027, speed\u003d6 encode, we are seeing HEAP memory reduction of ~3.82% (threads\u003d1) and ~3.68% (threads\u003d8) respectively for 1080p content. Heap memory reduction is seen in these cases as default_min_partition_size is BLOCK_8X8.\t\n\nPlease review.\n\nRegards,\nAniket.\n",
      "revId": "62a39da00de3f5ecc1907ad0ca23251bf2abc40f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a025bc3_3e471948",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5185
      },
      "writtenOn": "2021-11-19T16:53:05Z",
      "side": 1,
      "message": "Thanks for getting this done.",
      "revId": "62a39da00de3f5ecc1907ad0ca23251bf2abc40f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "615432dc_72485495",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 1
      },
      "lineNbr": 2029,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-12-22T01:30:06Z",
      "side": 1,
      "message": "Hi Aniket and Ranjit,\n\nThis `alloc_mb_mode_info_buffers(cpi)` call seems like a duplicate, because we will call `alloc_mb_mode_info_buffers(cpi)` at line 2034.\n\nDo you remember why this is necessary? I wonder if lines 2030-2031 depend on some side effects of this `alloc_mb_mode_info_buffers(cpi)` call.\n\nI deleted this call in https://aomedia-review.googlesource.com/c/aom/+/185461 yesterday, but I am not sure if that is safe.\n\nThanks.",
      "revId": "62a39da00de3f5ecc1907ad0ca23251bf2abc40f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "678952dc_d6b8016b",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 1
      },
      "lineNbr": 2029,
      "author": {
        "id": 6245
      },
      "writtenOn": "2023-12-27T14:08:18Z",
      "side": 1,
      "message": "Hi Wan-Teh,\nWe tried identifying a scenario for which the code in \u0027if() block\u0027 might be executed but could not find any. Hence we reviewed the functions called at lines 2030-2031 and the change in above CL looks correct to us.\nThanks,\nRanjit",
      "parentUuid": "615432dc_72485495",
      "revId": "62a39da00de3f5ecc1907ad0ca23251bf2abc40f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
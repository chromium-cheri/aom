{
  "comments": [
    {
      "key": {
        "uuid": "34556023_d13dc502",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 14,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-02-21T19:59:06Z",
      "side": 1,
      "message": "I\u0027m not following why this implies there will be a loss of quality. Did we do some kind of test that would demonstrate this is the reason? It doesn\u0027t seem to follow from our dcttest numbers (though I guess we haven\u0027t tried to do something equivalent on the existing transforms, nor made an equivalent for the DST).",
      "revId": "7550acc5a77f862f9927994b1b96bf4c3f06239f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf0f7c1d_4abd83b9",
        "filename": "av1/common/idct.c",
        "patchSetId": 7
      },
      "lineNbr": 1050,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-02-21T19:59:06Z",
      "side": 1,
      "message": "Please don\u0027t commit debugging code like this (unless it is worth putting behind a named flag that can be enabled with configure).",
      "revId": "7550acc5a77f862f9927994b1b96bf4c3f06239f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14255c59_81a7e07c",
        "filename": "av1/common/idct.c",
        "patchSetId": 7
      },
      "lineNbr": 1050,
      "author": {
        "id": 5046
      },
      "writtenOn": "2017-02-21T20:27:36Z",
      "side": 1,
      "message": "Ahh, sorry this slipped in.  It was removed at one point and I must have missed it rebasing.",
      "parentUuid": "bf0f7c1d_4abd83b9",
      "revId": "7550acc5a77f862f9927994b1b96bf4c3f06239f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "edc406db_9e020c6f",
        "filename": "av1/common/idct.c",
        "patchSetId": 7
      },
      "lineNbr": 1335,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-02-21T19:59:06Z",
      "side": 1,
      "message": "Is there some potential mismatch here?",
      "revId": "7550acc5a77f862f9927994b1b96bf4c3f06239f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8eed8c93_2daacbac",
        "filename": "av1/common/idct.c",
        "patchSetId": 7
      },
      "lineNbr": 1335,
      "author": {
        "id": 5046
      },
      "writtenOn": "2017-02-21T20:27:36Z",
      "side": 1,
      "message": "No.  The change on line 1509 below means that av1_iht8x8_64_add() will be called instead of av1_idct8x8_add() so this function is never entered.\n\nThere is no build warning because av1_idct8x8_add() is exposed in av1/common/idct.h despite not being called anywhere outside of av1/common/idct.c.\n\nI can remove the unnecessary change below and make it more explicit that this code is not called.",
      "parentUuid": "edc406db_9e020c6f",
      "revId": "7550acc5a77f862f9927994b1b96bf4c3f06239f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db7600bf_14d8a6c2",
        "filename": "av1/common/idct.c",
        "patchSetId": 7
      },
      "lineNbr": 1335,
      "author": {
        "id": 5046
      },
      "writtenOn": "2017-02-21T20:32:46Z",
      "side": 1,
      "message": "Looks like you were right, there was a typo on line 1509 below.  The next patch set should fix it.  I\u0027ll need to rerun the metrics too.",
      "parentUuid": "8eed8c93_2daacbac",
      "revId": "7550acc5a77f862f9927994b1b96bf4c3f06239f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cd5d809_60452d53",
        "filename": "av1/encoder/dct.c",
        "patchSetId": 7
      },
      "lineNbr": 1975,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-02-21T19:59:06Z",
      "side": 1,
      "message": "Why are you shifting up the transform input by 4, and then shifting the output down by 2? Does that work better than just shifting the input by 3?\n\nIt also means running right into the rails for 16-bit values with 9-bit input: 2*(1.5 bits) for the orthonormal scaling, 4 for the shift, and 9 for the input. That means you have no headroom to deal with quantization errors (I\u0027m not sure how much we need, but my guess is we would need at least some).",
      "revId": "7550acc5a77f862f9927994b1b96bf4c3f06239f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b1eed823_8dcdfb46",
        "filename": "av1/encoder/dct.c",
        "patchSetId": 7
      },
      "lineNbr": 1975,
      "author": {
        "id": 5046
      },
      "writtenOn": "2017-02-21T20:27:36Z",
      "side": 1,
      "message": "I\u0027ll need to run more experiments to verify that it works better with 4 bits than 3 (I thought I tested this for the 4-point and found it to be the case but don\u0027t have the numbers anywhere).",
      "parentUuid": "5cd5d809_60452d53",
      "revId": "7550acc5a77f862f9927994b1b96bf4c3f06239f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aad77e55_4e376f25",
        "filename": "av1/encoder/dct.c",
        "patchSetId": 7
      },
      "lineNbr": 2005,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-02-21T19:59:06Z",
      "side": 1,
      "message": "Debug code.",
      "revId": "7550acc5a77f862f9927994b1b96bf4c3f06239f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67822e46_f8ab3ebe",
        "filename": "configure",
        "patchSetId": 7
      },
      "lineNbr": 507,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-02-21T19:59:06Z",
      "side": 1,
      "message": "This disables all assembly in the whole codec, right? That\u0027s fine for an initial integration, but you may want to qualify the \"lower complexity\" claim in the commit message, or people will go run this and be very disappointed.",
      "revId": "7550acc5a77f862f9927994b1b96bf4c3f06239f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bab5398c_529f181c",
        "filename": "configure",
        "patchSetId": 7
      },
      "lineNbr": 507,
      "author": {
        "id": 5046
      },
      "writtenOn": "2017-02-21T20:27:36Z",
      "side": 1,
      "message": "Yes this does disable all assmebly.  My justification for a performance improvement was going to be adding a comment about the reduction in the number of operations (multiplies, adds and shifts) for each transform v. existing av1 transforms.\n\nI\u0027ll add this to the commit message and a note that there is currently no assembly so it is actually slower.",
      "parentUuid": "67822e46_f8ab3ebe",
      "revId": "7550acc5a77f862f9927994b1b96bf4c3f06239f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3085098e_f7e3dd86",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-03-25T20:47:14Z",
      "side": 1,
      "message": "LGTM.",
      "revId": "819d9d393581caf954f183706e0f2dce380fdf75",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65a39a54_465c9aaa",
        "filename": "av1/encoder/partition_search.c",
        "patchSetId": 1
      },
      "lineNbr": 2643,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-03-25T20:47:14Z",
      "side": 1,
      "message": "I tested this with MSVC.",
      "revId": "819d9d393581caf954f183706e0f2dce380fdf75",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5a93554_07f5b44a",
        "filename": "av1/encoder/partition_search.c",
        "patchSetId": 1
      },
      "lineNbr": 2643,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-03-25T20:48:51Z",
      "side": 1,
      "message": "Do you know why the code worked before with uninitialized values in this array?",
      "parentUuid": "65a39a54_465c9aaa",
      "revId": "819d9d393581caf954f183706e0f2dce380fdf75",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e15389c9_68a2e352",
        "filename": "av1/encoder/partition_search.c",
        "patchSetId": 1
      },
      "lineNbr": 2643,
      "author": {
        "id": 5185
      },
      "writtenOn": "2022-03-25T21:11:02Z",
      "side": 1,
      "message": "Thanks! Actually this is new code submitted yesterday.",
      "parentUuid": "d5a93554_07f5b44a",
      "revId": "819d9d393581caf954f183706e0f2dce380fdf75",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "00e7038d_6dcfcfb7",
        "filename": "av1/encoder/partition_search.c",
        "patchSetId": 1
      },
      "lineNbr": 2660,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-03-28T13:45:01Z",
      "side": 1,
      "message": "Hi Yunqing,\n\nI have two more comments after analyzing this code.\n\n1. Only one element in the frame_mv array needs to be initialized, and it only needs to be initialized under one condition. The following patch also fixes the valgrind uninitialised value issue:\n\n```\ndiff --git a/av1/encoder/partition_search.c b/av1/encoder/partition_search.c\nindex 5118c3d6d..55a3e4758 100644\n--- a/av1/encoder/partition_search.c\n+++ b/av1/encoder/partition_search.c\n@@ -2641,6 +2641,9 @@ void av1_nonrd_use_partition(AV1_COMP *cpi, ThreadData *td,\n                                              mi_row, mi_col, this_mi[0]-\u003ebsize);\n \n           int_mv frame_mv[MB_MODE_COUNT][REF_FRAMES];\n+          if (this_mi[0]-\u003eref_frame[0] !\u003d LAST_FRAME) {\n+            frame_mv[NEARESTMV][LAST_FRAME].as_int \u003d 0;\n+          }\n           struct buf_2d yv12_mb[REF_FRAMES][MAX_MB_PLANE];\n           int force_skip_low_temp_var \u003d 0;\n           int skip_pred_mv \u003d 0;\n```\n\nNote: In this patch I used the symbolic name LAST_FRAME instead of 1.\n\n2. Depending on the check done in this if statement here (lines 2658-2659), it may be better to initialize the frame_mv array to INVALID_MV instead of 0.\n\nI am wondering if the index 1 used in this if statement should be this_mi[0]-\u003eref_frame[0], the third argument passed to the find_predictors() call at line 2653.",
      "revId": "819d9d393581caf954f183706e0f2dce380fdf75",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcb97882_e756753c",
        "filename": "av1/encoder/partition_search.c",
        "patchSetId": 1
      },
      "lineNbr": 2660,
      "author": {
        "id": 5185
      },
      "writtenOn": "2022-03-28T16:03:27Z",
      "side": 1,
      "message": "I have a cl related to frame_mv index fix. Do you want to write a cl for other things mentioned here since you already did the work?",
      "parentUuid": "00e7038d_6dcfcfb7",
      "revId": "819d9d393581caf954f183706e0f2dce380fdf75",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2aee7d52_2ced13ce",
        "filename": "av1/encoder/partition_search.c",
        "patchSetId": 1
      },
      "lineNbr": 2660,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-03-28T16:55:08Z",
      "side": 1,
      "message": "Hi Yunqing: I am assigned to import a new libaom snapshot into Google\u0027s internal repository this week. That\u0027s why I analyzed this code to see if the commit at the end of last week is a good candidate for import.\n\nSince I don\u0027t really understand the code, I can only report my observations in the hope that you can spot the bugs and fix them.",
      "parentUuid": "bcb97882_e756753c",
      "revId": "819d9d393581caf954f183706e0f2dce380fdf75",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ff349eb_c2005a64",
        "filename": "av1/encoder/partition_search.c",
        "patchSetId": 1
      },
      "lineNbr": 2660,
      "author": {
        "id": 5185
      },
      "writtenOn": "2022-03-28T17:12:27Z",
      "side": 1,
      "message": "Sure. I will submit a cl later. frame_mv is calculated in find_predictors. Adding the initialization here is only to avoid the valgrind warning. But it is good to make it right.",
      "parentUuid": "2aee7d52_2ced13ce",
      "revId": "819d9d393581caf954f183706e0f2dce380fdf75",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "819d9d393581caf954f183706e0f2dce380fdf75",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two googlers using a trusted device must approve the change, see http://go/change-management-policy"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "819d9d393581caf954f183706e0f2dce380fdf75",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "819d9d393581caf954f183706e0f2dce380fdf75",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2fa7e1a5_32ef8873",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 14993
      },
      "writtenOn": "2021-02-19T16:23:40Z",
      "side": 1,
      "message": "Hi Wan-Teh, Jingning,\n\nAs per our understanding, the last source frame buffer present in the queue of cpi-\u003elookahead and cpi-\u003escaled_last_source are not required for all-intra frame encoding (kf-max-dist\u003d0). Hence, we introduced a conditional allocation for these buffers based on key-freq-max\u003d0.\n \nIt was observed that for single-pass encoding mode with LAP enabled (\u0027good\u0027 preset), firstpass_inter_prediction() was being called in LAP stage, even though kf-max-dist was set to 0. This is not expected as per our understanding.\n\nThis issue could be solved by either of following approaches:\n1) By using fixed_kf_cntr logic to populate frame_flags\n2) Populating kf_requested flag based on kf-max-dist\u003d0\n\nWe did not pursue approach (1) as that piece of code is under the check \"kf_mode \u003d\u003d AOM_KF_AUTO\". The value of kf_mode is set to AOM_KF_DISABLED for the newly added --allintra mode. Hence, we thought that approach (2) would be better as it would handle kf-max-dist\u003d0 for all kf_mode values (AOM_KF_DISABLED/AOM_KF_AUTO). \n\nWith the current patch in all-intra frame encoding, we observed better bit-rate adherence as active_worst_quality is populated appropriately after the modification (coded_error -\u003e section_error -\u003e active_worst_quality). As a specific example, for \"rush_hour_1080p25\" content with target-bitrate\u003d5700kbps, the achieved bit-rate reduced from 29.2Mbps (parent version) to 8.55Mbps (with the current patch).\n\nWe validated the current patch for video and still-image encode. Specifically, we configured libaom in ALLINTRA mode (in libavif) for AVIF encode.\n \nIt was verified that output of AVIF encode is bit-exact with parent version for a typical image dataset.  \n\nFollowing are memory reduction results when AVIF encode was tested for ‘building.jpg’ (4032x3024) image at cq_level\u003d18.\n   Speed                 HEAP Memory\n   preset                Reduction(%)\n     6          ~8.04 (from 518.3 MB to 476.6 MB)\n     \nHEAP memory reduction was measured using the command below.\n$valgrind --tool\u003dmassif ./avifenc ...\n\nRegards,\nJayasanker.",
      "revId": "8626a76372cd5b8d6022c99be229b3d0baac2041",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "265bc865_aa134530",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 14993
      },
      "writtenOn": "2021-02-22T07:56:49Z",
      "side": 1,
      "message": "Hi Wan-Teh, Jingning,\n\nThe approach implemented in the current patch (using kf-max-dist) is based on the nature of the algorithms implemented in the encoder at present,  as summarized in the following issue:\n\nhttps://bugs.chromium.org/p/aomedia/issues/detail?id\u003d2967\n\nAs an alternate approach, we can implement this memory optimization by making use of \u0027g_limit\u003d\u003d1\u0027. But, this implementation will limit the scope of this memory optimization to still image encoding only.  Hence we pursued the optimization as present in the current patch. We are also not entirely sure if the \u0027g_limit\u0027 based approach is recommended. \n\nPlease let us know your thoughts on our approach/understanding.\n\nRegards,\nJayasanker.",
      "parentUuid": "2fa7e1a5_32ef8873",
      "revId": "8626a76372cd5b8d6022c99be229b3d0baac2041",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7f93bb1_c3e8b681",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-02-23T04:31:41Z",
      "side": 1,
      "message": "Hi Jayasanker, thanks a lot for the CL. I have some questions.",
      "revId": "8626a76372cd5b8d6022c99be229b3d0baac2041",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efb5c89e_7d9f6b90",
        "filename": "av1/encoder/encode_strategy.c",
        "patchSetId": 2
      },
      "lineNbr": 1270,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-02-23T04:31:41Z",
      "side": 1,
      "message": "Just curious: Does any of the other changes in this CL depend on this change? This change seems independent of the other changes.",
      "revId": "8626a76372cd5b8d6022c99be229b3d0baac2041",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71c1edef_ac4eaf7d",
        "filename": "av1/encoder/encode_strategy.c",
        "patchSetId": 2
      },
      "lineNbr": 1270,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-02-23T04:43:12Z",
      "side": 1,
      "message": "I found that you described this change in one of your comments. This change fixes the following problem:\n\n  ... for single-pass encoding mode with LAP enabled (\u0027good\u0027 preset),\n  firstpass_inter_prediction() was being called in LAP stage, even\n  though kf-max-dist was set to 0. ...\n\nIf this change can be separated from the other changes in this CL, please do that. We can review this change separately.",
      "parentUuid": "efb5c89e_7d9f6b90",
      "revId": "8626a76372cd5b8d6022c99be229b3d0baac2041",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd477f84_bcbabaca",
        "filename": "av1/encoder/encode_strategy.c",
        "patchSetId": 2
      },
      "lineNbr": 1270,
      "author": {
        "id": 14993
      },
      "writtenOn": "2021-02-23T14:40:13Z",
      "side": 1,
      "message": "The other changes in this CL are dependent on this change. Without this change, there would be inter frames present in first-pass/LAP stage. Hence there will be a crash in firstpass_inter_prediction() as it uses last_source buffer. We also feel that current change is recommended as first pass should code all the frames as key-frames to be consistent with encoding stage.\n\nAs you suggested, we have prepared a separate patch for this change:\nhttps://aomedia-review.googlesource.com/c/aom/+/130703\n\nPlease review the same.",
      "parentUuid": "71c1edef_ac4eaf7d",
      "revId": "8626a76372cd5b8d6022c99be229b3d0baac2041",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63fd9757_7b611054",
        "filename": "av1/encoder/encoder_alloc.h",
        "patchSetId": 2
      },
      "lineNbr": 403,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-02-23T04:31:41Z",
      "side": 1,
      "message": "Could you explain how you concluded cpi-\u003escaled_last_source is not used for all-intra frame encoding?\n\nMy code analysis shows this eventually becomes cpi-\u003elast_source. cpi-\u003elast_source is used in two funcitons.\n\n1. av1_source_content_sb(): This function is not called for key frames.\n\n2. av1_update_noise_estimate(): It seems that this function may be called for key frames.",
      "range": {
        "startLine": 402,
        "startChar": 31,
        "endLine": 403,
        "endChar": 59
      },
      "revId": "8626a76372cd5b8d6022c99be229b3d0baac2041",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c57e3fb0_541f07ac",
        "filename": "av1/encoder/encoder_alloc.h",
        "patchSetId": 2
      },
      "lineNbr": 403,
      "author": {
        "id": 14993
      },
      "writtenOn": "2021-02-23T14:40:13Z",
      "side": 1,
      "message": "As per our understanding, the encoder populates the noise_estimate model by making use of last_source buffer, but the consumption of the noise_estimate model happens at the following functions:\n\n1. update_zeromv_cnt() - noise_estimate is used under the condition \u0027ref_frame[0] \u003d\u003d LAST_FRAME \u0026\u0026 is_inter_block(mi)\u0027\n2. set_vbp_thresholds() - noise_estimate is consumed under \u0027!is_key_frame\u0027\n3. av1_choose_var_based_partitioning() - noise_level (derived from noise_estimate) is consumed under \u0027!is_key_frame\u0027\n4. recheck_zeromv_after_denoising() - called from av1_nonrd_pick_inter_mode_sb(), which is not called for intra frames\n\nFrom the above, it is observed that the consumption of noise_estimate model happens only for inter frames. Thus, setting last_source \u003d NULL will avoid the population of the noise estimate model (due to --- check --fn). Hence it is ensured that there will be no change in the encoder behaviour for all-intra frame encoding with this change.",
      "parentUuid": "63fd9757_7b611054",
      "range": {
        "startLine": 402,
        "startChar": 31,
        "endLine": 403,
        "endChar": 59
      },
      "revId": "8626a76372cd5b8d6022c99be229b3d0baac2041",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6bcc445c_27958abd",
        "filename": "av1/encoder/encoder_alloc.h",
        "patchSetId": 2
      },
      "lineNbr": 403,
      "author": {
        "id": 14993
      },
      "writtenOn": "2021-02-23T16:08:11Z",
      "side": 1,
      "message": "We corrected the last paragraph. Please read it as below:\n\nFrom the above, it is observed that the consumption of noise_estimate model happens only for inter frames. Thus, setting last_source \u003d NULL will avoid the population of the noise estimate model (due to the early exit for last_source\u003d\u003dNULL in av1_update_noise_estimate). Hence it is ensured that there will be no change in the encoder behavior for all-intra frame encoding with this change.",
      "parentUuid": "c57e3fb0_541f07ac",
      "range": {
        "startLine": 402,
        "startChar": 31,
        "endLine": 403,
        "endChar": 59
      },
      "revId": "8626a76372cd5b8d6022c99be229b3d0baac2041",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a053f8a2_0b024347",
        "filename": "av1/encoder/encoder_alloc.h",
        "patchSetId": 2
      },
      "lineNbr": 403,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-03-03T05:30:13Z",
      "side": 1,
      "message": "Jayasanker,\n\nThanks a lot for the info! I find this rather difficult to follow, but I think I found and verified all the code you mentioned.\n\n1. You wrote:\n\u003e 1. update_zeromv_cnt() - noise_estimate is used under the condition \u0027ref_frame[0] \u003d\u003d LAST_FRAME \u0026\u0026 is_inter_block(mi)\u0027\n\nDid you mean cpi-\u003econsec_zero_mv instead of noise_estimate?\n\n2. I wonder if it would be clearer if we don\u0027t set sf-\u003ert_sf.use_temporal_noise_estimate to 1 in all intra encoding here in speed_features.c: \n\n    if (cm-\u003ewidth * cm-\u003eheight \u003e 640 * 480)\n      sf-\u003ert_sf.use_temporal_noise_estimate \u003d 1;\n\nI.e., perhaps we should change this if statement to:\n\n    if (cpi-\u003eoxcf.kf_cfg.key_freq_max !\u003d 0 \u0026\u0026 cm-\u003ewidth * cm-\u003eheight \u003e 640 * 480)\n      sf-\u003ert_sf.use_temporal_noise_estimate \u003d 1;",
      "parentUuid": "6bcc445c_27958abd",
      "range": {
        "startLine": 402,
        "startChar": 31,
        "endLine": 403,
        "endChar": 59
      },
      "revId": "8626a76372cd5b8d6022c99be229b3d0baac2041",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cb51f05_0e43edcd",
        "filename": "av1/encoder/lookahead.c",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-02-23T04:31:41Z",
      "side": 1,
      "message": "This needs to be done after the null check for \u0027ctx\u0027, which is currently at line 66 below.\n\nA good solution is to add, after line 54, the following:\n\n  if (!ctx) return ctx;\n\nand delete line 66 and line 86.\n\nAlternatively, you can declare a local variable named max_pre_frames here, and use it until you have allocated \u0027ctx\u0027 and set ctx-\u003emax_pre_frames to this local variable:\n\n  // For all-intra frame encode, previous source frames are not used. Hence\n  // max_pre_frames is set to 0 in this case. \n  uint8_t max_pre_frames \u003d is_all_intra ? 0 : MAX_PRE_FRAMES;\n\n  // Add the lags to depth and clamp\n  depth +\u003d num_lap_buffers;\n  depth \u003d clamp(depth, 1, MAX_TOTAL_BUFFERS);\n\n  // Allocate memory to keep previous source frames available.\n  depth +\u003d max_pre_frames;\n\n  // Allocate the lookahead structures\n  ctx \u003d calloc(1, sizeof(*ctx));\n  if (ctx) {\n    unsigned int i;\n    ctx-\u003emax_sz \u003d depth;\n    ctx-\u003epush_frame_count \u003d 0;\n    ctx-\u003emax_pre_frames \u003d max_pre_frames;\n    ...",
      "revId": "8626a76372cd5b8d6022c99be229b3d0baac2041",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "896c2c7d_737e7542",
        "filename": "av1/encoder/lookahead.c",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 14993
      },
      "writtenOn": "2021-02-23T14:40:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0cb51f05_0e43edcd",
      "revId": "8626a76372cd5b8d6022c99be229b3d0baac2041",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3e09be7_5947d98d",
        "filename": "av1/encoder/lookahead.h",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-02-23T04:31:41Z",
      "side": 1,
      "message": "I suggest we include \u003cstdbool.h\u003e and declare this parameter as the \u0027bool\u0027 type.\n\nIt is fine to use the C99 \u0027bool\u0027 type internally in libaom.",
      "revId": "8626a76372cd5b8d6022c99be229b3d0baac2041",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2848424d_3939cdd9",
        "filename": "av1/encoder/lookahead.h",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 14993
      },
      "writtenOn": "2021-02-23T14:40:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b3e09be7_5947d98d",
      "revId": "8626a76372cd5b8d6022c99be229b3d0baac2041",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e60127c_899b3483",
        "filename": "av1/encoder/lookahead.h",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 14993
      },
      "writtenOn": "2021-02-23T16:08:11Z",
      "side": 1,
      "message": "As we missed adding \u0027#include \u003cstdbool.h\u003e\u0027 in patch-set 3, we took care of the same in the current patch-set.",
      "parentUuid": "2848424d_3939cdd9",
      "revId": "8626a76372cd5b8d6022c99be229b3d0baac2041",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c9b215e8_b7e2d821",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5022
      },
      "writtenOn": "2021-04-28T04:42:06Z",
      "side": 1,
      "message": "What is the benefit of making a separate uniform quantizer? faster encoding in practice?",
      "revId": "d5cc0157536121eb4e93471e3b57c2292b4cec98",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "75a5dc4c_8fc0c71f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5250
      },
      "writtenOn": "2021-04-28T18:20:56Z",
      "side": 1,
      "message": "I was trying to figure out the behavior of the fp quantization and found it\u0027s probably good to write a unit test to document how it works.\n\nBut I found it\u0027s hard to write a unit test for quantize_fp_helper_c because it has ton of parameters. Also it contains the logic of qmatrix which majority of our codebase don\u0027t use including SIMD. (I am not sure what\u0027s the scenario of using qmatrix.)\n\nI also find \"quantize_fp_helper_c()\" which behaves very similar to av1_quantize_fp_simple() but without log_scale.\n\nBtw, my goal is to gradually clarify input/output of get_quantize_error() in tpl.",
      "parentUuid": "c9b215e8_b7e2d821",
      "revId": "d5cc0157536121eb4e93471e3b57c2292b4cec98",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
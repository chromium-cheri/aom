{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "91a00a91_8042118f",
        "filename": "av1/qmode_rc/ducky_encode.cc",
        "patchSetId": 2
      },
      "lineNbr": 669,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-11-29T18:23:39Z",
      "side": 1,
      "message": "This is okay, but another option would be to unconditionally initialize the pointers to nullptr (since it\u0027s safe to delete[] nullptr). One way to do that would be for DuckyEncodeInfoSetEncodeFrameDecision to just do \n\n    *frame_info \u003d {};\n\nto ensure that all fields are initialized.",
      "range": {
        "startLine": 669,
        "startChar": 0,
        "endLine": 669,
        "endChar": 58
      },
      "revId": "cf67122210bfa3d45fba834c7114df6ed4b7ae23",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91704e18_b55cff64",
        "filename": "test/ducky_encode_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 130,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-11-29T18:23:39Z",
      "side": 1,
      "message": "Use ASSERT_TRUE instead of EXPECT_TRUE for the status checks, since it\u0027s unlikely anything afterward will work (and there\u0027s a good chance it will crash).",
      "range": {
        "startLine": 130,
        "startChar": 2,
        "endLine": 130,
        "endChar": 13
      },
      "revId": "cf67122210bfa3d45fba834c7114df6ed4b7ae23",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e8be473_e304296c",
        "filename": "test/ducky_encode_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-11-29T18:23:39Z",
      "side": 1,
      "message": "Instead of reusing this variable, it might be clearer to have two vectors, e.g. tpl_pass_gop_encode_info and final_pass_gop_encode_info.",
      "range": {
        "startLine": 152,
        "startChar": 0,
        "endLine": 152,
        "endChar": 31
      },
      "revId": "cf67122210bfa3d45fba834c7114df6ed4b7ae23",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94961846_a50cdc73",
        "filename": "test/ducky_encode_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 179,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-11-29T18:23:39Z",
      "side": 1,
      "message": "(optional) Another way to do this is:\n\n    EXPECT_THAT(encoded_frames_list, \n                Each(Field(\"psnr\", \u0026aom::EncodeFrameResult::psnr, Gt(37))));\n\nThis will let you see which frame is failing if it fails.",
      "range": {
        "startLine": 176,
        "startChar": 0,
        "endLine": 179,
        "endChar": 0
      },
      "revId": "cf67122210bfa3d45fba834c7114df6ed4b7ae23",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
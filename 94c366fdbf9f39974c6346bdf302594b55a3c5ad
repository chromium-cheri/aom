{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a11a149e_5b16ae16",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-03-18T18:57:22Z",
      "side": 1,
      "message": "Chi Yo: I suggest we undo the changes to the aom_malloc and memcpy calls in this CL. Please see my comment below.",
      "revId": "94c366fdbf9f39974c6346bdf302594b55a3c5ad",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d4b454c_270cba03",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 2
      },
      "lineNbr": 850,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-03-18T18:57:22Z",
      "side": 1,
      "message": "Looking at the aom_malloc call closer, I now prefer the original code because the type shows up twice:\n\n        CHECK_MEM_ERROR(cm, thread_data-\u003etd-\u003emb.mv_costs,\n                        (MvCosts *)aom_malloc(sizeof(MvCosts)));\n\nI suggest we undo the changes to the aom_malloc calls. We can also undo the changes to the memcpy calls, and then change the memcpy calls to struct copies in a separate CL.\n\nSorry about the change of opinions.",
      "revId": "94c366fdbf9f39974c6346bdf302594b55a3c5ad",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3036b14_ee307b7e",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 2
      },
      "lineNbr": 850,
      "author": {
        "id": 9823
      },
      "writtenOn": "2021-03-18T19:43:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6d4b454c_270cba03",
      "revId": "94c366fdbf9f39974c6346bdf302594b55a3c5ad",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9de80a2c_bf30c03c",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 2
      },
      "lineNbr": 852,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-03-18T02:30:05Z",
      "side": 1,
      "message": "Optional: I forgot to mention that struct copy is a good alternative. Instead of the memcpy() call, we can say\n\n      *thread_data-\u003etd-\u003emb.mv_costs \u003d *cpi-\u003etd.mb.mv_costs;",
      "revId": "94c366fdbf9f39974c6346bdf302594b55a3c5ad",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03026a23_f510e5e1",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 2
      },
      "lineNbr": 852,
      "author": {
        "id": 9823
      },
      "writtenOn": "2021-03-18T18:04:35Z",
      "side": 1,
      "message": "Grep suggests that there are a couple more memcpy usages on structs.\nLet\u0027s take care of them together in a separate commit.",
      "parentUuid": "9de80a2c_bf30c03c",
      "revId": "94c366fdbf9f39974c6346bdf302594b55a3c5ad",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "088dbb98_4936b81c",
        "filename": "av1/encoder/rd.c",
        "patchSetId": 2
      },
      "lineNbr": 620,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-03-18T18:57:22Z",
      "side": 1,
      "message": "If you think the change to av1_allow_intrabc(cm) is potentially a bug fix, I suggest moving it to a separate CL, so that this CL consists of only cleanup changes.",
      "range": {
        "startLine": 620,
        "startChar": 30,
        "endLine": 620,
        "endChar": 51
      },
      "revId": "94c366fdbf9f39974c6346bdf302594b55a3c5ad",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b7673db_ca061161",
        "filename": "av1/encoder/rd.c",
        "patchSetId": 2
      },
      "lineNbr": 620,
      "author": {
        "id": 9823
      },
      "writtenOn": "2021-03-18T19:43:55Z",
      "side": 1,
      "message": "I think this is fine, since for our use case intrabc and screen content flags are always set together.\n\nEven if they aren\u0027t, the behaviors of the old code would still be correct, just slightly slower by a fractional of a percent.",
      "parentUuid": "088dbb98_4936b81c",
      "range": {
        "startLine": 620,
        "startChar": 30,
        "endLine": 620,
        "endChar": 51
      },
      "revId": "94c366fdbf9f39974c6346bdf302594b55a3c5ad",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13046e13_5f5eafab",
        "filename": "av1/encoder/speed_features.h",
        "patchSetId": 2
      },
      "lineNbr": 300,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-03-18T00:31:35Z",
      "side": 1,
      "message": "Nit: The \"INTERNAL\" and \"INT\" prefixes are a little confusing. Did you consider naming this MV_COST_UPD_TYPE?  Are you worried that the MV_ prefix may be confusing when used with dv?",
      "revId": "94c366fdbf9f39974c6346bdf302594b55a3c5ad",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5b44d4d_129d015b",
        "filename": "av1/encoder/speed_features.h",
        "patchSetId": 2
      },
      "lineNbr": 300,
      "author": {
        "id": 9823
      },
      "writtenOn": "2021-03-18T01:41:13Z",
      "side": 1,
      "message": "I\u0027m naming this internal to contrast it with COST_UPDATE_TYPE under av1/encoder/encoder.h, which we cannot change without breaking public API.\n\nI didn\u0027t name it with MV because we could potentially reuse the enum to control how often to update the cost table for other elements.",
      "parentUuid": "13046e13_5f5eafab",
      "revId": "94c366fdbf9f39974c6346bdf302594b55a3c5ad",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65a5c46b_b4ec2f27",
        "filename": "av1/encoder/speed_features.h",
        "patchSetId": 2
      },
      "lineNbr": 300,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-03-18T02:01:36Z",
      "side": 1,
      "message": "av1/encoder/encoder.h is an internal header. All the public headers are in the aom/ directory and their names start with \"aom\". For example, aom/aom_codec.h and aom/aom_encoder.h.",
      "parentUuid": "b5b44d4d_129d015b",
      "revId": "94c366fdbf9f39974c6346bdf302594b55a3c5ad",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d543f85_50766e6f",
        "filename": "av1/encoder/speed_features.h",
        "patchSetId": 2
      },
      "lineNbr": 300,
      "author": {
        "id": 9823
      },
      "writtenOn": "2021-03-18T18:04:35Z",
      "side": 1,
      "message": "You are right, but here\u0027s my rationale behind the prefix INTERNAL:\n\nThe values of COST_UPDATE_TYPE are used indirectly by the encoder interface in av1/av1_cx_iface.c, where integers passed from the command-lines are casted to COST_UPDATE_TYPE. So the user does rely the the values of COST_UPDATE_TYPE.\n\nOn the other hand, the users never really have direct control over INTERNAL_COST_UPD_TYPE, so we are free to do whatever we want with it.\n\nAn alternative solution is to reuse COST_UPDATE_TYPE for our speed features, and add an extra COST_UPD_SBROW_SET at the end. This preserves the public API, but breaks the monotonicity.",
      "parentUuid": "65a5c46b_b4ec2f27",
      "revId": "94c366fdbf9f39974c6346bdf302594b55a3c5ad",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f00bdaef_b297b251",
        "filename": "av1/encoder/speed_features.h",
        "patchSetId": 2
      },
      "lineNbr": 300,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-03-18T18:57:22Z",
      "side": 1,
      "message": "Your rationale makes sense. We can address my confusion with a comment that explains the INTERNAL_ prefix of this enum (because there is a COST_UPD_TYPE enum whose values are public even though the symbolic names are not exposed).\n\nAnother nit: I suggest using the same prefix (either INTERNAL_ or INT_) for the enum type and the enum constants. I\u0027ll let you pick one. (I would prefer INTERNAL_, unless the INT_ prefix is common in libaom.)",
      "parentUuid": "2d543f85_50766e6f",
      "revId": "94c366fdbf9f39974c6346bdf302594b55a3c5ad",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5be9b96a_8f569c51",
        "filename": "av1/encoder/speed_features.h",
        "patchSetId": 2
      },
      "lineNbr": 300,
      "author": {
        "id": 9823
      },
      "writtenOn": "2021-03-18T19:43:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f00bdaef_b297b251",
      "revId": "94c366fdbf9f39974c6346bdf302594b55a3c5ad",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9de80a2c_bf30c03c",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 2
      },
      "lineNbr": 852,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-03-18T02:30:05Z",
      "side": 1,
      "message": "Optional: I forgot to mention that struct copy is a good alternative. Instead of the memcpy() call, we can say\n\n      *thread_data-\u003etd-\u003emb.mv_costs \u003d *cpi-\u003etd.mb.mv_costs;",
      "revId": "94c366fdbf9f39974c6346bdf302594b55a3c5ad",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03026a23_f510e5e1",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 2
      },
      "lineNbr": 852,
      "author": {
        "id": 9823
      },
      "writtenOn": "2021-03-18T18:04:35Z",
      "side": 1,
      "message": "Grep suggests that there are a couple more memcpy usages on structs.\nLet\u0027s take care of them together in a separate commit.",
      "parentUuid": "9de80a2c_bf30c03c",
      "revId": "94c366fdbf9f39974c6346bdf302594b55a3c5ad",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13046e13_5f5eafab",
        "filename": "av1/encoder/speed_features.h",
        "patchSetId": 2
      },
      "lineNbr": 300,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-03-18T00:31:35Z",
      "side": 1,
      "message": "Nit: The \"INTERNAL\" and \"INT\" prefixes are a little confusing. Did you consider naming this MV_COST_UPD_TYPE?  Are you worried that the MV_ prefix may be confusing when used with dv?",
      "revId": "94c366fdbf9f39974c6346bdf302594b55a3c5ad",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5b44d4d_129d015b",
        "filename": "av1/encoder/speed_features.h",
        "patchSetId": 2
      },
      "lineNbr": 300,
      "author": {
        "id": 9823
      },
      "writtenOn": "2021-03-18T01:41:13Z",
      "side": 1,
      "message": "I\u0027m naming this internal to contrast it with COST_UPDATE_TYPE under av1/encoder/encoder.h, which we cannot change without breaking public API.\n\nI didn\u0027t name it with MV because we could potentially reuse the enum to control how often to update the cost table for other elements.",
      "parentUuid": "13046e13_5f5eafab",
      "revId": "94c366fdbf9f39974c6346bdf302594b55a3c5ad",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65a5c46b_b4ec2f27",
        "filename": "av1/encoder/speed_features.h",
        "patchSetId": 2
      },
      "lineNbr": 300,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-03-18T02:01:36Z",
      "side": 1,
      "message": "av1/encoder/encoder.h is an internal header. All the public headers are in the aom/ directory and their names start with \"aom\". For example, aom/aom_codec.h and aom/aom_encoder.h.",
      "parentUuid": "b5b44d4d_129d015b",
      "revId": "94c366fdbf9f39974c6346bdf302594b55a3c5ad",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d543f85_50766e6f",
        "filename": "av1/encoder/speed_features.h",
        "patchSetId": 2
      },
      "lineNbr": 300,
      "author": {
        "id": 9823
      },
      "writtenOn": "2021-03-18T18:04:35Z",
      "side": 1,
      "message": "You are right, but here\u0027s my rationale behind the prefix INTERNAL:\n\nThe values of COST_UPDATE_TYPE are used indirectly by the encoder interface in av1/av1_cx_iface.c, where integers passed from the command-lines are casted to COST_UPDATE_TYPE. So the user does rely the the values of COST_UPDATE_TYPE.\n\nOn the other hand, the users never really have direct control over INTERNAL_COST_UPD_TYPE, so we are free to do whatever we want with it.\n\nAn alternative solution is to reuse COST_UPDATE_TYPE for our speed features, and add an extra COST_UPD_SBROW_SET at the end. This preserves the public API, but breaks the monotonicity.",
      "parentUuid": "65a5c46b_b4ec2f27",
      "revId": "94c366fdbf9f39974c6346bdf302594b55a3c5ad",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
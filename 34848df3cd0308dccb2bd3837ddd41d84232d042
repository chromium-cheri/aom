{
  "comments": [
    {
      "key": {
        "uuid": "3541d8d3_52e49a80",
        "filename": "aom_util/aom_thread.h",
        "patchSetId": 6
      },
      "lineNbr": 183,
      "author": {
        "id": 5185
      },
      "writtenOn": "2018-05-01T07:18:51Z",
      "side": 1,
      "message": "Is \"ok\" calculated right?",
      "range": {
        "startLine": 183,
        "startChar": 4,
        "endLine": 183,
        "endChar": 6
      },
      "revId": "34848df3cd0308dccb2bd3837ddd41d84232d042",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fdda544_b6cd74c9",
        "filename": "aom_util/aom_thread.h",
        "patchSetId": 6
      },
      "lineNbr": 183,
      "author": {
        "id": 9545
      },
      "writtenOn": "2018-05-01T18:07:05Z",
      "side": 1,
      "message": "1. SetEvent() returns BOOL. So this seems correct.\n\n2. Since USE_WINDOWS_CONDITION_VARIABLE is defined for Windows Vista or later, as long as we don\u0027t support Windows XP, we don\u0027t use this implementation. So it is more important to check the USE_WINDOWS_CONDITION_VARIABLE code.",
      "parentUuid": "3541d8d3_52e49a80",
      "range": {
        "startLine": 183,
        "startChar": 4,
        "endLine": 183,
        "endChar": 6
      },
      "revId": "34848df3cd0308dccb2bd3837ddd41d84232d042",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7dca4eab_160671bf",
        "filename": "aom_util/aom_thread.h",
        "patchSetId": 6
      },
      "lineNbr": 183,
      "author": {
        "id": 5185
      },
      "writtenOn": "2018-05-01T22:57:47Z",
      "side": 1,
      "message": "To make myself clear, for this function, should \"ok\" be the bitwise AND of every thread\u0027s return value?",
      "parentUuid": "3fdda544_b6cd74c9",
      "range": {
        "startLine": 183,
        "startChar": 4,
        "endLine": 183,
        "endChar": 6
      },
      "revId": "34848df3cd0308dccb2bd3837ddd41d84232d042",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4c7512a_0401c477",
        "filename": "aom_util/aom_thread.h",
        "patchSetId": 6
      },
      "lineNbr": 183,
      "author": {
        "id": 9545
      },
      "writtenOn": "2018-05-01T23:16:43Z",
      "side": 1,
      "message": "This function is only executed by the signaling thread. The waiting threads don\u0027t call this function. (They call pthread_cond_wait or pthread_cond_timedwait.) So this function can\u0027t get the return values of the waiting threads.\n\nNote: It is very tricky to implement pthread condition variables using Windows semaphores and events. Since we don\u0027t support Windows XP, I suggest we only review the USE_WINDOWS_CONDITION_VARIABLE implementation.",
      "parentUuid": "7dca4eab_160671bf",
      "range": {
        "startLine": 183,
        "startChar": 4,
        "endLine": 183,
        "endChar": 6
      },
      "revId": "34848df3cd0308dccb2bd3837ddd41d84232d042",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6818bc51_fb80ebe5",
        "filename": "aom_util/aom_thread.h",
        "patchSetId": 6
      },
      "lineNbr": 183,
      "author": {
        "id": 5185
      },
      "writtenOn": "2018-05-02T03:55:16Z",
      "side": 1,
      "message": "\"ok \u003d \" to \"ok \u0026\u003d\"?",
      "parentUuid": "b4c7512a_0401c477",
      "range": {
        "startLine": 183,
        "startChar": 4,
        "endLine": 183,
        "endChar": 6
      },
      "revId": "34848df3cd0308dccb2bd3837ddd41d84232d042",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd88b52c_47a4b427",
        "filename": "aom_util/aom_thread.h",
        "patchSetId": 6
      },
      "lineNbr": 183,
      "author": {
        "id": 8893
      },
      "writtenOn": "2018-05-02T10:20:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6818bc51_fb80ebe5",
      "range": {
        "startLine": 183,
        "startChar": 4,
        "endLine": 183,
        "endChar": 6
      },
      "revId": "34848df3cd0308dccb2bd3837ddd41d84232d042",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b32a8c47_81bff90e",
        "filename": "aom_util/aom_thread.h",
        "patchSetId": 6
      },
      "lineNbr": 372,
      "author": {
        "id": 9545
      },
      "writtenOn": "2018-05-01T18:07:05Z",
      "side": 1,
      "message": "Nit: [This is just a comment, not a request for change.] In a typical thread API, the thread hook function gets only one opaque pointer argument. If it needs more than one pointer, it can collect the pointers in a struct and receive a pointer to the struct as the single opaque pointer argument.",
      "range": {
        "startLine": 371,
        "startChar": 0,
        "endLine": 372,
        "endChar": 77
      },
      "revId": "34848df3cd0308dccb2bd3837ddd41d84232d042",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a45cd925_beea9f3e",
        "filename": "av1/common/thread_common.c",
        "patchSetId": 6
      },
      "lineNbr": 31,
      "author": {
        "id": 5185
      },
      "writtenOn": "2018-05-01T07:18:51Z",
      "side": 1,
      "message": "May need to retest to see if these are still the best choices.",
      "range": {
        "startLine": 24,
        "startChar": 2,
        "endLine": 31,
        "endChar": 13
      },
      "revId": "34848df3cd0308dccb2bd3837ddd41d84232d042",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f9c9f0d_e27843ed",
        "filename": "av1/common/thread_common.c",
        "patchSetId": 6
      },
      "lineNbr": 31,
      "author": {
        "id": 8893
      },
      "writtenOn": "2018-05-02T10:20:02Z",
      "side": 1,
      "message": "We have seen that the value of nsync has no significant impact on the decoder performance(\u003c 0.5%) for resolutions 1920x1080, 1280x720 and 640x480. However, the decoding time increases by ~2% for CIF resolution (352x288) with nsync range of 2,4, 8 w.r.t nsync range of 1.",
      "parentUuid": "a45cd925_beea9f3e",
      "range": {
        "startLine": 24,
        "startChar": 2,
        "endLine": 31,
        "endChar": 13
      },
      "revId": "34848df3cd0308dccb2bd3837ddd41d84232d042",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77ef89eb_7b75b2ef",
        "filename": "av1/common/thread_common.c",
        "patchSetId": 6
      },
      "lineNbr": 128,
      "author": {
        "id": 5185
      },
      "writtenOn": "2018-05-01T07:18:51Z",
      "side": 1,
      "message": "Why only these 3 elements are reset? How about others?",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 128,
        "endChar": 59
      },
      "revId": "34848df3cd0308dccb2bd3837ddd41d84232d042",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6be4fe4a_ef82622c",
        "filename": "av1/common/thread_common.c",
        "patchSetId": 6
      },
      "lineNbr": 128,
      "author": {
        "id": 8893
      },
      "writtenOn": "2018-05-02T10:20:02Z",
      "side": 1,
      "message": "As only these 3 elements are used in the \u0027thread_loop_filter_rows\u0027 function we reset only those. Resetting the whole \u0027macroblockd_plane\u0027 structure is unnecessary.",
      "parentUuid": "77ef89eb_7b75b2ef",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 128,
        "endChar": 59
      },
      "revId": "34848df3cd0308dccb2bd3837ddd41d84232d042",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f01596a_68ac0e6b",
        "filename": "av1/common/thread_common.c",
        "patchSetId": 6
      },
      "lineNbr": 193,
      "author": {
        "id": 5185
      },
      "writtenOn": "2018-05-01T07:18:51Z",
      "side": 1,
      "message": "Have you try different enqueue order?",
      "range": {
        "startLine": 193,
        "startChar": 0,
        "endLine": 193,
        "endChar": 33
      },
      "revId": "34848df3cd0308dccb2bd3837ddd41d84232d042",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "190b7284_210c4a33",
        "filename": "av1/common/thread_common.c",
        "patchSetId": 6
      },
      "lineNbr": 193,
      "author": {
        "id": 8893
      },
      "writtenOn": "2018-05-02T10:20:02Z",
      "side": 1,
      "message": "The horizontal edge filtering requires top-right and right super-block of vertical edge filtering to be completed. The time spent in \u0027sync_read\u0027 is minimized in this particular order. We have also verified that this enqueue order gives the best performance.",
      "parentUuid": "3f01596a_68ac0e6b",
      "range": {
        "startLine": 193,
        "startChar": 0,
        "endLine": 193,
        "endChar": 33
      },
      "revId": "34848df3cd0308dccb2bd3837ddd41d84232d042",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4582b11f_cf33b628",
        "filename": "av1/common/thread_common.c",
        "patchSetId": 6
      },
      "lineNbr": 335,
      "author": {
        "id": 9545
      },
      "writtenOn": "2018-05-01T18:07:05Z",
      "side": 1,
      "message": "Nit: Just curious: why do we initialize the bytes to -1 instead of 0?",
      "range": {
        "startLine": 335,
        "startChar": 35,
        "endLine": 335,
        "endChar": 37
      },
      "revId": "34848df3cd0308dccb2bd3837ddd41d84232d042",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "726e90ef_ed0c6faa",
        "filename": "av1/common/thread_common.c",
        "patchSetId": 6
      },
      "lineNbr": 335,
      "author": {
        "id": 5185
      },
      "writtenOn": "2018-05-01T23:03:28Z",
      "side": 1,
      "message": "-1 is the invalid value. We initialize them to invalid values.",
      "parentUuid": "4582b11f_cf33b628",
      "range": {
        "startLine": 335,
        "startChar": 35,
        "endLine": 335,
        "endChar": 37
      },
      "revId": "34848df3cd0308dccb2bd3837ddd41d84232d042",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a5a1783_f709204d",
        "filename": "av1/decoder/decodeframe.c",
        "patchSetId": 6
      },
      "lineNbr": 1977,
      "author": {
        "id": 5185
      },
      "writtenOn": "2018-05-01T07:18:51Z",
      "side": 1,
      "message": "Where will \"data3\" be used?",
      "range": {
        "startLine": 1977,
        "startChar": 52,
        "endLine": 1977,
        "endChar": 62
      },
      "revId": "34848df3cd0308dccb2bd3837ddd41d84232d042",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9654a08_8d9e307e",
        "filename": "av1/decoder/decodeframe.c",
        "patchSetId": 6
      },
      "lineNbr": 1977,
      "author": {
        "id": 9545
      },
      "writtenOn": "2018-05-01T18:07:05Z",
      "side": 1,
      "message": "\"data3\" is not used by tile_worker_hook, but is used by loop_filter_row_worker.",
      "parentUuid": "2a5a1783_f709204d",
      "range": {
        "startLine": 1977,
        "startChar": 52,
        "endLine": 1977,
        "endChar": 62
      },
      "revId": "34848df3cd0308dccb2bd3837ddd41d84232d042",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53a0e7a3_3957aa8f",
        "filename": "av1/decoder/decodeframe.c",
        "patchSetId": 6
      },
      "lineNbr": 1977,
      "author": {
        "id": 8893
      },
      "writtenOn": "2018-05-02T10:20:02Z",
      "side": 1,
      "message": "The other option is to add \"MACROBLOCKD *xd\" as a member of \"LFWorkerData\" structure. Doing so would eliminate the third argument.",
      "parentUuid": "c9654a08_8d9e307e",
      "range": {
        "startLine": 1977,
        "startChar": 52,
        "endLine": 1977,
        "endChar": 62
      },
      "revId": "34848df3cd0308dccb2bd3837ddd41d84232d042",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d48fabdf_9274440e",
        "filename": "av1/decoder/decodeframe.c",
        "patchSetId": 6
      },
      "lineNbr": 1984,
      "author": {
        "id": 9545
      },
      "writtenOn": "2018-05-01T18:07:05Z",
      "side": 1,
      "message": "Nit: It would be good to assert that arg3 \u003d\u003d NULL.",
      "range": {
        "startLine": 1984,
        "startChar": 2,
        "endLine": 1984,
        "endChar": 13
      },
      "revId": "34848df3cd0308dccb2bd3837ddd41d84232d042",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a79a4b3_b2d4acf6",
        "filename": "av1/decoder/decodeframe.c",
        "patchSetId": 6
      },
      "lineNbr": 1984,
      "author": {
        "id": 8893
      },
      "writtenOn": "2018-05-02T10:20:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d48fabdf_9274440e",
      "range": {
        "startLine": 1984,
        "startChar": 2,
        "endLine": 1984,
        "endChar": 13
      },
      "revId": "34848df3cd0308dccb2bd3837ddd41d84232d042",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1852d5da_197cdfbc",
        "filename": "av1/decoder/decoder.c",
        "patchSetId": 6
      },
      "lineNbr": 157,
      "author": {
        "id": 5185
      },
      "writtenOn": "2018-05-01T07:18:51Z",
      "side": 1,
      "message": "Could it use pbi-\u003enum_workers instead?",
      "range": {
        "startLine": 157,
        "startChar": 6,
        "endLine": 157,
        "endChar": 34
      },
      "revId": "34848df3cd0308dccb2bd3837ddd41d84232d042",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8662ae94_6516dc4d",
        "filename": "av1/decoder/decoder.c",
        "patchSetId": 6
      },
      "lineNbr": 157,
      "author": {
        "id": 8893
      },
      "writtenOn": "2018-05-02T10:20:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1852d5da_197cdfbc",
      "range": {
        "startLine": 157,
        "startChar": 6,
        "endLine": 157,
        "endChar": 34
      },
      "revId": "34848df3cd0308dccb2bd3837ddd41d84232d042",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32e51ae1_358b2eba",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 6
      },
      "lineNbr": 39,
      "author": {
        "id": 9545
      },
      "writtenOn": "2018-05-01T18:07:05Z",
      "side": 1,
      "message": "Nit: It may be good to assert these two unused data pointers are null.",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 39,
        "endChar": 21
      },
      "revId": "34848df3cd0308dccb2bd3837ddd41d84232d042",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a0dbd40_80ecd6a3",
        "filename": "av1/encoder/ethread.c",
        "patchSetId": 6
      },
      "lineNbr": 39,
      "author": {
        "id": 8893
      },
      "writtenOn": "2018-05-02T10:20:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "32e51ae1_358b2eba",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 39,
        "endChar": 21
      },
      "revId": "34848df3cd0308dccb2bd3837ddd41d84232d042",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    }
  ]
}
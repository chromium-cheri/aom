{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a543fc3f_26da1e9e",
        "filename": "av1/encoder/global_motion_facade.c",
        "patchSetId": 9
      },
      "lineNbr": 109,
      "author": {
        "id": 29052
      },
      "writtenOn": "2022-12-15T19:50:01Z",
      "side": 1,
      "message": "@bohanli - This is the one big thing I\u0027m not really sure about with this patch.\n\nDo you know how the multithreaded global motion search is done?\n\nMy concern is that, if the current frame has multiple references which point to the same underlying buffer, then we might end up with multiple threads trying to fill the same pyramid struct at the same time.\n\nBut I don\u0027t know if that can happen in practice, or if there\u0027s some deduplication logic somewhere which means we only evaluate global motion once per distinct ref frame. If we don\u0027t have that logic, then maybe we should implement it somehow.",
      "range": {
        "startLine": 109,
        "startChar": 2,
        "endLine": 109,
        "endChar": 59
      },
      "revId": "30d84788cc7fb6875db53186cf913f2db06bf7d3",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32a569c5_b9cd83db",
        "filename": "av1/encoder/global_motion_facade.c",
        "patchSetId": 9
      },
      "lineNbr": 109,
      "author": {
        "id": 7525
      },
      "writtenOn": "2022-12-15T22:30:00Z",
      "side": 1,
      "message": "Thanks for the note, Rachel. However I\u0027m not super familiar with that either. I\u0027ve added Yunqing to the reviewers, who might be more familiar with this part. Yunqing, could you help look at this part? Thanks!",
      "parentUuid": "a543fc3f_26da1e9e",
      "range": {
        "startLine": 109,
        "startChar": 2,
        "endLine": 109,
        "endChar": 59
      },
      "revId": "30d84788cc7fb6875db53186cf913f2db06bf7d3",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce4a2572_f79545ec",
        "filename": "av1/encoder/global_motion_facade.c",
        "patchSetId": 9
      },
      "lineNbr": 109,
      "author": {
        "id": 5185
      },
      "writtenOn": "2022-12-15T23:04:43Z",
      "side": 1,
      "message": "If I remember correctly, in GM, 1 thread works on 1 reference frame. You can see if you need special handling for multiple thread case.",
      "parentUuid": "32a569c5_b9cd83db",
      "range": {
        "startLine": 109,
        "startChar": 2,
        "endLine": 109,
        "endChar": 59
      },
      "revId": "30d84788cc7fb6875db53186cf913f2db06bf7d3",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eaff176c_5f2d92df",
        "filename": "av1/encoder/global_motion_facade.c",
        "patchSetId": 9
      },
      "lineNbr": 109,
      "author": {
        "id": 29052
      },
      "writtenOn": "2022-12-19T09:40:02Z",
      "side": 1,
      "message": "I thought about this issue a little more over the weekend, and there are potentially two cases where we might end up with multiple threads wanting to compute global motion using the same ref frame buffer:\n\n1) Within one frame, if multiple references point to the same underlying buffer\n\n2) If we are encoding two frames in parallel, and they both use the same reference frame\n\nThe easiest solution I can see, which is guaranteed to work right in both of these cases, is to add a mutex to the ImagePyramid struct.\n\nThis mutex would need to be held while checking the \"valid\" flag, and while computing the pyramid (to ensure only one thread will do so). But, once we know that the pyramid is valid, we don\u0027t need to hold the mutex in order to read from it. This is because, once the pyramid is filled in, its values never change until we recycle the frame buffer - at which point we know there are no outstanding references.\n\nThat should ensure that the mutex has extremely low contention, which should make the performance impact negligible.\n\nI will have a go at implementing this solution and upload it shortly.",
      "parentUuid": "ce4a2572_f79545ec",
      "range": {
        "startLine": 109,
        "startChar": 2,
        "endLine": 109,
        "endChar": 59
      },
      "revId": "30d84788cc7fb6875db53186cf913f2db06bf7d3",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
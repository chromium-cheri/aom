{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d5646220_c7bcf937",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-11-21T22:15:10Z",
      "side": 1,
      "message": "PTAL. Thanks!",
      "revId": "fe1b5c2dc6fe26ba46055418182bd4dd38a63791",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83589ecb_fedafa43",
        "filename": "av1/qmode_rc/ratectrl_qmode.cc",
        "patchSetId": 1
      },
      "lineNbr": 1187,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-11-18T23:45:36Z",
      "side": 1,
      "message": "It seems that the `gop_frame` is intentionally a copy rather than a reference. Note that we modify a field in `gop_frame` and then use the modified copy in lines 1193-1194. Using a copy is correct if we do not want to modify `lookahead_stat.gop_struct-\u003egop_frame_list`.\n\nIf that\u0027s the case, it would be good to add a comment here to reassure the reader that `gop_frame` should not be a reference.\n\nAn alternative is to explicitly make a copy at line 1193 only.",
      "revId": "fe1b5c2dc6fe26ba46055418182bd4dd38a63791",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "979110d0_a8148ab3",
        "filename": "av1/qmode_rc/ratectrl_qmode.cc",
        "patchSetId": 1
      },
      "lineNbr": 1187,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-11-21T22:25:42Z",
      "side": 1,
      "message": "Yeah, lookahead_stats is const, so we don\u0027t want to modify it. You\u0027re right we could just make a copy at line 1193, which would save the unnecessary copy for key frames (but most frames aren\u0027t key frames, so it\u0027s not a big deal).",
      "parentUuid": "83589ecb_fedafa43",
      "revId": "fe1b5c2dc6fe26ba46055418182bd4dd38a63791",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2966e688_64063d75",
        "filename": "av1/qmode_rc/ratectrl_qmode.cc",
        "patchSetId": 1
      },
      "lineNbr": 1193,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-11-21T22:25:42Z",
      "side": 1,
      "message": "Jerome/Jingning: It occurs to me that this should probably also be updating gop_frame.order_idx (though I don\u0027t know if there\u0027s any code that cares about that field).",
      "range": {
        "startLine": 1193,
        "startChar": 0,
        "endLine": 1193,
        "endChar": 48
      },
      "revId": "fe1b5c2dc6fe26ba46055418182bd4dd38a63791",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92f3ce1c_67da0741",
        "filename": "av1/qmode_rc/ratectrl_qmode.cc",
        "patchSetId": 1
      },
      "lineNbr": 1193,
      "author": {
        "id": 5022
      },
      "writtenOn": "2022-11-21T22:29:00Z",
      "side": 1,
      "message": "This is intended as we need to offset the next sub-gop\u0027s frame coding order index by the size of the first sub-gop. Hence every gop_frame.coding_idx will get a constant offset of gop_size_offset.",
      "parentUuid": "2966e688_64063d75",
      "range": {
        "startLine": 1193,
        "startChar": 0,
        "endLine": 1193,
        "endChar": 48
      },
      "revId": "fe1b5c2dc6fe26ba46055418182bd4dd38a63791",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "fe1b5c2dc6fe26ba46055418182bd4dd38a63791",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "fe1b5c2dc6fe26ba46055418182bd4dd38a63791",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "fe1b5c2dc6fe26ba46055418182bd4dd38a63791",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
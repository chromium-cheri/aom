{
  "comments": [
    {
      "key": {
        "uuid": "8708f7b1_780aaec6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 8893
      },
      "writtenOn": "2020-07-20T17:05:09Z",
      "side": 1,
      "message": "Hi Yunqing,\n\nThis patch fixes the issue reported in BUG\u003daomedia:2752. \n\nPlease note that in this patch we memset the \u0027left_data\u0027 and \u0027above_data\u0027 for every block. We have verified that there is no speed impact for both encoder and decoder with this change. \n\nIf this memset is to be avoided at every block level, we could consider the below two approaches. \n1. Make the arrays \u0027left_data\u0027 and \u0027above_data\u0027 as members of the structure MACROBLOCKD with size corresponding to high bit-depth use-case. This would result in negligible increase in memory footprint. \n2. Dynamically allocate the arrays \u0027left_data\u0027 and \u0027above_data\u0027 for low/high bit-depth case. This would require changes to encoder, decoder, multi-thread and non-multi-thread implementations. \n\nPlease let us know your opinion.  ",
      "revId": "e72d3c116b75df5115c9f90b12fb4ae11e5ecd32",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df325053_bef0e490",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5185
      },
      "writtenOn": "2020-07-20T17:55:19Z",
      "side": 1,
      "message": "Hi Deepa, Thanks for the fix. What you are trying to do - initializing several extra bytes should be fine. That wouldn\u0027t impact speed much. Suggest to consolidate the fix with the original code, so no duplicate memset operation is done.",
      "parentUuid": "8708f7b1_780aaec6",
      "revId": "e72d3c116b75df5115c9f90b12fb4ae11e5ecd32",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ccae49a_3906514b",
        "filename": "av1/common/reconintra.c",
        "patchSetId": 2
      },
      "lineNbr": 1209,
      "author": {
        "id": 5185
      },
      "writtenOn": "2020-07-20T17:55:19Z",
      "side": 1,
      "message": "Krishna\u0027s change for high-bit depth function. Please see my comment below first.",
      "range": {
        "startLine": 1209,
        "startChar": 4,
        "endLine": 1209,
        "endChar": 73
      },
      "revId": "e72d3c116b75df5115c9f90b12fb4ae11e5ecd32",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fbe9f1d_005dfbe0",
        "filename": "av1/common/reconintra.c",
        "patchSetId": 2
      },
      "lineNbr": 1404,
      "author": {
        "id": 5185
      },
      "writtenOn": "2020-07-20T17:55:19Z",
      "side": 1,
      "message": "Hi Deepa, this valgrind issue was first seen and fixed here for 8-bit function. Krishna followed the same way to fix it for high-bit depth function. But looks like his fix was not enough. Thanks for testing and fixing this. I know reproducing this bug is quite hard. Would you be able to consolidate the fix into 1 place?",
      "range": {
        "startLine": 1401,
        "startChar": 1,
        "endLine": 1404,
        "endChar": 73
      },
      "revId": "e72d3c116b75df5115c9f90b12fb4ae11e5ecd32",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    }
  ]
}
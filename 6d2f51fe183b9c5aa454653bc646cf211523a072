{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6868decc_303e2ccd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-05-16T18:14:37Z",
      "side": 1,
      "message": "Bug: b/229104835\n\nworks and will update the bug",
      "revId": "6d2f51fe183b9c5aa454653bc646cf211523a072",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "618dc896_75daabe3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 14319
      },
      "writtenOn": "2022-05-16T18:59:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6868decc_303e2ccd",
      "revId": "6d2f51fe183b9c5aa454653bc646cf211523a072",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a94238f4_825d6eda",
        "filename": "aom/aom_image.h",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-05-16T18:25:49Z",
      "side": 1,
      "message": "Nit: 8-bit depth \u003d\u003e Bit depth 8\n\nOr \"bit_depth \u003d 8\" to use the name of the field in aom_image_t.",
      "revId": "6d2f51fe183b9c5aa454653bc646cf211523a072",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3280443b_eb6c2b7c",
        "filename": "aom/aom_image.h",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 14319
      },
      "writtenOn": "2022-05-16T18:59:39Z",
      "side": 1,
      "message": "Done (\"bit_depth \u003d 12\" does not fit)",
      "parentUuid": "a94238f4_825d6eda",
      "revId": "6d2f51fe183b9c5aa454653bc646cf211523a072",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c75f40f2_e113ccbe",
        "filename": "aom/aom_image.h",
        "patchSetId": 2
      },
      "lineNbr": 134,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-05-16T18:25:49Z",
      "side": 1,
      "message": "Please use Equations 23-25 in H.273 to calculate these values.\n\nThe maximum values of Y should be 235 * 4 and 235 * 16 for bit depths 10 and 12, respectively.\n\nNote: You can also find these values in libavif/src/reformac.c, functions avifLimitedToFullY() and avifLimitedToFullUV().",
      "revId": "6d2f51fe183b9c5aa454653bc646cf211523a072",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b94a7831_28976bd3",
        "filename": "aom/aom_image.h",
        "patchSetId": 2
      },
      "lineNbr": 134,
      "author": {
        "id": 14319
      },
      "writtenOn": "2022-05-16T18:59:39Z",
      "side": 1,
      "message": "Thanks for the references, I missed those. I was looking at AVIF_RANGE_LIMITED uses and https://wiki.multimedia.cx/index.php/YUV4MPEG2 to no avail.\n\nAlso I found it counter-intuitive to have FULL go till 1023 but LIMITED only to 940. Is there any function to change the depth? I based my reasoning on this rather than changing the range.",
      "parentUuid": "c75f40f2_e113ccbe",
      "revId": "6d2f51fe183b9c5aa454653bc646cf211523a072",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "91901774_cdcd984f",
        "filename": "aom/aom_image.h",
        "patchSetId": 2
      },
      "lineNbr": 134,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-05-16T19:56:24Z",
      "side": 1,
      "message": "\u003e Also I found it counter-intuitive to have FULL go till 1023 but LIMITED only to 940.\n\nCould you clarify why this is counter-intuitive? 940 is smaller than 1023. If the maximum of the full range is 1023, it seems reasonable to refer to a range that only goes up to 940 as limited.\n\n\u003e Is there any function to change the depth? I based my reasoning on this rather than changing the range.\n\nI am afraid that I don\u0027t understand this question. Could you clarify it?",
      "parentUuid": "b94a7831_28976bd3",
      "revId": "6d2f51fe183b9c5aa454653bc646cf211523a072",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f3f9aba_db6d6970",
        "filename": "aom/aom_image.h",
        "patchSetId": 2
      },
      "lineNbr": 134,
      "author": {
        "id": 14319
      },
      "writtenOn": "2022-05-17T09:38:49Z",
      "side": 1,
      "message": "\u003e Could you clarify why this is counter-intuitive?\n\n`FULL` goes from 8b `[0..255]` to 10b `[0\u003c\u003c2..(255\u003c\u003c2)|((1\u003c\u003c2)-1)]`\n`LIMITED` goes from 8b `[16..235]` to 10b `[16\u003c\u003c2..(235\u003c\u003c2)]`\n\n`{FULL [0..1020], LIMITED [0..940]}` or `{FULL [0..1023], LIMITED [0..943]}` would make more sense to me for 10b. Basically fill the upper bound with `|((1\u003c\u003c2)-1)` after `\u003c\u003c2` for both `FULL` and `LIMITED` or for none, but not just for one or the other.\n\nAnother way of seeing it: for 10b, if `(255\u003c\u003c2)+1` is part of `FULL`, why `(235\u003c\u003c2)+1` is not part of `LIMITED`?\n\nAnyway it is just designed as is and does not matter much.\n\n\u003e I am afraid that I don\u0027t understand this question. Could you clarify it?\n\nI wanted to take a look at the implementation of some `avifLimited8bToLimited10bY()` but I could not find it nearby `avifLimitedToFullY()`. Is there anything similar in libavif?",
      "parentUuid": "91901774_cdcd984f",
      "revId": "6d2f51fe183b9c5aa454653bc646cf211523a072",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06b08619_ff6207f2",
        "filename": "aom/aom_image.h",
        "patchSetId": 2
      },
      "lineNbr": 134,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-05-17T20:07:14Z",
      "side": 1,
      "message": "\u003e \u003e Could you clarify why this is counter-intuitive?\n\u003e \n\u003e `FULL` goes from 8b `[0..255]` to 10b `[0\u003c\u003c2..(255\u003c\u003c2)|((1\u003c\u003c2)-1)]`\n\u003e `LIMITED` goes from 8b `[16..235]` to 10b `[16\u003c\u003c2..(235\u003c\u003c2)]`\n\u003e \n\u003e `{FULL [0..1020], LIMITED [0..940]}` or `{FULL [0..1023], LIMITED [0..943]}` would make more sense to me for 10b. Basically fill the upper bound with `|((1\u003c\u003c2)-1)` after `\u003c\u003c2` for both `FULL` and `LIMITED` or for none, but not just for one or the other.\n\u003e \n\u003e Another way of seeing it: for 10b, if `(255\u003c\u003c2)+1` is part of `FULL`, why `(235\u003c\u003c2)+1` is not part of `LIMITED`?\n\u003e \n\u003e Anyway it is just designed as is and does not matter much.\n\u003e \n\u003e \u003e I am afraid that I don\u0027t understand this question. Could you clarify it?\n\u003e \n\u003e I wanted to take a look at the implementation of some `avifLimited8bToLimited10bY()` but I could not find it nearby `avifLimitedToFullY()`. Is there anything similar in libavif?\n\nffmpeg should support this. One way is via the scaler:\nhttp://ffmpeg.org/ffmpeg-scaler.html",
      "parentUuid": "0f3f9aba_db6d6970",
      "revId": "6d2f51fe183b9c5aa454653bc646cf211523a072",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32f4e8f8_11a774b0",
        "filename": "aom/aom_image.h",
        "patchSetId": 2
      },
      "lineNbr": 134,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-05-17T21:13:06Z",
      "side": 1,
      "message": "I don\u0027t know of a function that converts an 8-bit limited-range Y value to a 10-bit limited-range Y value. Looking at Equations 23-25, I think there are at least two reasonable ways to do the conversion.\n\n1. Just multiply the 8-bit limited-range Y value by 4.\n\n2. First, solve Equation 23 for E\u0027_Y with BitDepth_Y\u003d8, ignoring Clip1_Y() and Round() in the equation. Then, compute Y using Equation 23 with BitDepth_Y\u003d10.",
      "parentUuid": "06b08619_ff6207f2",
      "revId": "6d2f51fe183b9c5aa454653bc646cf211523a072",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df5c8c77_543d606d",
        "filename": "aom/aom_image.h",
        "patchSetId": 2
      },
      "lineNbr": 136,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-05-16T18:14:37Z",
      "side": 1,
      "message": "these two should be 0",
      "range": {
        "startLine": 136,
        "startChar": 42,
        "endLine": 136,
        "endChar": 45
      },
      "revId": "6d2f51fe183b9c5aa454653bc646cf211523a072",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4436e050_61aa4075",
        "filename": "aom/aom_image.h",
        "patchSetId": 2
      },
      "lineNbr": 136,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-05-16T18:25:49Z",
      "side": 1,
      "message": "Yes, for all three bit depths, the minimum value of full range is 0.",
      "parentUuid": "df5c8c77_543d606d",
      "range": {
        "startLine": 136,
        "startChar": 42,
        "endLine": 136,
        "endChar": 45
      },
      "revId": "6d2f51fe183b9c5aa454653bc646cf211523a072",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7d30d73_dc83f4f9",
        "filename": "aom/aom_image.h",
        "patchSetId": 2
      },
      "lineNbr": 136,
      "author": {
        "id": 14319
      },
      "writtenOn": "2022-05-16T18:59:39Z",
      "side": 1,
      "message": "Unsupervised copy-paste, sorry",
      "parentUuid": "4436e050_61aa4075",
      "range": {
        "startLine": 136,
        "startChar": 42,
        "endLine": 136,
        "endChar": 45
      },
      "revId": "6d2f51fe183b9c5aa454653bc646cf211523a072",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
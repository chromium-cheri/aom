{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "41d023ef_a8ff961d",
        "filename": "av1/encoder/arm/crc32/hash_crc32.c",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-06-03T07:27:14Z",
      "side": 1,
      "message": "`AOM_ARCH_AARCH64` is tested here",
      "revId": "1cb9cff82ac55e28bfffe6772cb632c5d3bcef13",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa614531_3e8b7793",
        "filename": "av1/encoder/arm/crc32/hash_crc32.c",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-06-05T17:39:52Z",
      "side": 1,
      "message": "\u003e `AOM_ARCH_AARCH64` is tested here\n\nThanks. I guess I made the assumption we were compiling with `-Wundef`.",
      "parentUuid": "41d023ef_a8ff961d",
      "revId": "1cb9cff82ac55e28bfffe6772cb632c5d3bcef13",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa6cf371_8337196c",
        "filename": "av1/encoder/arm/crc32/hash_crc32.c",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-06-05T17:41:57Z",
      "side": 1,
      "message": "\u003e \u003e `AOM_ARCH_AARCH64` is tested here\n\u003e \n\u003e Thanks. I guess I made the assumption we were compiling with `-Wundef`.\n\nWe are, but maybe there\u0027s no build config testing this.",
      "parentUuid": "fa614531_3e8b7793",
      "revId": "1cb9cff82ac55e28bfffe6772cb632c5d3bcef13",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "db988d74_43d44ca6",
        "filename": "av1/encoder/arm/crc32/hash_crc32.c",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 31042
      },
      "writtenOn": "2023-06-05T17:49:16Z",
      "side": 1,
      "message": "Hmmm, I\u0027d have thought this would show up as a warning for the Armv8.4 or Armv8.6 CI builds - CRC is mandatory since Armv8.1.",
      "parentUuid": "aa6cf371_8337196c",
      "revId": "1cb9cff82ac55e28bfffe6772cb632c5d3bcef13",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85f415e0_28320cd9",
        "filename": "av1/encoder/arm/crc32/hash_crc32.c",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-06-05T17:57:56Z",
      "side": 1,
      "message": "\u003e \u003e \u003e `AOM_ARCH_AARCH64` is tested here\n\u003e \u003e \n\u003e \u003e Thanks. I guess I made the assumption we were compiling with `-Wundef`.\n\u003e \n\u003e We are, but maybe there\u0027s no build config testing this.\n\nThe issue seems to be that `-DAOM_EXTRA_C_FLAGS\u003d-march\u003darmv8.6-a` aren\u0027t included in the test compile `-DCMAKE_C_FLAGS\u003d...` will enable the code.",
      "parentUuid": "aa6cf371_8337196c",
      "revId": "1cb9cff82ac55e28bfffe6772cb632c5d3bcef13",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0c8772a_e2c6da10",
        "filename": "av1/encoder/arm/crc32/hash_crc32.c",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-06-05T17:59:01Z",
      "side": 1,
      "message": "\u003e \u003e \u003e \u003e `AOM_ARCH_AARCH64` is tested here\n\u003e \u003e \u003e \n\u003e \u003e \u003e Thanks. I guess I made the assumption we were compiling with `-Wundef`.\n\u003e \u003e \n\u003e \u003e We are, but maybe there\u0027s no build config testing this.\n\u003e \n\u003e The issue seems to be that `-DAOM_EXTRA_C_FLAGS\u003d-march\u003darmv8.6-a` aren\u0027t included in the test compile `-DCMAKE_C_FLAGS\u003d...` will enable the code.\n\n```\ncmake /var/jenkins/workspace/libaom__compile/arch/armv8.6-linux-gcc/config/rtcd/aom -DCMAKE_BUILD_TYPE\u003dRelease -DCMAKE_TOOLCHAIN_FILE\u003d/var/jenkins/workspace/libaom__compile/arch/armv8.6-linux-gcc/config/rtcd/aom/build/cmake/toolchains/arm64-linux-gcc.cmake -DENABLE_CCACHE\u003d1 -DFORCE_HIGHBITDEPTH_DECODING\u003d0 -DCONFIG_RUNTIME_CPU_DETECT\u003d1 -DAOM_EXTRA_C_FLAGS\u003d-march\u003darmv8.6-a -DAOM_EXTRA_CXX_FLAGS\u003d-march\u003darmv8.6-a\n...\n-- Performing Test HAVE_CRC32\n-- Performing Test HAVE_CRC32 - Failed\n```",
      "parentUuid": "85f415e0_28320cd9",
      "revId": "1cb9cff82ac55e28bfffe6772cb632c5d3bcef13",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c62f63a_f9af84da",
        "filename": "av1/encoder/arm/crc32/hash_crc32.c",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-06-05T18:02:48Z",
      "side": 1,
      "message": "I found this issue when I compiled libaom on a MacBook Pro M1. It was reported by the `-Wundef` warning flag.\n\nI will upload another CL for review that include \"aom/aom_config.h\" directly in every file that tests the `AOM_ARCH_AARCH64` macro.",
      "parentUuid": "e0c8772a_e2c6da10",
      "revId": "1cb9cff82ac55e28bfffe6772cb632c5d3bcef13",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "93866df6_fbbbb9ef",
        "filename": "av1/encoder/arm/crc32/hash_crc32.c",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-06-05T18:15:34Z",
      "side": 1,
      "message": "\u003e I found this issue when I compiled libaom on a MacBook Pro M1. It was reported by the `-Wundef` warning flag.\n\u003e \n\u003e I will upload another CL for review that include \"aom/aom_config.h\" directly in every file that tests the `AOM_ARCH_AARCH64` macro.\n\nThanks, the rtcd files will include it, but it\u0027s better to include what\u0027s needed.",
      "parentUuid": "4c62f63a_f9af84da",
      "revId": "1cb9cff82ac55e28bfffe6772cb632c5d3bcef13",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f04ce6cc_2b8a8756",
        "filename": "av1/encoder/arm/crc32/hash_crc32.c",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-06-05T20:52:20Z",
      "side": 1,
      "message": "\u003e The issue seems to be that -DAOM_EXTRA_C_FLAGS\u003d-march\u003darmv8.6-a aren\u0027t included in the test compile -DCMAKE_C_FLAGS\u003d... will enable the code.\n\nThe sanitizer builds (using clang 11) already use `-DCMAKE_C_FLAGS`, but that version doesn\u0027t have support for `__ARM_FEATURE_CRC32`. I\u0027ll correct the gcc based builds; `gcc 10.2.1` has support for this feature.\n\nAs far as `check_c_source_compiles` goes, it does seem to indicate that the per-configuration flags (where `AOM_EXTRA_C_FLAGS` are stored) will be included [1] [2], but they don\u0027t seem to be when looking at the logs. Maybe I\u0027m reading the description incorrectly or we have something specific to our CMake files causing an issue.\n\n[1]: https://cmake.org/cmake/help/v3.19/policy/CMP0066.html\n[2]: https://cmake.org/cmake/help/latest/module/CheckCSourceCompiles.html?highlight\u003dcheck_c_source_compiles\n*Note that the contents of CMAKE_C_FLAGS and its associated configuration-specific variable are automatically added to the compiler command before the contents of CMAKE_REQUIRED_FLAGS.*",
      "parentUuid": "93866df6_fbbbb9ef",
      "revId": "1cb9cff82ac55e28bfffe6772cb632c5d3bcef13",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "1cb9cff82ac55e28bfffe6772cb632c5d3bcef13",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "1cb9cff82ac55e28bfffe6772cb632c5d3bcef13",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "1cb9cff82ac55e28bfffe6772cb632c5d3bcef13",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
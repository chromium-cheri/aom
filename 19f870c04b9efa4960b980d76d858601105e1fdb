{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "13ac3493_0bc1779f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 10,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-07-12T21:36:09Z",
      "side": 1,
      "message": "Optional: It would be good to file a bug for three-pass encoding and link all the related CLs to the bug.",
      "revId": "19f870c04b9efa4960b980d76d858601105e1fdb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45d949fc_56911280",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-07-12T21:36:09Z",
      "side": 1,
      "message": "Hi Bohan,\n\nI haven\u0027t reviewed the CL carefully. Please check the comments marked with \"IMPORTANT\" first. One of them is about the use of the libaom internal functions for resizing in aomenc; we should try to avoid that.",
      "revId": "19f870c04b9efa4960b980d76d858601105e1fdb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1d68d13_0dd4db18",
        "filename": "apps/aomenc.c",
        "patchSetId": 7
      },
      "lineNbr": 35,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-07-12T21:36:09Z",
      "side": 1,
      "message": "IMPORTANT: This requires a discussion. aomenc in general should only use public libaom functions, i.e., the functions declared in the public headers aom/xxx.h. The functions declared in av1/common/resize.h are internal.\n\nIt seems that there are already three exceptions (lines 32-34), but aomenc should still avoid using internal libaom functions.",
      "revId": "19f870c04b9efa4960b980d76d858601105e1fdb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "850dad12_6cc25473",
        "filename": "apps/aomenc.c",
        "patchSetId": 7
      },
      "lineNbr": 553,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-07-12T21:36:09Z",
      "side": 1,
      "message": "\"ori\" is an uncommon abbreviation of \"original\". I suggest using the full word, or abbreviating it as \"orig\" instead.",
      "range": {
        "startLine": 551,
        "startChar": 0,
        "endLine": 553,
        "endChar": 26
      },
      "revId": "19f870c04b9efa4960b980d76d858601105e1fdb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e70188ee_a1dcee14",
        "filename": "apps/aomenc.c",
        "patchSetId": 7
      },
      "lineNbr": 1923,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-07-12T21:36:09Z",
      "side": 1,
      "message": "IMPORTANT: If \u0027h\u0027 is an odd number, should we use h / 2 or (h + 1) / 2?  Or can we assume \u0027h\u0027 is an even number?",
      "revId": "19f870c04b9efa4960b980d76d858601105e1fdb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e2fca3c_63f44b31",
        "filename": "apps/aomenc.c",
        "patchSetId": 7
      },
      "lineNbr": 1938,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-07-12T21:36:09Z",
      "side": 1,
      "message": "Nit/optional: p \u003c 3 seems more common.",
      "range": {
        "startLine": 1938,
        "startChar": 20,
        "endLine": 1938,
        "endChar": 26
      },
      "revId": "19f870c04b9efa4960b980d76d858601105e1fdb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26fdaa76_0bcb7d91",
        "filename": "apps/aomenc.c",
        "patchSetId": 7
      },
      "lineNbr": 1939,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-07-12T21:36:09Z",
      "side": 1,
      "message": "IMPORTANT: This seems to assume YUV 4:2:0. But AV1 also supports YUV 4:4:4 and YUV 4:2:2.\n\nAlso, the correct way to calculate the UV plane width when UV is subsampled is (src-\u003ew + 1) / 2. The general formula is (src-\u003ew + subsampling_x) \u003e\u003e subsampling_x.",
      "revId": "19f870c04b9efa4960b980d76d858601105e1fdb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a1c6a7b_d1a25928",
        "filename": "apps/aomenc.c",
        "patchSetId": 7
      },
      "lineNbr": 1950,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-07-12T21:36:09Z",
      "side": 1,
      "message": "Nit: Use the \"orig\" abbreviation, or do not abbreviate \"original\".\n\nPlease make this change throughout the file.",
      "revId": "19f870c04b9efa4960b980d76d858601105e1fdb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ac35975_e2329a5e",
        "filename": "apps/aomenc.c",
        "patchSetId": 7
      },
      "lineNbr": 1953,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-07-12T21:36:09Z",
      "side": 1,
      "message": "Nit: Under our naming convension, these two constants should be named kPlanesYuv and kPlanesYvu.",
      "revId": "19f870c04b9efa4960b980d76d858601105e1fdb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e4118af_d9cdfbbd",
        "filename": "apps/aomenc.c",
        "patchSetId": 7
      },
      "lineNbr": 1976,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-07-12T21:36:09Z",
      "side": 1,
      "message": "Can ori_input.width be an odd number? If ori_input.width can be odd, should we use (ori_input.width + 1) / 2 instead?",
      "revId": "19f870c04b9efa4960b980d76d858601105e1fdb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a4dfffe_4acb38b0",
        "filename": "apps/aomenc.c",
        "patchSetId": 7
      },
      "lineNbr": 1979,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-07-12T21:36:09Z",
      "side": 1,
      "message": "Please check for aom_img_alloc() failures.",
      "revId": "19f870c04b9efa4960b980d76d858601105e1fdb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c986936c_3ef8ddf5",
        "filename": "apps/aomenc.c",
        "patchSetId": 7
      },
      "lineNbr": 2130,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-07-12T21:36:09Z",
      "side": 1,
      "message": "Nit: Add \u0027*\u0027 before this line, so that the comment block looks like:\n\n    /* Set the output to the specified two-pass output file, and\n     * set the width and height to the proper values. */\n\nOr use the new // comment:\n\n    // Set the output to the specified two-pass output file, and\n    // set the width and height to the proper values.",
      "revId": "19f870c04b9efa4960b980d76d858601105e1fdb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13a68f36_c785a259",
        "filename": "apps/aomenc.c",
        "patchSetId": 7
      },
      "lineNbr": 2132,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-07-12T21:36:09Z",
      "side": 1,
      "message": "This conditional expression is used four times in this function. It would be good to document what this conditional expression means here (the first time it\u0027s used). Also, we can save the value of this conditional expression in a local variable.",
      "revId": "19f870c04b9efa4960b980d76d858601105e1fdb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62bec413_ef08cd39",
        "filename": "av1/arg_defs.h",
        "patchSetId": 7
      },
      "lineNbr": 223,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-07-12T21:36:09Z",
      "side": 1,
      "message": "Nit: I suggest shortening these two members to \"two_pass_input\" and \"two_pass_output\" to match their command-line option names exactly. (Alternatively, change the command-line option names to \"two-pass-input-file\" and \"\"two-pass-output-file\".)",
      "range": {
        "startLine": 222,
        "startChar": 0,
        "endLine": 223,
        "endChar": 33
      },
      "revId": "19f870c04b9efa4960b980d76d858601105e1fdb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "180b4f62_1f1c4e8d",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 7
      },
      "lineNbr": 168,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-07-12T21:36:09Z",
      "side": 1,
      "message": "Optional: Please document this new struct member. I marked this as optional because many other struct members are also not documented. I assume that\u0027s because they correspond to a documented member of some other struct.",
      "revId": "19f870c04b9efa4960b980d76d858601105e1fdb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b212e91_52ea3673",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 7
      },
      "lineNbr": 1125,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-07-12T21:36:09Z",
      "side": 1,
      "message": "IMPORTANT: This assumes that the extra_cfg-\u003etwo_pass_output string stays valid as long as oxcf-\u003etwo_pass_output is used. If we cannot guarantee that, we should make a copy of the extra_cfg-\u003etwo_pass_output string.",
      "revId": "19f870c04b9efa4960b980d76d858601105e1fdb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c379ee6b_f37cf23b",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 7
      },
      "lineNbr": 3609,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-07-12T21:36:09Z",
      "side": 1,
      "message": "IMPORTANT: This assumes that the \u0027value\u0027 parameter stays valid after the aom_codec_set_option() returns. This is an unusual requirement.\n\nIt would be more user-friendly to make a copy of the \u0027value\u0027 parameter.",
      "revId": "19f870c04b9efa4960b980d76d858601105e1fdb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64150184_a28d264c",
        "filename": "av1/encoder/encoder.h",
        "patchSetId": 7
      },
      "lineNbr": 997,
      "author": {
        "id": 9545
      },
      "writtenOn": "2021-07-12T21:36:09Z",
      "side": 1,
      "message": "Please document this new struct member.",
      "revId": "19f870c04b9efa4960b980d76d858601105e1fdb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
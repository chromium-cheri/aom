{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8b5ec4a1_bce8e4de",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 30017
      },
      "writtenOn": "2022-04-19T13:11:19Z",
      "side": 1,
      "message": "Hi Yunqing,\n\nIn this CL, we have created a wrapper function ‘cdef_find_dir_dual_neon()’ to find CDEF direction for two 8x8 blocks for NEON. This patch also enables unit test support for the same.\n\nWe ensured bit match output for both 32 bit and 64 bit ARM builds.\n\nPlease review the patch.\n\nThanks \u0026 Regards, \nArun\n",
      "revId": "adf087b3a8e0dfd656b632adef331290c6977443",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab1dd0fe_eaec4ff2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5185
      },
      "writtenOn": "2022-04-19T20:41:34Z",
      "side": 1,
      "message": "Could you update with the speed test result? Thanks.",
      "parentUuid": "8b5ec4a1_bce8e4de",
      "revId": "adf087b3a8e0dfd656b632adef331290c6977443",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b642a5c8_fe2da992",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 30017
      },
      "writtenOn": "2022-04-20T13:16:27Z",
      "side": 1,
      "message": "Hi Yunqing,\n\nThe module level speed gain for ARM 64 bit platform is around 1.1x scaling w.r.t. C which is similar to the earlier  cdef_find_dir_neon() implementation.\n\nThanks \u0026 Regards, \nArun",
      "parentUuid": "ab1dd0fe_eaec4ff2",
      "revId": "adf087b3a8e0dfd656b632adef331290c6977443",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc0e0f2a_795cf93b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5185
      },
      "writtenOn": "2022-04-20T15:55:32Z",
      "side": 1,
      "message": "Thanks for getting the scaling factor. Do you know why the number (1.1x) is that low?",
      "parentUuid": "b642a5c8_fe2da992",
      "revId": "adf087b3a8e0dfd656b632adef331290c6977443",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49c47e58_ebf58323",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 30017
      },
      "writtenOn": "2022-04-21T14:05:28Z",
      "side": 1,
      "message": "Hi Yunqing,\n\nSorry for the confusion. In the previous reply, we swapped the module level speed gains of cdef and hadamard transform NEON intrinsics. Please check the correct numbers below.    \n-\u003e cdef_find_dir_dual  -   1.4x    \n-\u003e aom_hadamard_8x8_dual  -  1.1x\n\nWe also analysed the disassembly of aom_hadamard_8x8_dual_c. We could observe that the compiler is generating vector instructions for C code. This could be the reason for poor scaling w.r.t C code. For this function we noticed a similar scaling number for SSE2 intrinsics as well. \n\nPlease let us know your thoughts on the above.\n\nThank you.",
      "parentUuid": "cc0e0f2a_795cf93b",
      "revId": "adf087b3a8e0dfd656b632adef331290c6977443",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "adf087b3a8e0dfd656b632adef331290c6977443",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "adf087b3a8e0dfd656b632adef331290c6977443",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "adf087b3a8e0dfd656b632adef331290c6977443",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
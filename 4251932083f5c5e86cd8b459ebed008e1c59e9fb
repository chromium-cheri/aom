{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e6a34d6a_ca2a19be",
        "filename": "av1/encoder/encoder.h",
        "patchSetId": 2
      },
      "lineNbr": 3131,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-05-31T22:21:30Z",
      "side": 1,
      "message": "Note that this CL is optional. In libaom, `cpi-\u003ebytes` is used to accumulate the frame bytes of a single `aom_codec_encode()` call, so `int` should be large enough.\n\nI think this change is good for consistency, but I am also quite willing to abandon this CL.",
      "revId": "4251932083f5c5e86cd8b459ebed008e1c59e9fb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2093884_84e2070d",
        "filename": "av1/encoder/encoder.h",
        "patchSetId": 2
      },
      "lineNbr": 3131,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-06-01T01:42:34Z",
      "side": 1,
      "message": "\u003e Note that this CL is optional. In libaom, `cpi-\u003ebytes` is used to accumulate the frame bytes of a single `aom_codec_encode()` call, so `int` should be large enough.\n\u003e \n\u003e I think this change is good for consistency, but I am also quite willing to abandon this CL.\n\nI\u0027m leaning somewhat to keeping the field right sized. There\u0027s also some potential implications optimization wise as with a signed value the compiler can make assumptions about overflow. I haven\u0027t looked at the disassembly here though.",
      "parentUuid": "e6a34d6a_ca2a19be",
      "revId": "4251932083f5c5e86cd8b459ebed008e1c59e9fb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41189926_6a8e8289",
        "filename": "av1/encoder/encoder.h",
        "patchSetId": 2
      },
      "lineNbr": 3131,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-06-05T17:53:57Z",
      "side": 1,
      "message": "Thanks for taking a look. Another option is to declare this field as a `size_t`. This field is used to accumulate the frame sizes from all the `av1_get_compressed_data()` calls made during an `encoder_encode()` call. The frame size (`cpi_data-\u003eframe_size`) is a `size_t`. So declaring this as a `size_t` will avoid the `int` cast at av1/encoder/encoder.c:4683.",
      "parentUuid": "e2093884_84e2070d",
      "revId": "4251932083f5c5e86cd8b459ebed008e1c59e9fb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e17b43f_abcc0741",
        "filename": "av1/encoder/encoder.h",
        "patchSetId": 2
      },
      "lineNbr": 3131,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-06-05T18:13:51Z",
      "side": 1,
      "message": "\u003e Thanks for taking a look. Another option is to declare this field as a `size_t`. This field is used to accumulate the frame sizes from all the `av1_get_compressed_data()` calls made during an `encoder_encode()` call. The frame size (`cpi_data-\u003eframe_size`) is a `size_t`. So declaring this as a `size_t` will avoid the `int` cast at av1/encoder/encoder.c:4683.\n\n`size_t` is unsigned as well so presents the same potential issue.",
      "parentUuid": "41189926_6a8e8289",
      "revId": "4251932083f5c5e86cd8b459ebed008e1c59e9fb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
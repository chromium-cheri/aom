{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f6a8b0ab_cd4b1fd9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-01-25T20:13:08Z",
      "side": 1,
      "message": "Silence\n\nAlso, what was the warning and what version of Xcode?",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 7
      },
      "revId": "7cdbf2fa354c30da4a729670e04f5bef86c03f77",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "351c45b7_d7ee228c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 5022
      },
      "writtenOn": "2022-01-26T03:08:02Z",
      "side": 1,
      "message": "The warning says instead of using {}, use ().",
      "parentUuid": "f6a8b0ab_cd4b1fd9",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 7
      },
      "revId": "7cdbf2fa354c30da4a729670e04f5bef86c03f77",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d49f533_10ff7d39",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-01-30T17:01:37Z",
      "side": 1,
      "message": "Out of curiosity, I just built libaom at a803dcb2ca8c8c7ea2a02f3ef9154782dd2d070f, the revision before James\u0027s fix in https://aomedia-review.googlesource.com/c/aom/+/152842. I used the following two commands:\n  \n  $ cmake ../aom -G Ninja\n  $ ninja\n\nI did not get any compiler warnings. This matched my expectations, because uint64_t{...} is a correct way to convert ... to uint64_t in C++11.\n\nMy Xcode version is 13.2.1. \"c++ --version\" reports \"Apple clang version 13.0.0 (clang-1300.0.29.30)\". \"cmake ../aom\" reports:\n\n-- The C compiler identification is AppleClang 13.0.0.13000029\n-- The CXX compiler identification is AppleClang 13.0.0.13000029",
      "parentUuid": "351c45b7_d7ee228c",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 7
      },
      "revId": "7cdbf2fa354c30da4a729670e04f5bef86c03f77",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6cd875b_12cc06bf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-01-31T18:50:42Z",
      "side": 1,
      "message": "\u003e Out of curiosity, I just built libaom at a803dcb2ca8c8c7ea2a02f3ef9154782dd2d070f, the revision before James\u0027s fix in https://aomedia-review.googlesource.com/c/aom/+/152842. I used the following two commands:\n\u003e   \n\u003e   $ cmake ../aom -G Ninja\n\u003e   $ ninja\n\u003e \n\u003e I did not get any compiler warnings. This matched my expectations, because uint64_t{...} is a correct way to convert ... to uint64_t in C++11.\n\u003e \n\u003e My Xcode version is 13.2.1. \"c++ --version\" reports \"Apple clang version 13.0.0 (clang-1300.0.29.30)\". \"cmake ../aom\" reports:\n\u003e \n\u003e -- The C compiler identification is AppleClang 13.0.0.13000029\n\u003e -- The CXX compiler identification is AppleClang 13.0.0.13000029\n\nThanks for trying this, I had the same opinion and experience with various 13.x versions as well as Apple clang version 12.0.5 (clang-1205.0.22.9).",
      "parentUuid": "6d49f533_10ff7d39",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 7
      },
      "revId": "7cdbf2fa354c30da4a729670e04f5bef86c03f77",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e66f3e1f_0591d0ac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-01-25T19:54:02Z",
      "side": 1,
      "message": "Jingning: I suggest a better fix.",
      "revId": "7cdbf2fa354c30da4a729670e04f5bef86c03f77",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0da7d2e_17cd039b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-01-25T20:10:37Z",
      "side": 1,
      "message": "This change should be pushed to the libwebm repo, then we can update the snapshot here and in libvpx.",
      "revId": "7cdbf2fa354c30da4a729670e04f5bef86c03f77",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c01eb277_d77fd955",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5022
      },
      "writtenOn": "2022-01-26T03:08:02Z",
      "side": 1,
      "message": "Sounds good. I saw James had a revert on a previous CL related to this. I will drop this CL.",
      "parentUuid": "e66f3e1f_0591d0ac",
      "revId": "7cdbf2fa354c30da4a729670e04f5bef86c03f77",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b065b3c_c5d6ed86",
        "filename": "third_party/libwebm/mkvmuxer/mkvmuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 2625,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-01-25T19:54:02Z",
      "side": 1,
      "message": "Nit: we should cast to uint64 instead of uint64_t, because the first parameter of EbmlMasterElementSize() is of the uint64 type. (See my next comment.)",
      "range": {
        "startLine": 2625,
        "startChar": 40,
        "endLine": 2625,
        "endChar": 48
      },
      "revId": "7cdbf2fa354c30da4a729670e04f5bef86c03f77",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7851418f_d741364a",
        "filename": "third_party/libwebm/mkvmuxer/mkvmuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 2626,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-01-25T19:54:02Z",
      "side": 1,
      "message": "I suggest changing uint64_t(0xFFFFFFFFFFFFFFFFU) to 0xFFFFFFFFFFFFFFFFULL.\n\nHere is my reasoning:\n\nEbmlMasterElementSize() is declared to take two uint64 parameters:\n\n    uint64 EbmlMasterElementSize(uint64 type, uint64 value);\n    \nand uint64 is a typedef for \u0027unsigned long long\u0027:\n\n    typedef unsigned long long uint64;\n    \nSo our goal here is to create a constant of the \u0027unsigned long long\u0027 type. We can simply append the \u0027ULL\u0027 suffix to the constant 0xFFFFFFFFFFFFFFFF.\n\nNote: If I count the number of \u0027F\u0027s correctly, 0xFFFFFFFFFFFFFFFF is the maximum value of unsigned long long, so we can also just use the ULLONG_MAX macro.",
      "revId": "7cdbf2fa354c30da4a729670e04f5bef86c03f77",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
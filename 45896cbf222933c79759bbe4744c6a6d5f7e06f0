{
  "comments": [
    {
      "key": {
        "uuid": "f18aa060_c5d00c7e",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 7
      },
      "lineNbr": 678,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-06-23T21:32:08Z",
      "side": 1,
      "message": "If you make e of type int16_t *, then you can save a copy in the normal case.",
      "revId": "45896cbf222933c79759bbe4744c6a6d5f7e06f0",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "91d3c083_7529fcab",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 7
      },
      "lineNbr": 678,
      "author": {
        "id": 5035
      },
      "writtenOn": "2017-06-25T10:04:15Z",
      "side": 1,
      "message": "I wrote the new funuction which does not do copying but found that it causes the bug, becuase e now has different stride than x. Also, if invisible pixels are included in the area then av1_daala_dist_diff() has to use local buffer which again have different stride than diff signal. So, I think I cannot respond to this comment.",
      "parentUuid": "f18aa060_c5d00c7e",
      "revId": "45896cbf222933c79759bbe4744c6a6d5f7e06f0",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11f30194_ad79dcbc",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 7
      },
      "lineNbr": 678,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-06-26T18:19:19Z",
      "side": 1,
      "message": "You can always pass an extra stride (registers are not so scarce on x86-64 these days), but it was just a suggestion. I don\u0027t think we can call this code so well-optimized that saving a buffer copy at this point would have a big impact.",
      "parentUuid": "91d3c083_7529fcab",
      "revId": "45896cbf222933c79759bbe4744c6a6d5f7e06f0",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34fa2c0f_ac41a3ef",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 7
      },
      "lineNbr": 703,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-06-23T21:32:08Z",
      "side": 1,
      "message": "Everything from this point on is identical to od_compute_dist(), right? I would greatly prefer to see it factored into a common function instead of copied and pasted.",
      "revId": "45896cbf222933c79759bbe4744c6a6d5f7e06f0",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d377ce6f_728e076a",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 7
      },
      "lineNbr": 703,
      "author": {
        "id": 5035
      },
      "writtenOn": "2017-06-25T10:04:15Z",
      "side": 1,
      "message": "I just found that responding above comment (i.e. use 16 bit for e to avoid copying) makes the types of e in two functions, od_compute_dist() and od_compute_dist_diff(), diffrent, which makes the scope of factoring out reduced (i.e. code which uses e is not factored out).",
      "parentUuid": "34fa2c0f_ac41a3ef",
      "revId": "45896cbf222933c79759bbe4744c6a6d5f7e06f0",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "906bc44d_cb17f7a4",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 7
      },
      "lineNbr": 703,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-06-26T18:19:19Z",
      "side": 1,
      "message": "Well, you could have mad e in od_compute_dist() 16-bit. Only e_lp needs 32-bit precision as-is. But as I said, not a big deal.",
      "parentUuid": "d377ce6f_728e076a",
      "revId": "45896cbf222933c79759bbe4744c6a6d5f7e06f0",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e6200531_d7933aa9",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 7
      },
      "lineNbr": 1453,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-06-23T21:32:08Z",
      "side": 1,
      "message": "Maybe it is a good idea to rename this function and fix the comment above.",
      "revId": "45896cbf222933c79759bbe4744c6a6d5f7e06f0",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "943018d9_82c8f49b",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 7
      },
      "lineNbr": 1453,
      "author": {
        "id": 5035
      },
      "writtenOn": "2017-06-25T10:04:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e6200531_d7933aa9",
      "revId": "45896cbf222933c79759bbe4744c6a6d5f7e06f0",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "83b28139_9d530ebf",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 7
      },
      "lineNbr": 1455,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-06-23T21:32:08Z",
      "side": 1,
      "message": "I think it may be easier if you make this function just always take a const MACROBLOCK *x. You can access xd via \u0026x-\u003ee_mbd (i.e., at a constant offset relative to x, so it\u0027s basically free in machine code). That makes the xd parameter redundant.\n\nThe normal parameter order for most functions is cpi, then x, however.",
      "revId": "45896cbf222933c79759bbe4744c6a6d5f7e06f0",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4beb182_e67d80ed",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 7
      },
      "lineNbr": 1455,
      "author": {
        "id": 5035
      },
      "writtenOn": "2017-06-25T10:04:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "83b28139_9d530ebf",
      "revId": "45896cbf222933c79759bbe4744c6a6d5f7e06f0",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b505a86_6645a236",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 7
      },
      "lineNbr": 1504,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-06-23T21:32:08Z",
      "side": 1,
      "message": "Maybe it is a good idea to rename this function and fix the comment above.",
      "revId": "45896cbf222933c79759bbe4744c6a6d5f7e06f0",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0c4690b_8dcc190f",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 7
      },
      "lineNbr": 1504,
      "author": {
        "id": 5035
      },
      "writtenOn": "2017-06-25T10:04:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1b505a86_6645a236",
      "revId": "45896cbf222933c79759bbe4744c6a6d5f7e06f0",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "336ecec9_9c3b3c39",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 7
      },
      "lineNbr": 1506,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-06-23T21:32:08Z",
      "side": 1,
      "message": "Same here. Just always take x, and get rid of xd as a parameter.",
      "revId": "45896cbf222933c79759bbe4744c6a6d5f7e06f0",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be01faad_5f6b7864",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 7
      },
      "lineNbr": 1506,
      "author": {
        "id": 5035
      },
      "writtenOn": "2017-06-25T10:04:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "336ecec9_9c3b3c39",
      "revId": "45896cbf222933c79759bbe4744c6a6d5f7e06f0",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    }
  ]
}
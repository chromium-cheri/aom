{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "20f5332e_55f588ba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 9611
      },
      "writtenOn": "2020-10-20T16:51:08Z",
      "side": 1,
      "message": "Hi Yunqing,\n\nIn this patch, we introduced a logic to prune NEWMV inter modes in speed 0. As per our understanding, rdmult-\u003e0 at high bit-rates/lower quantizes and all the relevant NEWMV modes tend to converge to same MV. Hence it might be okay to evaluate fewer ref_mv_idx values at higher bit-rates. Hence, the pruning is made dependent on QIndex. We tried improving the logic further based on neighboring block information and found that there was no improvement in trade-off. \nThe current patch has pruning logic based on QIndex as below (aggressive at lower QIndex and vice versa)\n  -\u003e For q index range between 0 and 85: prune if ref_mv_idx \u003e\u003d 1.\n  -\u003e For q index range between 86 and 170: prune if ref_mv_idx \u003d\u003d 2.\n  -\u003e For q index range between 171 and 255: no pruning.\n\nThe change is a bit exact for speed presets 1 to 6 with no speed impact (verified locally).\n\n                     Instruction Count      BD-Rate Loss(%)\ncpu-used  Resolution   Reduction(%)   avg.psnr  ovr.psnr   ssim   \n   0      LOW RES        4.478        0.0201    0.0140     0.0140\n   0      MID RES        2.325        0.0134    0.0068     0.0102\n   0      HD RES         2.855        0.0227    0.0255     0.0260\n   0      Average        3.541        0.0190    0.0154     0.0166\n\nIn the commit message, Quality Loss column:\n[+] sign is for BD-Rate drop\n[-] sign is for BD-Rate improvement\nThe instruction count reduction specified has been measured using command:\n$ perf stat -e instructions:u ./aomenc …\n\nPlease merge the patch in case of no issues.\n\nThanks \u0026 regards,\nVenkata.",
      "revId": "d0daf62f7ab7a2c3d346e4c4d79fa3c2a8997f51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e85d648_986ee631",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 3
      },
      "lineNbr": 1821,
      "author": {
        "id": 5185
      },
      "writtenOn": "2020-10-20T21:44:19Z",
      "side": 1,
      "message": "To be safe, also add \"if (reduce_inter_modes \u003c\u003d 0) return 0;\" ?",
      "range": {
        "startLine": 1821,
        "startChar": 2,
        "endLine": 1821,
        "endChar": 40
      },
      "revId": "d0daf62f7ab7a2c3d346e4c4d79fa3c2a8997f51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45a8463f_d12f1463",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 3
      },
      "lineNbr": 1821,
      "author": {
        "id": 9611
      },
      "writtenOn": "2020-10-21T12:30:38Z",
      "side": 1,
      "message": "In this patch, prune_ref_mv_idx_using_qindex() is called only for reduce_inter_modes \u003e\u003d 2 which is checked outside, before calling this function. However, the Q-index based logic is applicable only when reduce_inter_modes \u003d 2. Hence we added an assert accordingly. In future, if we want to extend this logic to reduce_inter_modes \u003c 2, we can remove the assert and call the function accordingly.",
      "parentUuid": "4e85d648_986ee631",
      "range": {
        "startLine": 1821,
        "startChar": 2,
        "endLine": 1821,
        "endChar": 40
      },
      "revId": "d0daf62f7ab7a2c3d346e4c4d79fa3c2a8997f51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c04391c8_080e929b",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 3
      },
      "lineNbr": 1821,
      "author": {
        "id": 5185
      },
      "writtenOn": "2020-10-21T17:49:14Z",
      "side": 1,
      "message": "ok.",
      "parentUuid": "45a8463f_d12f1463",
      "range": {
        "startLine": 1821,
        "startChar": 2,
        "endLine": 1821,
        "endChar": 40
      },
      "revId": "d0daf62f7ab7a2c3d346e4c4d79fa3c2a8997f51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "348ed820_da51052b",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 3
      },
      "lineNbr": 1861,
      "author": {
        "id": 5185
      },
      "writtenOn": "2020-10-20T21:44:19Z",
      "side": 1,
      "message": "Not sure I understand the logic here - would \"\u0026\u0026\" end up with less pruning than original code?",
      "range": {
        "startLine": 1861,
        "startChar": 21,
        "endLine": 1861,
        "endChar": 23
      },
      "revId": "d0daf62f7ab7a2c3d346e4c4d79fa3c2a8997f51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5435a49_f45e9f6c",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 3
      },
      "lineNbr": 1861,
      "author": {
        "id": 9611
      },
      "writtenOn": "2020-10-21T12:30:38Z",
      "side": 1,
      "message": "The speed feature “reduce_inter_modes “ value is set as below \nBefore this optimization (in parent version):\nspeed 0 :       reduce_inter_modes \u003d 1;\nspeed \u003e\u003d 1 :  reduce_inter_modes \u003d boosted ? 1 : 2;\nAfter this optimization (in the current patch):\nspeed 0 :       reduce_inter_modes \u003d boosted ? 1 : 2;\nspeed \u003e\u003d 1 :  reduce_inter_modes \u003d boosted ? 1 : 3;\n\nFor speed \u003e\u003d 1, the behavior will be same as parent version\n     •\tFor boosted frames, this piece of code is not called\n     •\tFor non-boosted frames, the current sf value of 3 is equivalent to sf value of 2 (in parent version). As do_prune flag is set to 1 in this case, behavior for speed \u003e\u003d1 is same as before. \n\nFor speed \u003d 0, \n     •\tFor boosted frames, this piece of code is not called\n     •\tFor non-boosted frames, pruning of NEWMV modes is introduced in this patch by skipping particular ref_mv_idx based on q-index (which was absent in parent version) and the same corresponds to sf\u003d2.",
      "parentUuid": "348ed820_da51052b",
      "range": {
        "startLine": 1861,
        "startChar": 21,
        "endLine": 1861,
        "endChar": 23
      },
      "revId": "d0daf62f7ab7a2c3d346e4c4d79fa3c2a8997f51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4225460f_4a673887",
        "filename": "av1/encoder/rdopt.c",
        "patchSetId": 3
      },
      "lineNbr": 1861,
      "author": {
        "id": 5185
      },
      "writtenOn": "2020-10-21T17:49:14Z",
      "side": 1,
      "message": "ok. So, at speed 0, this is now called for non-boosted frames to have pruning. Thanks for explaining.",
      "parentUuid": "d5435a49_f45e9f6c",
      "range": {
        "startLine": 1861,
        "startChar": 21,
        "endLine": 1861,
        "endChar": 23
      },
      "revId": "d0daf62f7ab7a2c3d346e4c4d79fa3c2a8997f51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
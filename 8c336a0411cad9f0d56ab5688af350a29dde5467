{
  "comments": [
    {
      "key": {
        "uuid": "5e0d009b_f670da0b",
        "filename": "build/cmake/util.cmake",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 5435
      },
      "writtenOn": "2018-04-27T18:46:58Z",
      "side": 1,
      "message": "This isn\u0027t quite ideal. I could pad out the first string to get it on it\u0027s own line or just ignore it.\n\nDO NOT EDIT! NO REALLY IT IS A BAD IDEA JUST PUT THE EDITOR DOWN SLOWLY IS THIS 80 CHARACTERS YET",
      "range": {
        "startLine": 23,
        "startChar": 29,
        "endLine": 23,
        "endChar": 64
      },
      "revId": "8c336a0411cad9f0d56ab5688af350a29dde5467",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "776c8566_d1a8efe2",
        "filename": "test/test.cmake",
        "patchSetId": 1
      },
      "lineNbr": 441,
      "author": {
        "id": 5435
      },
      "writtenOn": "2018-04-27T18:46:58Z",
      "side": 1,
      "message": "yeah ...",
      "range": {
        "startLine": 441,
        "startChar": 2,
        "endLine": 441,
        "endChar": 9
      },
      "revId": "8c336a0411cad9f0d56ab5688af350a29dde5467",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6feb08a5_e4b0584a",
        "filename": "test/test.cmake",
        "patchSetId": 1
      },
      "lineNbr": 441,
      "author": {
        "id": 5435
      },
      "writtenOn": "2018-04-27T18:54:44Z",
      "side": 1,
      "message": "running the number up high enough to concatenate this is worse:\n+    if(( \"${var}\" MATCHES \"_TEST_\" AND NOT \"${var}\" MATCHES\n+       \"_DATA_\\|_CMAKE_\\|INTRA_PRED\\|_COMPILED\\|_HOSTING\\|_PERF_\\|CODER_\" ) OR\n+       ( CONFIG_AV1_ENCODER AND CONFIG_ENCODE_PERF_TESTS AND \"${var}\" MATCHES\n+       \"_ENCODE_PERF_TEST_\" ) OR ( CONFIG_AV1_DECODER AND\n+       CONFIG_DECODE_PERF_TESTS AND \"${var}\" MATCHES \"_DECODE_PERF_TEST_\" ) OR\n+       ( CONFIG_AV1_ENCODER AND \"${var}\" MATCHES \"_TEST_ENCODER_\" ) OR (\n+       CONFIG_AV1_DECODER AND \"${var}\" MATCHES \"_TEST_DECODER_\" ))",
      "parentUuid": "776c8566_d1a8efe2",
      "range": {
        "startLine": 441,
        "startChar": 2,
        "endLine": 441,
        "endChar": 9
      },
      "revId": "8c336a0411cad9f0d56ab5688af350a29dde5467",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d42c5633_5ff0c228",
        "filename": "test/test.cmake",
        "patchSetId": 1
      },
      "lineNbr": 441,
      "author": {
        "id": 5215
      },
      "writtenOn": "2018-04-27T23:22:00Z",
      "side": 1,
      "message": "Is there a cmake_format off like w/clang format? This seems like a good spot to use it.",
      "parentUuid": "6feb08a5_e4b0584a",
      "range": {
        "startLine": 441,
        "startChar": 2,
        "endLine": 441,
        "endChar": 9
      },
      "revId": "8c336a0411cad9f0d56ab5688af350a29dde5467",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f859fa99_acd03752",
        "filename": "test/test_data_download_worker.cmake",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 5435
      },
      "writtenOn": "2018-04-27T18:46:58Z",
      "side": 1,
      "message": "Still crying",
      "range": {
        "startLine": 13,
        "startChar": 3,
        "endLine": 13,
        "endChar": 6
      },
      "revId": "8c336a0411cad9f0d56ab5688af350a29dde5467",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    }
  ]
}
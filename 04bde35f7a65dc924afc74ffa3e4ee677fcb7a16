{
  "comments": [
    {
      "key": {
        "uuid": "ef5edd98_85e027ec",
        "filename": "obudec.c",
        "patchSetId": 16
      },
      "lineNbr": 101,
      "author": {
        "id": 9545
      },
      "writtenOn": "2018-05-02T22:48:38Z",
      "side": 1,
      "message": "This is a pre-existing issue: This comment does not match the code. The code (line 111) increments bytes_read by the actual bytes read.\n\nobudec_read_obu_payload has two callers. One callers depends on the increment. So it\u0027s easier to update the comment.",
      "range": {
        "startLine": 100,
        "startChar": 70,
        "endLine": 101,
        "endChar": 38
      },
      "revId": "04bde35f7a65dc924afc74ffa3e4ee677fcb7a16",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c07d0d40_b32285d2",
        "filename": "obudec.c",
        "patchSetId": 16
      },
      "lineNbr": 137,
      "author": {
        "id": 5215
      },
      "writtenOn": "2018-05-02T22:08:15Z",
      "side": 1,
      "message": "Maybe I should use SIZE_MAX here and in the other checks? Seems like using UINT32_MAX will yield consistent behavior between x86 and x86_64, so imo this might be better. Thoughts?",
      "range": {
        "startLine": 137,
        "startChar": 19,
        "endLine": 137,
        "endChar": 29
      },
      "revId": "04bde35f7a65dc924afc74ffa3e4ee677fcb7a16",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffc484ab_a32d3bf5",
        "filename": "obudec.c",
        "patchSetId": 16
      },
      "lineNbr": 137,
      "author": {
        "id": 5020
      },
      "writtenOn": "2018-05-02T22:39:58Z",
      "side": 1,
      "message": "\u003e Maybe I should use SIZE_MAX here and in the other checks? Seems like using UINT32_MAX will yield consistent behavior between x86 and x86_64, so imo this might be better. Thoughts?\n\nYou could keep this small for now until a case where something larger was identified. Maybe add a comment noting this was intentional.",
      "parentUuid": "c07d0d40_b32285d2",
      "range": {
        "startLine": 137,
        "startChar": 19,
        "endLine": 137,
        "endChar": 29
      },
      "revId": "04bde35f7a65dc924afc74ffa3e4ee677fcb7a16",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef5702ba_ca39cce9",
        "filename": "obudec.c",
        "patchSetId": 16
      },
      "lineNbr": 137,
      "author": {
        "id": 9545
      },
      "writtenOn": "2018-05-02T22:48:38Z",
      "side": 1,
      "message": "I noticed this issue, too. I would use SIZE_MAX, but I can see the value of consistent behavior between 64-bit and 32-bit platforms.",
      "parentUuid": "c07d0d40_b32285d2",
      "range": {
        "startLine": 137,
        "startChar": 19,
        "endLine": 137,
        "endChar": 29
      },
      "revId": "04bde35f7a65dc924afc74ffa3e4ee677fcb7a16",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "150fcaf5_02ddd14c",
        "filename": "obudec.c",
        "patchSetId": 16
      },
      "lineNbr": 158,
      "author": {
        "id": 9545
      },
      "writtenOn": "2018-05-02T22:48:38Z",
      "side": 1,
      "message": "The size_t cast is not necessary.",
      "range": {
        "startLine": 158,
        "startChar": 22,
        "endLine": 158,
        "endChar": 30
      },
      "revId": "04bde35f7a65dc924afc74ffa3e4ee677fcb7a16",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2da7841a_406d2249",
        "filename": "obudec.c",
        "patchSetId": 16
      },
      "lineNbr": 204,
      "author": {
        "id": 9545
      },
      "writtenOn": "2018-05-02T22:48:38Z",
      "side": 1,
      "message": "This is a pre-existing issue: We should detect integer overflow here, similar to the check at line 193 to protect the addition bytes_read + obu_payload_length at line 202.\n\nYou can add a TODO comment to deal with this later.",
      "range": {
        "startLine": 204,
        "startChar": 8,
        "endLine": 204,
        "endChar": 64
      },
      "revId": "04bde35f7a65dc924afc74ffa3e4ee677fcb7a16",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8dbed23f_3fbe507f",
        "filename": "obudec.c",
        "patchSetId": 16
      },
      "lineNbr": 309,
      "author": {
        "id": 9545
      },
      "writtenOn": "2018-05-02T22:48:38Z",
      "side": 1,
      "message": "The size_t casts in front of bytes_read can all be deleted now.",
      "range": {
        "startLine": 309,
        "startChar": 42,
        "endLine": 309,
        "endChar": 50
      },
      "revId": "04bde35f7a65dc924afc74ffa3e4ee677fcb7a16",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c31f89d1_474e9983",
        "filename": "obudec.c",
        "patchSetId": 16
      },
      "lineNbr": 366,
      "author": {
        "id": 9545
      },
      "writtenOn": "2018-05-02T22:48:38Z",
      "side": 1,
      "message": "Nit: we can delete the bytes_consumed local variable and just pass \u0026length_of_temporal_unit_size here. Then, delete line 370.",
      "range": {
        "startLine": 366,
        "startChar": 26,
        "endLine": 366,
        "endChar": 41
      },
      "revId": "04bde35f7a65dc924afc74ffa3e4ee677fcb7a16",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22e639ac_597b8682",
        "filename": "obudec.c",
        "patchSetId": 16
      },
      "lineNbr": 375,
      "author": {
        "id": 5020
      },
      "writtenOn": "2018-05-02T22:39:58Z",
      "side": 1,
      "message": "safest would be to check this before applying the length",
      "range": {
        "startLine": 375,
        "startChar": 8,
        "endLine": 375,
        "endChar": 25
      },
      "revId": "04bde35f7a65dc924afc74ffa3e4ee677fcb7a16",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46d20e36_d9bda8d4",
        "filename": "obudec.c",
        "patchSetId": 16
      },
      "lineNbr": 410,
      "author": {
        "id": 9545
      },
      "writtenOn": "2018-05-02T22:48:38Z",
      "side": 1,
      "message": "The size_t casts in front of tu_size and obu_size can all be deleted.",
      "range": {
        "startLine": 410,
        "startChar": 52,
        "endLine": 410,
        "endChar": 60
      },
      "revId": "04bde35f7a65dc924afc74ffa3e4ee677fcb7a16",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c64d5f0_fb533b48",
        "filename": "obudec.c",
        "patchSetId": 16
      },
      "lineNbr": 433,
      "author": {
        "id": 9545
      },
      "writtenOn": "2018-05-02T22:48:38Z",
      "side": 1,
      "message": "Nit: Delete this uint32_t cast.",
      "range": {
        "startLine": 433,
        "startChar": 20,
        "endLine": 433,
        "endChar": 30
      },
      "revId": "04bde35f7a65dc924afc74ffa3e4ee677fcb7a16",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "535c4999_0c92a47d",
        "filename": "obudec.c",
        "patchSetId": 16
      },
      "lineNbr": 443,
      "author": {
        "id": 9545
      },
      "writtenOn": "2018-05-02T22:48:38Z",
      "side": 1,
      "message": "Nit: this is a pre-existing issue. I think it\u0027s clearer to use *buffer instead of new_buffer. (They have the same value.)",
      "range": {
        "startLine": 443,
        "startChar": 16,
        "endLine": 443,
        "endChar": 26
      },
      "revId": "04bde35f7a65dc924afc74ffa3e4ee677fcb7a16",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    }
  ]
}
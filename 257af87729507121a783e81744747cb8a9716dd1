{
  "comments": [
    {
      "key": {
        "uuid": "e2c24330_5379e897",
        "filename": "av1/common/av1_txfm.h",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 9545
      },
      "writtenOn": "2018-07-03T21:35:23Z",
      "side": 1,
      "message": "1. I think we can omit the defined(__clang__) test here. It should be safe to test defined(__has_attribute) directly.\n\n2. It may be better to only set DO_RANGE_CHECK_CLAMP to 1 for integer sanitizer. For example, I suspect ThreadSanitizer does not check for integer overflow errors, so we don\u0027t need to set DO_RANGE_CHECK_CLAMP to 1 under ThreadSanitizer.",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 31,
        "endChar": 25
      },
      "revId": "257af87729507121a783e81744747cb8a9716dd1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0110785_fedcb0ab",
        "filename": "av1/common/av1_txfm.h",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 5290
      },
      "writtenOn": "2018-07-03T21:45:52Z",
      "side": 1,
      "message": "\u003e 1. I think we can omit the defined(__clang__) test here. It should be safe to test defined(__has_attribute) directly.\n\nI was following other examples\n(i) here: https://aomedia.googlesource.com/aom/+/master/common/md5_utils.c#148 and\n(ii) here: https://chromium.googlesource.com/webm/libwebp/+/master/src/dsp/dsp.h#182\nto be consistent.\n\nBut I\u0027m open to removing the defined(__clang__) test.\n@James: what do you suggest?\n\n\u003e \n\u003e 2. It may be better to only set DO_RANGE_CHECK_CLAMP to 1 for integer sanitizer. For example, I suspect ThreadSanitizer does not check for integer overflow errors, so we don\u0027t need to set DO_RANGE_CHECK_CLAMP to 1 under ThreadSanitizer.\n\nYes, unfortunately, there\u0027s no test for undefined behavior sanitizer AFAIK. (even though there\u0027s one for Address sanitizer).\nhttps://clang.llvm.org/docs/AddressSanitizer.html#conditional-compilation-with-has-feature-address-sanitizer\nhttps://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html",
      "parentUuid": "e2c24330_5379e897",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 31,
        "endChar": 25
      },
      "revId": "257af87729507121a783e81744747cb8a9716dd1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6aa54ae6_e2df6f85",
        "filename": "av1/common/av1_txfm.h",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 5020
      },
      "writtenOn": "2018-07-04T07:23:21Z",
      "side": 1,
      "message": "\u003e \u003e 1. I think we can omit the defined(__clang__) test here. It should be safe to test defined(__has_attribute) directly.\n\u003e \n\u003e I was following other examples\n\u003e (i) here: https://aomedia.googlesource.com/aom/+/master/common/md5_utils.c#148 and\n\u003e (ii) here: https://chromium.googlesource.com/webm/libwebp/+/master/src/dsp/dsp.h#182\n\u003e to be consistent.\n\u003e \n\u003e But I\u0027m open to removing the defined(__clang__) test.\n\u003e @James: what do you suggest?\n\u003e \n\nThis won\u0027t work as is since clang will report having the attribute in all builds. If we continue this way then applying the no_sanitize attribute to the function may be the only option instead of using the clamp. So it\u0027s possible the original suggestion might be what we\u0027re left with and that we should document its use in relation to fuzzers in the README.\n\n\u003e \u003e \n\u003e \u003e 2. It may be better to only set DO_RANGE_CHECK_CLAMP to 1 for integer sanitizer. For example, I suspect ThreadSanitizer does not check for integer overflow errors, so we don\u0027t need to set DO_RANGE_CHECK_CLAMP to 1 under ThreadSanitizer.\n\u003e \n\u003e Yes, unfortunately, there\u0027s no test for undefined behavior sanitizer AFAIK. (even though there\u0027s one for Address sanitizer).\n\u003e https://clang.llvm.org/docs/AddressSanitizer.html#conditional-compilation-with-has-feature-address-sanitizer\n\u003e https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html",
      "parentUuid": "c0110785_fedcb0ab",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 31,
        "endChar": 25
      },
      "revId": "257af87729507121a783e81744747cb8a9716dd1",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    }
  ]
}
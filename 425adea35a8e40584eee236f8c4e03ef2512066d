{
  "comments": [
    {
      "key": {
        "uuid": "e48ac64a_fac6a4e3",
        "filename": "av1/common/cfl.c",
        "patchSetId": 32
      },
      "lineNbr": 328,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-09-16T01:00:00Z",
      "side": 1,
      "message": "This looks like you\u0027re trying to handle 4x16 and 16x4, but I don\u0027t think you can have a hard-coded stride of 2 for both cases (the 16x4 case will alias the start of the second row with the end of the first), and CFL_MAX_SUB8X8_VAL will be larger than 8 if you use a hard-coded stride of 4.\n\nAlso, CFL_MAX_SUB8X8_INDEX might be a better name. It was a little confusing to see cfl-\u003esub8x8_val get incremented above, and then have a constant called ...MAX...VAL that was not being compared to the actual value.",
      "revId": "425adea35a8e40584eee236f8c4e03ef2512066d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2481c012_7610cc96",
        "filename": "av1/common/cfl.c",
        "patchSetId": 32
      },
      "lineNbr": 328,
      "author": {
        "id": 7105
      },
      "writtenOn": "2017-09-16T02:09:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e48ac64a_fac6a4e3",
      "revId": "425adea35a8e40584eee236f8c4e03ef2512066d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c181b99c_92f50bc3",
        "filename": "av1/common/cfl.c",
        "patchSetId": 32
      },
      "lineNbr": 345,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-09-16T01:00:00Z",
      "side": 1,
      "message": "Isn\u0027t it the other way around? (swap row/col?)",
      "revId": "425adea35a8e40584eee236f8c4e03ef2512066d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "002a2ad9_b13685c3",
        "filename": "av1/common/cfl.c",
        "patchSetId": 32
      },
      "lineNbr": 345,
      "author": {
        "id": 7105
      },
      "writtenOn": "2017-09-16T02:09:08Z",
      "side": 1,
      "message": "I don\u0027t think so.\n\nFor example, the assert would trigger if a 8x4 started at col \u003d\u003d 1.",
      "parentUuid": "c181b99c_92f50bc3",
      "revId": "425adea35a8e40584eee236f8c4e03ef2512066d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52841006_028318ad",
        "filename": "av1/common/cfl.c",
        "patchSetId": 32
      },
      "lineNbr": 345,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-09-16T05:47:55Z",
      "side": 1,
      "message": "If I have an 8x4 starting at an odd column, plugging those into your expression gives\n\n  (true || false) \u0026\u0026 (false || ??)\n\nSo if it started at an even row, then the assert would not trigger. Or did I miss something?\n\nI think the following is a bit more intuitive:\n\n  !((col \u0026 1) \u0026\u0026 block_size_wide[bsize] !\u003d 4) \u0026\u0026 !((row \u0026 1) \u0026\u0026 block_size_high[bsize] !\u003d 4)\n\nI.e., the two things we don\u0027t want are starting at an odd column with a width that isn\u0027t four, and starting at an odd row with a height that isn\u0027t four. That\u0027s equivalent to\n\n  (!(col \u0026 1) || block_size_wide[bsize] \u003d\u003d 4) \u0026\u0026 (!(row \u0026 1) || block_size_high[bsize] \u003d\u003d 4)\n\nYou could even make those two separate asserts, to make it obvious which one is failing if one fails.",
      "parentUuid": "002a2ad9_b13685c3",
      "revId": "425adea35a8e40584eee236f8c4e03ef2512066d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "13c9a8f2_82ce7346",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 18227
      },
      "writtenOn": "2021-01-22T06:09:42Z",
      "side": 1,
      "message": "Thanks Yue for providing this patch. \n\nThere should be no major conflicts with SDP. One thing we need to keep in mind is that is_coded_map needs to be extended when SDP is applied. And we can submit a seprate CL to extend that later.",
      "revId": "6e9f2f4d8e3ce2c65a3f589da4d9dbe6159ebe5c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "701333f4_fe0e2478",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5188
      },
      "writtenOn": "2021-01-22T19:29:24Z",
      "side": 1,
      "message": "Thanks for the reminder!",
      "parentUuid": "13c9a8f2_82ce7346",
      "revId": "6e9f2f4d8e3ce2c65a3f589da4d9dbe6159ebe5c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f71d501_03c6c71c",
        "filename": "av1/common/blockd.c",
        "patchSetId": 4
      },
      "lineNbr": 95,
      "author": {
        "id": 18227
      },
      "writtenOn": "2021-01-22T06:09:42Z",
      "side": 1,
      "message": "Please remove this empty line.",
      "revId": "6e9f2f4d8e3ce2c65a3f589da4d9dbe6159ebe5c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67c8e603_5f77ae5d",
        "filename": "av1/common/blockd.c",
        "patchSetId": 4
      },
      "lineNbr": 95,
      "author": {
        "id": 5188
      },
      "writtenOn": "2021-01-22T19:29:24Z",
      "side": 1,
      "message": "It was added just to separate the two functions",
      "parentUuid": "0f71d501_03c6c71c",
      "revId": "6e9f2f4d8e3ce2c65a3f589da4d9dbe6159ebe5c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "31088971_ab41dfc8",
        "filename": "av1/common/blockd.c",
        "patchSetId": 4
      },
      "lineNbr": 95,
      "author": {
        "id": 18227
      },
      "writtenOn": "2021-01-25T06:27:21Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "67c8e603_5f77ae5d",
      "revId": "6e9f2f4d8e3ce2c65a3f589da4d9dbe6159ebe5c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8896f874_c404198b",
        "filename": "av1/common/mvref_common.c",
        "patchSetId": 4
      },
      "lineNbr": 275,
      "author": {
        "id": 18227
      },
      "writtenOn": "2021-01-22T06:09:42Z",
      "side": 1,
      "message": "I think it\u0027s better to add some comments to explain the logic here. \n\nFor example,\n\n// above super block row\nif (tr_mask_row \u003c 0) {\n....\n// same super block row, but column of tr block is over the right boundary of current super block\n} else if (tr_mask_col \u003e\u003d sb_mi_size) {",
      "revId": "6e9f2f4d8e3ce2c65a3f589da4d9dbe6159ebe5c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5ca70a1a_c54ebe53",
        "filename": "av1/common/mvref_common.c",
        "patchSetId": 4
      },
      "lineNbr": 275,
      "author": {
        "id": 5188
      },
      "writtenOn": "2021-01-22T19:40:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8896f874_c404198b",
      "revId": "6e9f2f4d8e3ce2c65a3f589da4d9dbe6159ebe5c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb7b82e9_91540f33",
        "filename": "av1/common/reconintra.c",
        "patchSetId": 4
      },
      "lineNbr": 56,
      "author": {
        "id": 18227
      },
      "writtenOn": "2021-01-22T06:09:42Z",
      "side": 1,
      "message": "Please add some comments to explain why this additional has_top_right function is needed? Is this function only used for intra prediction? Is it possible to combine these two has_top_right function together?",
      "revId": "6e9f2f4d8e3ce2c65a3f589da4d9dbe6159ebe5c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f33876a5_7e3b3db7",
        "filename": "av1/common/reconintra.c",
        "patchSetId": 4
      },
      "lineNbr": 56,
      "author": {
        "id": 5188
      },
      "writtenOn": "2021-01-22T19:29:24Z",
      "side": 1,
      "message": "There are separate has_top_right() functions for inter and intra case because for intra, prediction is done at transform block level, therefore the result also depends on transform size and the location of the transform block.",
      "parentUuid": "cb7b82e9_91540f33",
      "revId": "6e9f2f4d8e3ce2c65a3f589da4d9dbe6159ebe5c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "574f3117_5295125c",
        "filename": "av1/common/reconintra.c",
        "patchSetId": 4
      },
      "lineNbr": 56,
      "author": {
        "id": 18227
      },
      "writtenOn": "2021-01-25T06:27:21Z",
      "side": 1,
      "message": "Understood. is_coded_map is only updated after all the transform blocks within one coded block are encoded. Since the intra prediction has dependency for multiple transform blocks within one coded block, the has_top_right() function has to be different for intra and inter prediction.\n\nSince the modification to unify these two functions needs quite a lot of changes, we can keep it as is now, and change it if it\u0027s needed later.",
      "parentUuid": "f33876a5_7e3b3db7",
      "revId": "6e9f2f4d8e3ce2c65a3f589da4d9dbe6159ebe5c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
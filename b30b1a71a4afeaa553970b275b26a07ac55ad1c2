{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "610314b1_1b684b0d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 6245
      },
      "writtenOn": "2022-09-20T11:54:18Z",
      "side": 1,
      "message": "Hi Marco, Yunqing,\n\nIn this CL, we optimized the population of x-\u003econtent_state_sb.source_sad_nonrd at SB level.  In parent version, x-\u003econtent_state_sb.source_sad_nonrd is populated based on cpi-\u003erc.frame_source_sad or residual source variance/SSE computed at superblock level assuming zero MV (when cpi-\u003erc.frame_source_sad is non-zero).  In this CL, cpi-\u003esrc_sad_blk_64x64 is used to identify the superblocks with zero source SAD and hence residual variance computation is avoided for these cases.  The CL is bit exact as zero source SAD implies zero residual source variance. Though the CL is applicable for non-screen contents as well, the CL is seen to give speed-up for screen contents only. The CL produces bit-exact output for rtc/rtc-derf test-sets with no speed impact.\n\nPlease check the borg results for rtc-screen test-set below. \n```\n            Instruction Count        \tBD-Rate Loss(%)\n    cpu       Reduction(%)      avg.psnr   ovr.psnr    ssim\n    9         \t0.294 \t\t 0.0000     0.0000    0.0000\n    10        \t0.316  \t\t0.0000     0.0000    0.0000\n```\n\nThe instruction count reduction specified has been measured using command:\n $ perf stat -e instructions:u ./aomenc â€¦\n\nPlease let us know your thoughts on the CL.\n\nRegards,\nRanjit",
      "revId": "b30b1a71a4afeaa553970b275b26a07ac55ad1c2",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6462b704_4e157c1b",
        "filename": "av1/encoder/encodeframe.c",
        "patchSetId": 4
      },
      "lineNbr": 802,
      "author": {
        "id": 5185
      },
      "writtenOn": "2022-09-20T23:54:45Z",
      "side": 1,
      "message": "Is this checking necessary? Same question for 128x128 SB. Please double check. Please refer to line 830 - 842 part that does the same thing.",
      "range": {
        "startLine": 801,
        "startChar": 13,
        "endLine": 802,
        "endChar": 53
      },
      "revId": "b30b1a71a4afeaa553970b275b26a07ac55ad1c2",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4818838_10a275b1",
        "filename": "av1/encoder/encodeframe.c",
        "patchSetId": 4
      },
      "lineNbr": 842,
      "author": {
        "id": 5185
      },
      "writtenOn": "2022-09-20T23:54:45Z",
      "side": 1,
      "message": "Could you please combine this part (line 830 - 842) to\ncurr_sb_sad \u003d get_sb_source_sad(cpi, mi_row, mi_col);\nSo we don\u0027t extract same data twice?",
      "range": {
        "startLine": 841,
        "startChar": 0,
        "endLine": 842,
        "endChar": 60
      },
      "revId": "b30b1a71a4afeaa553970b275b26a07ac55ad1c2",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9160ebe6_2365ac67",
        "filename": "av1/encoder/encodeframe_utils.c",
        "patchSetId": 4
      },
      "lineNbr": 1367,
      "author": {
        "id": 6245
      },
      "writtenOn": "2022-09-20T11:54:18Z",
      "side": 1,
      "message": "In parent version - If cpi-\u003esrc_sad_blk_64x64[] is not populated, blk_sad would have been 0 (or from the previous frame) which is not correct.\nAfter the current CL (in the absence of above code change) - If cpi-\u003esrc_sad_blk_64x64[] is not populated, blk_sad will be UINT32_MAX which may skip temporal filtering.\nThough we are not sure of the cases where this scenario may occur, we modified the code to recalculate SAD in these cases to improve the decision on the application of temporal filtering.",
      "range": {
        "startLine": 1352,
        "startChar": 0,
        "endLine": 1367,
        "endChar": 0
      },
      "revId": "b30b1a71a4afeaa553970b275b26a07ac55ad1c2",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "531e1ca9_62226902",
        "filename": "av1/encoder/encodeframe_utils.c",
        "patchSetId": 4
      },
      "lineNbr": 1367,
      "author": {
        "id": 5185
      },
      "writtenOn": "2022-09-20T17:09:46Z",
      "side": 1,
      "message": "Could you explain more about this:\n\"If cpi-\u003esrc_sad_blk_64x64[] is not populated, blk_sad would have been 0 (or from the previous frame)\"?\nAre you talking about sad isn\u0027t available even when (cpi-\u003esrc_sad_blk_64x64 !\u003d NULL)?\nIf so, maybe we need to calculate every 64x64 sad in rc_scene_detection_onepass_rt(). This will make it easy when we use those sad results.",
      "parentUuid": "9160ebe6_2365ac67",
      "range": {
        "startLine": 1352,
        "startChar": 0,
        "endLine": 1367,
        "endChar": 0
      },
      "revId": "b30b1a71a4afeaa553970b275b26a07ac55ad1c2",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e352dd7_9451cfb9",
        "filename": "av1/encoder/encodeframe_utils.c",
        "patchSetId": 4
      },
      "lineNbr": 1367,
      "author": {
        "id": 6245
      },
      "writtenOn": "2022-09-20T19:16:21Z",
      "side": 1,
      "message": "Hi Yunqing,\n\nApologies for the confusion.\n\nWe went through rc_scene_detection_onepass_rt() function. From the code study, we understand that full_sampling\u003d1 if cpi-\u003esrc_sad_blk_64x64 !\u003d NULL. Thus SAD should be available if cpi-\u003esrc_sad_blk_64x64 !\u003d NULL, in the parent version.\n\nHowever above modification in current CL does not assume the availability of SAD even if cpi-\u003esrc_sad_blk_64x64 !\u003d NULL (i.e., computes SAD in case it is not available). This approach is slightly defensive to avoid issues with future changes. \n\nPlease let us know if you see any issues with our approach (or) if we should revert this change.\n\nRegards,\nRanjit",
      "parentUuid": "531e1ca9_62226902",
      "range": {
        "startLine": 1352,
        "startChar": 0,
        "endLine": 1367,
        "endChar": 0
      },
      "revId": "b30b1a71a4afeaa553970b275b26a07ac55ad1c2",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d7e093c_78cfa829",
        "filename": "av1/encoder/encodeframe_utils.c",
        "patchSetId": 4
      },
      "lineNbr": 1367,
      "author": {
        "id": 5185
      },
      "writtenOn": "2022-09-20T23:54:45Z",
      "side": 1,
      "message": "I feel the original logic is more clear. If \"cpi-\u003esrc_sad_blk_64x64 !\u003d NULL\" is enough, we should use it confidently. Thanks.",
      "parentUuid": "9e352dd7_9451cfb9",
      "range": {
        "startLine": 1352,
        "startChar": 0,
        "endLine": 1367,
        "endChar": 0
      },
      "revId": "b30b1a71a4afeaa553970b275b26a07ac55ad1c2",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd3a5653_3b60d9c0",
        "filename": "av1/encoder/ratectrl.c",
        "patchSetId": 4
      },
      "lineNbr": 2806,
      "author": {
        "id": 5185
      },
      "writtenOn": "2022-09-20T23:54:45Z",
      "side": 1,
      "message": "Suggest to always calculate full sampling sad here to reduce the confusion, and it shouldn\u0027t increase encoder time much. What do you think? We can do this later.",
      "range": {
        "startLine": 2806,
        "startChar": 12,
        "endLine": 2806,
        "endChar": 25
      },
      "revId": "b30b1a71a4afeaa553970b275b26a07ac55ad1c2",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
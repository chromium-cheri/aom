{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9288ba6f_17f7d272",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 29295
      },
      "writtenOn": "2023-09-13T09:29:53Z",
      "side": 1,
      "message": "Thank you for fixing the Big-Endian issue. The patch looks fine. We verified bit-exact behavior on a Little-Endian machine at our end, for various RT and good presets.",
      "revId": "429607ea0a8f7a2105dbe5ea3689cf633e582e00",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d477de60_4d9dc9e1",
        "filename": "aom_dsp/entenc.h",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-09-12T23:55:53Z",
      "side": 1,
      "message": "A risk of this CL is that aom_util/endian_inl.h was an unused file before this CL. It is based on vpx_util/endian_inl.h in libvpx, which is used (by vpx_dsp/bitreader.c for the `HToBE64` and `HToBE32` macros), and I verified that aom_util/endian_inl.h and vpx_util/endian_inl.h are essentially the same.",
      "revId": "429607ea0a8f7a2105dbe5ea3689cf633e582e00",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c260d830_8c7a17c4",
        "filename": "aom_dsp/entenc.h",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-09-12T23:55:53Z",
      "side": 1,
      "message": "Here we first shift left in the host byte order, and then convert to the big-endian byte order.",
      "revId": "429607ea0a8f7a2105dbe5ea3689cf633e582e00",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70ba88f8_7e7e4e33",
        "filename": "aom_dsp/entenc.h",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 29295
      },
      "writtenOn": "2023-09-13T09:29:53Z",
      "side": 1,
      "message": "This looks fine. Left-shifting `output` first is safe due to the earlier masking operation on line 110 of entenc.c.",
      "parentUuid": "c260d830_8c7a17c4",
      "revId": "429607ea0a8f7a2105dbe5ea3689cf633e582e00",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e39d3239_1e722612",
        "filename": "aom_ports/bitops.h",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-09-12T23:55:53Z",
      "side": 1,
      "message": "The original https://learn.microsoft.com/en-us/cpp/c-runtime-library/ URL is for the `_byteswap_uint64()` C runtime library function. Since this file is no longer using that function, I replaced it with the URL for the `_BitScanReverse()` compiler intrinsic function.",
      "revId": "429607ea0a8f7a2105dbe5ea3689cf633e582e00",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
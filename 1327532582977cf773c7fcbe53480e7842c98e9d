{
  "comments": [
    {
      "key": {
        "uuid": "f9ba23ec_2bd913ed",
        "filename": "av1/encoder/pickcdef.c",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-06-07T21:48:48Z",
      "side": 1,
      "message": "This looks a little sparse no? Especially if you reduce the number of passes (see the comment about the \"4*\" below), you may be able to have a few more values, especially between 7 and 12 and between 12 and 25.",
      "range": {
        "startLine": 26,
        "startChar": 52,
        "endLine": 26,
        "endChar": 53
      },
      "revId": "1327532582977cf773c7fcbe53480e7842c98e9d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f193cb0a_67f18f9b",
        "filename": "av1/encoder/pickcdef.c",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 5111
      },
      "writtenOn": "2017-06-08T05:13:24Z",
      "side": 1,
      "message": "I reduced the number to as few as possible still hardly no loss.  I then tried 50 different combinations and picked a set which gave a gain (compared to 32 values) for both ll4 and hl4 (2-3 sets of the 50 tried gave gains), but after a rebase only ll4 gave a gain and hl4 gave a small loss), so there is a noise range here.  The effect on ll0 and hl0 is similar, but I\u0027ve kept the cpu-used\u003d0 case unchanged.",
      "parentUuid": "f9ba23ec_2bd913ed",
      "range": {
        "startLine": 26,
        "startChar": 52,
        "endLine": 26,
        "endChar": 53
      },
      "revId": "1327532582977cf773c7fcbe53480e7842c98e9d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c65939e5_81f01208",
        "filename": "av1/encoder/pickcdef.c",
        "patchSetId": 6
      },
      "lineNbr": 128,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-06-07T21:48:48Z",
      "side": 1,
      "message": "You probably want to reduce the 4* here for the \"fast\" case. It\u0027s possible even 0 (i.e. no loop) might work. In any case, there\u0027s going to be a tradeoff with total_strengths.",
      "range": {
        "startLine": 128,
        "startChar": 18,
        "endLine": 128,
        "endChar": 19
      },
      "revId": "1327532582977cf773c7fcbe53480e7842c98e9d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0385700b_410086e7",
        "filename": "av1/encoder/pickcdef.c",
        "patchSetId": 6
      },
      "lineNbr": 128,
      "author": {
        "id": 5111
      },
      "writtenOn": "2017-06-08T05:13:24Z",
      "side": 1,
      "message": "You\u0027re probably right and I\u0027ll see how low I can go.  I tried to reduce this number first (before changing the number of strengths) and it made little impact (not so much on speed either), but I didn\u0027t try both.",
      "parentUuid": "c65939e5_81f01208",
      "range": {
        "startLine": 128,
        "startChar": 18,
        "endLine": 128,
        "endChar": 19
      },
      "revId": "1327532582977cf773c7fcbe53480e7842c98e9d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b00f44fc_095d820f",
        "filename": "av1/encoder/pickcdef.c",
        "patchSetId": 6
      },
      "lineNbr": 128,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-06-08T05:34:52Z",
      "side": 1,
      "message": "Well, I guess the important question is whether the CPU is spent mostly on computing the MSE or on searching. I guess reducing the number of strengths also reduces the search time since the MSE is O(N) and the search is O(N^2) because of chroma.",
      "parentUuid": "0385700b_410086e7",
      "range": {
        "startLine": 128,
        "startChar": 18,
        "endLine": 128,
        "endChar": 19
      },
      "revId": "1327532582977cf773c7fcbe53480e7842c98e9d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2001153_a5f4fd0d",
        "filename": "av1/encoder/pickcdef.c",
        "patchSetId": 6
      },
      "lineNbr": 128,
      "author": {
        "id": 5111
      },
      "writtenOn": "2017-06-08T07:53:34Z",
      "side": 1,
      "message": "If I omit the refinement in the \"fast\" case, the impact is zero.  So I suggest that we merge PS9 if it passes the Jenkins tests.\n\nThe first CDEF function reported by perf top for ll4 is compute_dering_dist (0.73%).  The next are search_one_dual (0.13%) and av1_cdef_search (0.07%).  compute_dering_dist can probably be optimised.",
      "parentUuid": "b00f44fc_095d820f",
      "range": {
        "startLine": 128,
        "startChar": 18,
        "endLine": 128,
        "endChar": 19
      },
      "revId": "1327532582977cf773c7fcbe53480e7842c98e9d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "92da792a_457537dc",
        "filename": "test/cdef_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 446,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-11-10T18:02:29Z",
      "side": 1,
      "message": "CDEF_HBORDER and CDEF_VBORDER are even, so I think width will be as well:\n\nhttps://aomedia.googlesource.com/aom/+/refs/heads/main/av1/encoder/pickcdef.c#590\n\nThis can be examined further and handled in a follow up.",
      "revId": "b6f332b244fcb54a818d1f5095460b73e243b6c6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6e72982_38231724",
        "filename": "test/cdef_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 446,
      "author": {
        "id": 31957
      },
      "writtenOn": "2023-11-14T10:05:07Z",
      "side": 1,
      "message": "While fixing the test failures in the other patches, I did a bit more investigation into the block sizes, and printing the width and height used in both cdef_copy_rect8 functions on a real-time encode seems to return only multiples of 8 for width. From your link it seems to make sense as CDEF_HBORDER \u003d 8 and MI_SIZE_64X64 is a multiple of 8.\nThe other place the copy functions are used is here: https://aomedia.googlesource.com/aom/+/refs/heads/main/av1/common/cdef.c#175 and similar considerations seem to point to a value of width that\u0027s always a multiple of 8.\nCan we make this assumption for width? If so then we can further amend the tests and greatly simplify the Neon code compared to the original simd implementation.\n\nOn a side note printing the block sizes also showed values of 2 for h (but that doesn\u0027t impact the code).",
      "parentUuid": "92da792a_457537dc",
      "revId": "b6f332b244fcb54a818d1f5095460b73e243b6c6",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
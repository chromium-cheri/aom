{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c8b98ca4_c237ceb5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 10298
      },
      "writtenOn": "2022-08-18T01:15:25Z",
      "side": 1,
      "message": "Hi Jingning,\n\nThanks for getting started on this so quickly, but I think it will be difficult to make this change all at once in all three repos, which is why I suggested the plan in http://b/242892473#comment1.\n\nI had planned on changing the API in a non-breaking way by defining a new entry point, then migrating both callers and implementations independently to the new API. (Note that there are 3 different implementations: the mock and fake as well as the real implementation.)\n\nI just coded up cl/468335862 which does the 1st step. It passes all the tests in all 3 repos that I usually check, and I\u0027m running a google3 presubmit on it now. Assuming that passes, I can upload it to gerrit first thing tomorrow. (It\u0027s my bedtime now. ðŸ˜€)\n\nThe API is a little more general than what you have here; it allows passing an arbitrary number of GOPs of lookahead. If you think it would be preferable to limit to one GOP of lookahead, let me know, and I can change it.\n\nMark\n\n",
      "revId": "4a832dd5b6d3cf67780362b0d7757fef58540317",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb055444_c0687e40",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5022
      },
      "writtenOn": "2022-08-18T03:45:36Z",
      "side": 1,
      "message": "Sounds a good plan. I will wait for your changes landed first before applying the changes in the qmode rate control algorithm. Thanks!",
      "parentUuid": "c8b98ca4_c237ceb5",
      "revId": "4a832dd5b6d3cf67780362b0d7757fef58540317",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a8eabdb_0ef38bf8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 31097
      },
      "writtenOn": "2022-09-07T17:23:49Z",
      "side": 1,
      "message": "fuck you",
      "revId": "4a832dd5b6d3cf67780362b0d7757fef58540317",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7e34b7b_76d74555",
        "filename": "av1/ratectrl_qmode.cc",
        "patchSetId": 3
      },
      "lineNbr": 1156,
      "author": {
        "id": 5960
      },
      "writtenOn": "2022-08-17T20:15:22Z",
      "side": 1,
      "message": "same here",
      "range": {
        "startLine": 1156,
        "startChar": 33,
        "endLine": 1156,
        "endChar": 50
      },
      "revId": "4a832dd5b6d3cf67780362b0d7757fef58540317",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "498f71dc_b652079d",
        "filename": "av1/ratectrl_qmode.cc",
        "patchSetId": 3
      },
      "lineNbr": 1213,
      "author": {
        "id": 5960
      },
      "writtenOn": "2022-08-17T20:15:22Z",
      "side": 1,
      "message": "once it\u0027s changed to use reference, this needs to be changed to tell if it\u0027s empty or not. maybe using size?",
      "range": {
        "startLine": 1213,
        "startChar": 0,
        "endLine": 1213,
        "endChar": 33
      },
      "revId": "4a832dd5b6d3cf67780362b0d7757fef58540317",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8df31eb0_3df896c9",
        "filename": "av1/ratectrl_qmode.cc",
        "patchSetId": 3
      },
      "lineNbr": 1263,
      "author": {
        "id": 5960
      },
      "writtenOn": "2022-08-17T20:15:22Z",
      "side": 1,
      "message": "use reference here too",
      "range": {
        "startLine": 1263,
        "startChar": 33,
        "endLine": 1263,
        "endChar": 50
      },
      "revId": "4a832dd5b6d3cf67780362b0d7757fef58540317",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6ecc2f7_563680ba",
        "filename": "av1/ratectrl_qmode.cc",
        "patchSetId": 3
      },
      "lineNbr": 1264,
      "author": {
        "id": 5960
      },
      "writtenOn": "2022-08-17T20:15:22Z",
      "side": 1,
      "message": "same here",
      "range": {
        "startLine": 1264,
        "startChar": 38,
        "endLine": 1264,
        "endChar": 57
      },
      "revId": "4a832dd5b6d3cf67780362b0d7757fef58540317",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a0b823a_c0090324",
        "filename": "av1/ratectrl_qmode.h",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 5960
      },
      "writtenOn": "2022-08-17T20:15:22Z",
      "side": 1,
      "message": "keep it consistent by using reference instead of pointer\n\nconst TplGopStats \u0026next_tpl_gop_stats",
      "range": {
        "startLine": 89,
        "startChar": 38,
        "endLine": 89,
        "endChar": 57
      },
      "revId": "4a832dd5b6d3cf67780362b0d7757fef58540317",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8436aad9_0b68a006",
        "filename": "av1/ratectrl_qmode.h",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 5022
      },
      "writtenOn": "2022-08-17T21:17:46Z",
      "side": 1,
      "message": "I was trying to resolve a call from higher level functions where we need to decide whether there is a next gop, something like this:\n\n\n    const aom::GopStruct *next_gop_struct \u003d\n        i \u003c gop_list.size() - 1 ? \u0026gop_list[i + 1] : NULL;\n        \nWhat would be a best practice to handle this if we use a reference here?",
      "parentUuid": "5a0b823a_c0090324",
      "range": {
        "startLine": 89,
        "startChar": 38,
        "endLine": 89,
        "endChar": 57
      },
      "revId": "4a832dd5b6d3cf67780362b0d7757fef58540317",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7814cfae_75a0f855",
        "filename": "av1/ratectrl_qmode.h",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 5960
      },
      "writtenOn": "2022-08-17T22:06:48Z",
      "side": 1,
      "message": "This should work:\n\n```\nconst aom::GopStruct next_gop_struct \u003d\n        i \u003c gop_list.size() - 1 ? gop_list[i + 1] : aom::GopStruct{};\n```\n\nIt\u0027ll be an empty structure with an empty gop_frame_list if (i \u003c gop_list.size() - 1) is not satisfied.",
      "parentUuid": "8436aad9_0b68a006",
      "range": {
        "startLine": 89,
        "startChar": 38,
        "endLine": 89,
        "endChar": 57
      },
      "revId": "4a832dd5b6d3cf67780362b0d7757fef58540317",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d78ed1d7_289ecb3d",
        "filename": "av1/ratectrl_qmode.h",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 5022
      },
      "writtenOn": "2022-08-17T22:22:15Z",
      "side": 1,
      "message": "A close study of https://google.github.io/styleguide/cppguide.html#Inputs_and_Outputs\n\nIt seems to recommend a pointer here than a reference in the event of optional input parameter (?)",
      "parentUuid": "7814cfae_75a0f855",
      "range": {
        "startLine": 89,
        "startChar": 38,
        "endLine": 89,
        "endChar": 57
      },
      "revId": "4a832dd5b6d3cf67780362b0d7757fef58540317",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87285cd4_a642ed88",
        "filename": "av1/ratectrl_qmode.h",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 5960
      },
      "writtenOn": "2022-08-17T20:15:22Z",
      "side": 1,
      "message": "same as above: use reference, not pointer",
      "range": {
        "startLine": 98,
        "startChar": 35,
        "endLine": 98,
        "endChar": 52
      },
      "revId": "4a832dd5b6d3cf67780362b0d7757fef58540317",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "659ef6fc_f3ccb8d2",
        "filename": "av1/ratectrl_qmode.h",
        "patchSetId": 3
      },
      "lineNbr": 99,
      "author": {
        "id": 5960
      },
      "writtenOn": "2022-08-17T20:15:22Z",
      "side": 1,
      "message": "same here",
      "range": {
        "startLine": 99,
        "startChar": 40,
        "endLine": 99,
        "endChar": 59
      },
      "revId": "4a832dd5b6d3cf67780362b0d7757fef58540317",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb1e9d8b_29f7d77d",
        "filename": "av1/ratectrl_qmode.h",
        "patchSetId": 3
      },
      "lineNbr": 108,
      "author": {
        "id": 5960
      },
      "writtenOn": "2022-08-17T20:15:22Z",
      "side": 1,
      "message": "same here",
      "range": {
        "startLine": 108,
        "startChar": 35,
        "endLine": 108,
        "endChar": 52
      },
      "revId": "4a832dd5b6d3cf67780362b0d7757fef58540317",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d7c26e8_c047b9a4",
        "filename": "av1/ratectrl_qmode_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 266,
      "author": {
        "id": 5960
      },
      "writtenOn": "2022-08-17T20:15:22Z",
      "side": 1,
      "message": "same here",
      "range": {
        "startLine": 266,
        "startChar": 35,
        "endLine": 266,
        "endChar": 52
      },
      "revId": "4a832dd5b6d3cf67780362b0d7757fef58540317",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42d549f3_92aa306d",
        "filename": "av1/ratectrl_qmode_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 267,
      "author": {
        "id": 5960
      },
      "writtenOn": "2022-08-17T20:15:22Z",
      "side": 1,
      "message": "same here",
      "range": {
        "startLine": 267,
        "startChar": 40,
        "endLine": 267,
        "endChar": 59
      },
      "revId": "4a832dd5b6d3cf67780362b0d7757fef58540317",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31f9434b_9ad7750e",
        "filename": "test/mock_ratectrl_qmode.h",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 5960
      },
      "writtenOn": "2022-08-17T20:15:22Z",
      "side": 1,
      "message": "these need to be changed too",
      "range": {
        "startLine": 27,
        "startChar": 44,
        "endLine": 27,
        "endChar": 61
      },
      "revId": "4a832dd5b6d3cf67780362b0d7757fef58540317",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17606991_31a0782f",
        "filename": "test/ratectrl_qmode_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 599,
      "author": {
        "id": 5960
      },
      "writtenOn": "2022-08-17T20:15:22Z",
      "side": 1,
      "message": "For current test I guess we can pass in an empty structure",
      "range": {
        "startLine": 599,
        "startChar": 43,
        "endLine": 599,
        "endChar": 47
      },
      "revId": "4a832dd5b6d3cf67780362b0d7757fef58540317",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "4a832dd5b6d3cf67780362b0d7757fef58540317",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "4a832dd5b6d3cf67780362b0d7757fef58540317",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "4a832dd5b6d3cf67780362b0d7757fef58540317",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
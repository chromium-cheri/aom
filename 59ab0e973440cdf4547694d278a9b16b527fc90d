{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c8f7825a_169bf658",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14993
      },
      "writtenOn": "2022-07-01T21:04:44Z",
      "side": 1,
      "message": "Hi Wan-Teh, James, Yunqing,\n\nThis patch introduces an extra top-right delay when the intraBC tool is enabled so as to ensure that a sufficient number of superblocks have finished decoding in the previous rows before starting to decode the current superblock. This ensures that row-multithreaded decoding respects the hardware constraints on\nparallel processing with the intraBC tool and thus prevents any invalid access while building the predictor.\n\nWith the current design of the decoder, the number of worker threads are limited to 2 per tile.(AOM_MAX_THREADS_PER_TILE) This implies that only a maximum of 2 threads could work in parallel during row multithreaded decoding. Hence we were not able to demonstrate the invalid access in the decoder.\n\nHowever, we have modified the decoder to spawn more threads during row multithreaded decoding and introduced an artificial delay during the processing of the first superblock row for the parsing to finish and make more threads available for row parallel decoding. Additionally, we forced out of top-right DVs in the encoded stream so that the invalid access should happen during the decoding process. With this, we were able to observe the invalid access in the decoder for the parent version of this patch and it is verified that the current patch fixes this behaviour. We are currently exploring the preparation of a patch which would demonstrate this behaviour in a decoder unit test.\n\nThis patch is supposed to cause an increase in decode time for frames with intraBC enabled because of the additional top-right delay during the sync_read().\n\nPlease review.\n\nRegards,\nJaysanker.",
      "revId": "59ab0e973440cdf4547694d278a9b16b527fc90d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
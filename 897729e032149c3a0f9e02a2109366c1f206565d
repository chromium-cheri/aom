{
  "comments": [
    {
      "key": {
        "uuid": "9c04eb4e_48755179",
        "filename": "test/simd_impl.h",
        "patchSetId": 46
      },
      "lineNbr": 69,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-10-19T01:00:46Z",
      "side": 1,
      "message": "typically the instantiation takes care of the architecture with a prefix (e.g., C, SSE2), this gives something consistent to filter on. given these are namespaced do you need the additional suffix?",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 69,
        "endChar": 50
      },
      "revId": "897729e032149c3a0f9e02a2109366c1f206565d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc790340_8bca8d58",
        "filename": "test/simd_impl.h",
        "patchSetId": 46
      },
      "lineNbr": 69,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-10-19T23:44:18Z",
      "side": 1,
      "message": "given these are fast individually would it be simpler then to just do a TEST() with a table embedded in the body?",
      "parentUuid": "9c04eb4e_48755179",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 69,
        "endChar": 50
      },
      "revId": "897729e032149c3a0f9e02a2109366c1f206565d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf663e5_e3423282",
        "filename": "test/simd_impl.h",
        "patchSetId": 46
      },
      "lineNbr": 69,
      "author": {
        "id": 5111
      },
      "writtenOn": "2016-10-20T04:54:46Z",
      "side": 1,
      "message": "Yes, gtest somehow (through its magic macros?) ignores the namespace, so attempting to remove this postfix gives a runtime error like:\n\nAttempted redefinition of test case V64_V64. All tests in the same test case must use the same test fixture class.  However, in test case V64_V64, you tried to define a test using a fixture class different from the one used earlier. This can happen if the two fixture classes are from different namespaces and have the same name. You should probably rename one of the classes to put the tests into different test cases.",
      "parentUuid": "9c04eb4e_48755179",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 69,
        "endChar": 50
      },
      "revId": "897729e032149c3a0f9e02a2109366c1f206565d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c15cbc1_693e25f3",
        "filename": "test/simd_impl.h",
        "patchSetId": 46
      },
      "lineNbr": 69,
      "author": {
        "id": 5111
      },
      "writtenOn": "2016-10-20T04:54:46Z",
      "side": 1,
      "message": "My use of TEST_P() follows the pattern of the other tests in test/, but TEST_P() provides a useful way to feed the functions with good testing input tailored for each function profile.  I suspect using TEST() would mean reimplementing gtest functionality in wrappers.",
      "parentUuid": "dc790340_8bca8d58",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 69,
        "endChar": 50
      },
      "revId": "897729e032149c3a0f9e02a2109366c1f206565d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c822b81_ca153764",
        "filename": "test/simd_impl.h",
        "patchSetId": 46
      },
      "lineNbr": 69,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-10-21T04:04:24Z",
      "side": 1,
      "message": "\u003e My use of TEST_P() follows the pattern of the other tests in test/,\n \u003e but TEST_P() provides a useful way to feed the functions with good\n \u003e testing input tailored for each function profile.  I suspect using\n \u003e TEST() would mean reimplementing gtest functionality in wrappers.\n\ngiven this structure I think TEST_P() {} can become:\nTEST(arch, testname) {\n funcs[] \u003d {...}\n}",
      "parentUuid": "9c15cbc1_693e25f3",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 69,
        "endChar": 50
      },
      "revId": "897729e032149c3a0f9e02a2109366c1f206565d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c15cbc1_29238d6e",
        "filename": "test/simd_impl.h",
        "patchSetId": 46
      },
      "lineNbr": 69,
      "author": {
        "id": 5111
      },
      "writtenOn": "2016-10-21T06:30:22Z",
      "side": 1,
      "message": "Every function still needs to associated with a profile and any input restrictions.  It\u0027s possible to make such a list and write a test for it, but I don\u0027t see why not use gtest\u0027s parameterisation when there are things to parameterise, and thereby mainly reduce gtest to a hook for my own test framework. Besides, if a test fails, gtest will print a summary in the end identifying the parameters of the failing test.  The failing test can of course also write this, but it\u0027s convenient to have it in the summary to quickly identify what exactly has failed.\n\nGtest\u0027s macro quoting magic circumventing namespaces did force me to reduntantly parameterise the architecture by name mangling, which can be avoided by using TEST() instead, but that would be very much throwing the baby out with the bathwater.",
      "parentUuid": "9c822b81_ca153764",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 69,
        "endChar": 50
      },
      "revId": "897729e032149c3a0f9e02a2109366c1f206565d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41a36c15_8e287b4e",
        "filename": "test/simd_impl.h",
        "patchSetId": 46
      },
      "lineNbr": 69,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-10-26T05:32:01Z",
      "side": 1,
      "message": "\u003e Every function still needs to associated with a profile and any\n \u003e input restrictions.  It\u0027s possible to make such a list and write a\n \u003e test for it, but I don\u0027t see why not use gtest\u0027s parameterisation\n \u003e when there are things to parameterise, and thereby mainly reduce\n \u003e gtest to a hook for my own test framework. Besides, if a test\n \u003e fails, gtest will print a summary in the end identifying the\n \u003e parameters of the failing test.  The failing test can of course\n \u003e also write this, but it\u0027s convenient to have it in the summary to\n \u003e quickly identify what exactly has failed.\n \u003e \n\nAn index to the function list or pairing them with the name is simple enough.\n\n \u003e Gtest\u0027s macro quoting magic circumventing namespaces did force me\n \u003e to reduntantly parameterise the architecture by name mangling,\n \u003e which can be avoided by using TEST() instead, but that would be\n \u003e very much throwing the baby out with the bathwater.\n \u003e\n\nRight, I\u0027m just trying to simplify the implementation, avoiding the macro and tuple with:\n\nTEST() {\n  Func funcs[] \u003d {\n    ...\n  }\n}",
      "parentUuid": "9c15cbc1_29238d6e",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 69,
        "endChar": 50
      },
      "revId": "897729e032149c3a0f9e02a2109366c1f206565d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c134bcc0_0aabbb5f",
        "filename": "test/simd_impl.h",
        "patchSetId": 46
      },
      "lineNbr": 69,
      "author": {
        "id": 5111
      },
      "writtenOn": "2016-10-26T07:38:52Z",
      "side": 1,
      "message": "Yes, but I lose useful gtest functionality.  I would like to keep things as they are.",
      "parentUuid": "41a36c15_8e287b4e",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 69,
        "endChar": 50
      },
      "revId": "897729e032149c3a0f9e02a2109366c1f206565d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ccafba58_8acf31a3",
        "filename": "av1/decoder/decodeframe.c",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-07-07T22:30:48Z",
      "side": 1,
      "message": "I have two questions about this change.\n\n1. I am wondering why you refer to the maximum of 2 as the \"theoretical limit\". Could you explain that?\n\nDid you mean a theoretical analysis implies the frame decoding stage cannot possibly use more than two threads per tile?\n\n2. Why does the bug require having more threads than the theoretical limit of 2 to reproduce? It would seem that artificially delaying the thread for the first superblock row should be sufficient.",
      "revId": "4dca0f75f56955425add8c7a342c57f78e264433",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d15a68ed_4928395d",
        "filename": "av1/decoder/decodeframe.c",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 9616
      },
      "writtenOn": "2022-07-11T17:57:24Z",
      "side": 1,
      "message": "\u003e I am wondering why you refer to the maximum of 2 as the \"theoretical limit\". Could you explain that? Did you mean a theoretical analysis implies the frame decoding stage cannot possibly use more than two threads per tile?\n\nYes. Currently bitstream parsing and tile decoding take almost equal time (on average) and hence the number of threads that can work on a tile is limited to 2, where one thread would take up parsing and the other on decoding the tile (implemented in the function get_max_row_mt_workers_per_tile()). Hence there will only be 2 threads decoding (parsing + reconstruction) the tile.\n\n\u003e Why does the bug require having more threads than the theoretical limit of 2 to reproduce? It would seem that artificially delaying the thread for the first superblock row should be sufficient.\n\nWhen two threads are working in parallel, they will be processing successive rows. In this case, intraBC hardware constraints are a subset of typical top-right (1 superblock) dependency. Hence there will be no issue seen in this case. When more than 2 threads are working in parallel, intraBC DVs can refer to the region beyond the typical top-right (1 superblock) dependency as per the hardware constraints. Hence, in order to simulate this scenario, a minimum of three threads would be required in addition to the artificial delay to the first superblock row. Thus the fix CLs submitted (both in encoder and decoder) are conservative in terms of top-right dependency.",
      "parentUuid": "ccafba58_8acf31a3",
      "revId": "4dca0f75f56955425add8c7a342c57f78e264433",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7506aa51_866a5850",
        "filename": "av1/decoder/decodeframe.c",
        "patchSetId": 3
      },
      "lineNbr": 3276,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-07-07T03:24:01Z",
      "side": 1,
      "message": "`usleep()` is declared in the \u003cunistd.h\u003e header, and you need to define some macro, such as -D_GNU_SOURCE, to make the declaration visible if you are compiling with -std\u003dc99. (Alternatively, compile with -std\u003dgnu99 instead of -std\u003dc99.) See the man page:\n\nhttps://man7.org/linux/man-pages/man3/usleep.3.html",
      "revId": "4dca0f75f56955425add8c7a342c57f78e264433",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8023e87f_385e75d7",
        "filename": "av1/decoder/decodeframe.c",
        "patchSetId": 3
      },
      "lineNbr": 3276,
      "author": {
        "id": 9616
      },
      "writtenOn": "2022-07-11T17:57:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7506aa51_866a5850",
      "revId": "4dca0f75f56955425add8c7a342c57f78e264433",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
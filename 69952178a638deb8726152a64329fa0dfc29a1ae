{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3e4f7283_e4142f0d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5215
      },
      "writtenOn": "2020-12-23T19:41:40Z",
      "side": 1,
      "message": "Fast review from 10000 feet up-- I think this change needs a bit of redesign or refactoring. My main objections are the large amount of code duplication and lack of tests for code intended for working with libaom in external projects.",
      "revId": "69952178a638deb8726152a64329fa0dfc29a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c11fe8c_78c8d179",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2020-12-28T19:33:09Z",
      "side": 1,
      "message": "Bohan: Here are my preliminary review comments. Please note my comment in aom_codec.h marked with \"DESIGN\". Please take a look and think about how we can set decoder or encoder options (which may be fields in the decoder or encoder cfg struct or aom_codec_control flags) using key/value pairs.\n\nAnother issue I did not consider is that some aom_codec_control flags can be used after we have encoded or decoded some frames. I will describe this use case as \"dynamic\". We need to decide whether we need to support changing decoder/encoder settings dynamically using key/value pairs.",
      "revId": "69952178a638deb8726152a64329fa0dfc29a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf1238ba_808b8e00",
        "filename": "aom/aom_codec.h",
        "patchSetId": 5
      },
      "lineNbr": 152,
      "author": {
        "id": 9545
      },
      "writtenOn": "2020-12-28T19:33:09Z",
      "side": 1,
      "message": "Please bump AOM_CODEC_ABI_VERSION because we added a new public function in this header.",
      "revId": "69952178a638deb8726152a64329fa0dfc29a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ea6616b_1c51505c",
        "filename": "aom/aom_codec.h",
        "patchSetId": 5
      },
      "lineNbr": 493,
      "author": {
        "id": 9545
      },
      "writtenOn": "2020-12-28T19:33:09Z",
      "side": 1,
      "message": "Nit/optional: We probably should not refer to this new function as \"Control\". I guess the word \"Control\" comes from the old CL where this was implemented as an option for the aom_codec_control() function.",
      "revId": "69952178a638deb8726152a64329fa0dfc29a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e232a771_f9400258",
        "filename": "aom/aom_codec.h",
        "patchSetId": 5
      },
      "lineNbr": 502,
      "author": {
        "id": 9545
      },
      "writtenOn": "2020-12-28T19:33:09Z",
      "side": 1,
      "message": "Nit/optional: An alternative name for this parameter is \u0027name\u0027.",
      "revId": "69952178a638deb8726152a64329fa0dfc29a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf2d085d_479cbef8",
        "filename": "aom/aom_codec.h",
        "patchSetId": 5
      },
      "lineNbr": 504,
      "author": {
        "id": 9545
      },
      "writtenOn": "2020-12-28T19:33:09Z",
      "side": 1,
      "message": "This function does not need to output an error message in an output parameter. I don\u0027t think any other libaom public function does this.\n\nNote: As you documented in lines 497-498, an optional error message is available in ctx-\u003eerr_detail, although I am not familiar with that.",
      "revId": "69952178a638deb8726152a64329fa0dfc29a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f69e929_a1ee8f85",
        "filename": "aom/aom_codec.h",
        "patchSetId": 5
      },
      "lineNbr": 504,
      "author": {
        "id": 7525
      },
      "writtenOn": "2020-12-28T22:27:38Z",
      "side": 1,
      "message": "I was also debating on whether of not adding this parameter. The reason to add it was because I wanted to set ctx-\u003eerr_detail, but that would require memory allocation for the string, while other parts of the codec (as far as I know) just change to pointer to an internally allocated string, which results in potential memory leaks since the memory we allocate here is not freed.\n\nBut in this way, the memory is allocated out of libaom, and thus it is safe to just change the pointer to another address, since the memory should also be freed outside of libaom. \n\nNote ctx-\u003eerr_detail is a (const char *), so we cannot change the string directly, but have to change the pointer to a different location.",
      "parentUuid": "bf2d085d_479cbef8",
      "revId": "69952178a638deb8726152a64329fa0dfc29a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7af40ae9_ea277168",
        "filename": "aom/aom_codec.h",
        "patchSetId": 5
      },
      "lineNbr": 511,
      "author": {
        "id": 9545
      },
      "writtenOn": "2020-12-28T19:33:09Z",
      "side": 1,
      "message": "DESIGN: Some of the command-line arguments for aomdec or aomenc are not aom_codec_control flags. For example, see the parse_stream_params() function in apps/aomenc.c, which sets some fields of config-\u003ecfg in response to certain command-line arguments.\n\nTherefore, we also need a new public function that allows us to sets aom_codec_enc_cfg struct fields by using key and value, and similarly for the aom_codec_dec_cfg struct. (apps/aomdec.c only uses the command-line arguments to set cfg.threads, so the new function for the aom_codec_dec_cfg struct will be much less useful.)\n\nSo, maybe a better design is to define a new struct that represents the parsed key/value pairs, and then somehow pass this struct to aom_codec_dec_init() and aom_codec_enc_init(). To avoid adding a new input parameter to aom_codec_dec_init() and aom_codec_enc_init(), we can add a new field to the aom_codec_dec_cfg and aom_codec_enc_cfg structs.",
      "revId": "69952178a638deb8726152a64329fa0dfc29a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ff266e1_fdd10f65",
        "filename": "aom/aom_encoder.h",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 9545
      },
      "writtenOn": "2020-12-28T19:33:09Z",
      "side": 1,
      "message": "Revert this change. We should bump AOM_CODEC_ABI_VERSION instead.",
      "revId": "69952178a638deb8726152a64329fa0dfc29a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "454a2709_cea50cd8",
        "filename": "av1/av1.cmake",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 9545
      },
      "writtenOn": "2020-12-28T19:33:09Z",
      "side": 1,
      "message": "We probably should move the new files args_helper.h and args_helper.c to another directory, such as ${AOM_ROOT}/av1/common/.",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 18,
        "endChar": 46
      },
      "revId": "69952178a638deb8726152a64329fa0dfc29a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de8519fc_b54e6d2a",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 5
      },
      "lineNbr": 2767,
      "author": {
        "id": 5215
      },
      "writtenOn": "2020-12-23T19:41:40Z",
      "side": 1,
      "message": "This is copy/pasted from aomenc.c starting at line 415ish, no? Duplication does not seem necessary, can\u0027t much of this be shared if it is in its own module?",
      "revId": "69952178a638deb8726152a64329fa0dfc29a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57b0789d_88ab49c5",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 5
      },
      "lineNbr": 2767,
      "author": {
        "id": 7525
      },
      "writtenOn": "2020-12-23T20:06:15Z",
      "side": 1,
      "message": "Yes, it is basically copied from aomenc.c. I agree that it would be better to share this part instead of copying all these parameter definitions. Will work on this.",
      "parentUuid": "de8519fc_b54e6d2a",
      "revId": "69952178a638deb8726152a64329fa0dfc29a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0233e83_82c0d1ba",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 5
      },
      "lineNbr": 2768,
      "author": {
        "id": 5215
      },
      "writtenOn": "2020-12-23T19:41:40Z",
      "side": 1,
      "message": "It would also be nice to refactor this code out into its own module so that it can be tested: my understanding is that this code is being added to support use of libaom in other tools. Testing such code is typically a good practice-- downstream project users and maintainers are usually displeased when untested interface code breaks things.\n\nIn other words: FFmpeg users and developers would likely prefer that the libaom wrapper not break FFmpeg due to arg processing errors that could be caught on the aom side by adding some tests.",
      "revId": "69952178a638deb8726152a64329fa0dfc29a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44a6794e_c5b403d8",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 5
      },
      "lineNbr": 2768,
      "author": {
        "id": 7525
      },
      "writtenOn": "2020-12-23T20:06:15Z",
      "side": 1,
      "message": "That makes sense. I\u0027ll probably add some unit tests in a later CL then.",
      "parentUuid": "b0233e83_82c0d1ba",
      "revId": "69952178a638deb8726152a64329fa0dfc29a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01b4e509_0ace65e5",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 5
      },
      "lineNbr": 3169,
      "author": {
        "id": 9545
      },
      "writtenOn": "2020-12-28T19:33:09Z",
      "side": 1,
      "message": "IMPORTANT: Since aom_codec_set_option() can be called on either a decoder or an encoder, it needs to be defined in a file that is neutral to decoder and encoder. This file (av1/av1_cx_iface.c) is encoder only, so it is not the right place to define this function.",
      "revId": "69952178a638deb8726152a64329fa0dfc29a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c619fce_35e903b3",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 5
      },
      "lineNbr": 3169,
      "author": {
        "id": 7525
      },
      "writtenOn": "2020-12-28T22:27:38Z",
      "side": 1,
      "message": "Makes sense. Or maybe we should change the name to aom_codec_set_encoder_option, and add another function for the decoder separately?",
      "parentUuid": "01b4e509_0ace65e5",
      "revId": "69952178a638deb8726152a64329fa0dfc29a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d242c39_d4530cf1",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 5
      },
      "lineNbr": 3393,
      "author": {
        "id": 9545
      },
      "writtenOn": "2020-12-28T19:33:09Z",
      "side": 1,
      "message": "I suggest removing the err_msg output parameter and this entire if statement. This function does not need to return an error message. Also, it is risky to point codec_ctx-\u003eerr_detail and codec_ctx-\u003epriv-\u003eerr_detail to a buffer that is not owned by libaom, because libaom cannot control the lifetime of the error message buffer.",
      "range": {
        "startLine": 3388,
        "startChar": 0,
        "endLine": 3393,
        "endChar": 3
      },
      "revId": "69952178a638deb8726152a64329fa0dfc29a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b78ed036_806a1738",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 5
      },
      "lineNbr": 3393,
      "author": {
        "id": 7525
      },
      "writtenOn": "2020-12-28T22:27:38Z",
      "side": 1,
      "message": "As explained, the err_detail pointer is a const char *, and every time there is an error it is pointed to another memory location for the error string. I don\u0027t think it is directly used for allocating and freeing such buffers (?, since probably it is not a good idea to free a const pointer?). That is why I added this parameter, in order to avoid potential memory leaks.",
      "parentUuid": "2d242c39_d4530cf1",
      "range": {
        "startLine": 3388,
        "startChar": 0,
        "endLine": 3393,
        "endChar": 3
      },
      "revId": "69952178a638deb8726152a64329fa0dfc29a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c9a9f20_ac3e9c54",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 5
      },
      "lineNbr": 3400,
      "author": {
        "id": 9545
      },
      "writtenOn": "2020-12-28T19:33:09Z",
      "side": 1,
      "message": "Nit: In general we should omit \"else\" after a return statement. So this can be rewritten as (if we handle error first):\n\n  if (!match) {\n    codec_ctx-\u003eerr \u003d AOM_CODEC_INVALID_PARAM;\n    return AOM_CODEC_INVALID_PARAM;\n  }\n  return update_extra_cfg(ctx, \u0026extra_cfg);",
      "range": {
        "startLine": 3395,
        "startChar": 0,
        "endLine": 3400,
        "endChar": 3
      },
      "revId": "69952178a638deb8726152a64329fa0dfc29a1ae",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ca6714b8_d2131c19",
        "filename": "test/video_source.h",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-05-23T22:11:40Z",
      "side": 1,
      "message": "I remember gtest\u0027s ASSERT and EXPECT macros should only be called in the TEST functions.",
      "revId": "d7c2dad904a7e03a05a1e725923cb17d845d1503",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "471b23c1_345aedc3",
        "filename": "test/video_source.h",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-05-23T22:36:32Z",
      "side": 1,
      "message": "\u003e I remember gtest\u0027s ASSERT and EXPECT macros should only be called in the TEST functions.\n\nThanks for pointing that out. I wasn\u0027t paying attention to the fact that this was a static function.",
      "parentUuid": "ca6714b8_d2131c19",
      "revId": "d7c2dad904a7e03a05a1e725923cb17d845d1503",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1110e3c5_2938e03c",
        "filename": "test/video_source.h",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-05-21T05:02:18Z",
      "side": 1,
      "message": "I was going to send a fix, but this was improved recently.",
      "range": {
        "startLine": 82,
        "startChar": 44,
        "endLine": 82,
        "endChar": 73
      },
      "revId": "d7c2dad904a7e03a05a1e725923cb17d845d1503",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d7b3c4c_b751a02e",
        "filename": "test/video_source.h",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-05-23T22:11:40Z",
      "side": 1,
      "message": "Optional: Since we already use std::string, I think it is futile to avoid bad_alloc exceptions.",
      "revId": "d7c2dad904a7e03a05a1e725923cb17d845d1503",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0083cf3d_3537af3c",
        "filename": "test/video_source.h",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-05-23T22:36:32Z",
      "side": 1,
      "message": "\u003e Optional: Since we already use std::string, I think it is futile to avoid bad_alloc exceptions.\n\nTrue. I\u0027ll leave the pointer check in any case to avoid potential static analysis warnings.",
      "parentUuid": "1d7b3c4c_b751a02e",
      "revId": "d7c2dad904a7e03a05a1e725923cb17d845d1503",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3bd5d9cc_aa0e848d",
        "filename": "test/video_source.h",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-05-23T22:11:40Z",
      "side": 1,
      "message": "Nit: We can just call memcpy:\n  memcpy(temp_file_name.get(), name_template.c_str(), temp_file_name_size);\n\nAlso, we don\u0027t need to create the name_template variable. We can concatenate temp_dir and \"libaomtest.XXXXXX\" in the temp_file_name.get() buffer directly.",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 95,
        "endChar": 34
      },
      "revId": "d7c2dad904a7e03a05a1e725923cb17d845d1503",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "facda7b8_c7ca6305",
        "filename": "test/video_source.h",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-05-23T22:36:32Z",
      "side": 1,
      "message": "\u003e Nit: We can just call memcpy:\n\u003e   memcpy(temp_file_name.get(), name_template.c_str(), temp_file_name_size);\n\u003e \n\u003e Also, we don\u0027t need to create the name_template variable. We can concatenate temp_dir and \"libaomtest.XXXXXX\" in the temp_file_name.get() buffer directly.\n\nYes, the variable was mostly for calculating the allocation size.",
      "parentUuid": "3bd5d9cc_aa0e848d",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 95,
        "endChar": 34
      },
      "revId": "d7c2dad904a7e03a05a1e725923cb17d845d1503",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b4cd106_2a5ec760",
        "filename": "test/video_source.h",
        "patchSetId": 3
      },
      "lineNbr": 96,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-05-21T05:02:18Z",
      "side": 1,
      "message": "name_template.data() would be an option if this were built as c++17. const_cast\u0027ing the earlier version is considered undefined behavior.",
      "revId": "d7c2dad904a7e03a05a1e725923cb17d845d1503",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
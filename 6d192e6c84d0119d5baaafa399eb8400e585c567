{
  "comments": [
    {
      "key": {
        "uuid": "5b8908dc_c0928a5b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-10-14T00:39:08Z",
      "side": 1,
      "message": "Is it intended to alter the encoder output? (that is a separate question from whether or not it changes the bitstream)",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4a743e7_67b1bb69",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 7105
      },
      "writtenOn": "2017-10-14T03:00:09Z",
      "side": 1,
      "message": "No it\u0027s just to validate behavior",
      "parentUuid": "5b8908dc_c0928a5b",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dbc300c1_63276d31",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-10-17T00:30:56Z",
      "side": 1,
      "message": "Okay. It may be helpful to be specific about this. \"Does not alter the bitstream\" can be tested by decoding previously-encoded files to be sure they match, while \"Does not change encoder output\" in addition can be tested by encoding the same thing to see if the encoded streams match, also.",
      "parentUuid": "d4a743e7_67b1bb69",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6fa35636_ca96f075",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 7105
      },
      "writtenOn": "2017-10-17T03:46:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dbc300c1_63276d31",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff9e5f8a_8b60fda7",
        "filename": "av1/common/cfl.c",
        "patchSetId": 6
      },
      "lineNbr": 476,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-10-14T00:39:08Z",
      "side": 1,
      "message": "Please don\u0027t use globals like this. They\u0027re not re-entrant or thread-safe (consider multiple independent instances of an AV1 encoder running on separate threads). Put these variables alongside the sub8x8_val[] buffer in cfl_ctx.",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "083bf41b_b12fb8a9",
        "filename": "av1/common/cfl.c",
        "patchSetId": 6
      },
      "lineNbr": 476,
      "author": {
        "id": 7105
      },
      "writtenOn": "2017-10-14T03:00:09Z",
      "side": 1,
      "message": "You are totally right, I got sloppy. Looking back, I don\u0027t even know why I did that.",
      "parentUuid": "ff9e5f8a_8b60fda7",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "442448cf_dd33414f",
        "filename": "av1/common/cfl.c",
        "patchSetId": 6
      },
      "lineNbr": 487,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-10-14T00:39:08Z",
      "side": 1,
      "message": "I don\u0027t understand what this is trying to describe. What situations? What does it mean to \"reuse\" a part of the buffer, in terms of these checks?",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c286af8b_6cf80873",
        "filename": "av1/common/cfl.c",
        "patchSetId": 6
      },
      "lineNbr": 487,
      "author": {
        "id": 7105
      },
      "writtenOn": "2017-10-14T03:00:09Z",
      "side": 1,
      "message": "I rewrote this whole comment block. Hopefully it\u0027s easier to understand.",
      "parentUuid": "442448cf_dd33414f",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1feaad9_254284fe",
        "filename": "av1/common/cfl.c",
        "patchSetId": 6
      },
      "lineNbr": 501,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-10-14T00:39:08Z",
      "side": 1,
      "message": "You say this, but the actual buffer still appears to be CFL_SUB8X8_VAL_MI_SQUARE (16).",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97367807_45c68f98",
        "filename": "av1/common/cfl.c",
        "patchSetId": 6
      },
      "lineNbr": 501,
      "author": {
        "id": 7105
      },
      "writtenOn": "2017-10-14T03:00:09Z",
      "side": 1,
      "message": "Yes I use a constant stride of four. I added more details to this comment and moved it into the header.",
      "parentUuid": "e1feaad9_254284fe",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9e16461e_c56cfea3",
        "filename": "av1/common/cfl.c",
        "patchSetId": 6
      },
      "lineNbr": 503,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-10-14T00:39:08Z",
      "side": 1,
      "message": "I\u0027m a little unclear what these sizes are meant to represent, which makes it hard to check that they\u0027re producing the right values in all cases. I don\u0027t think they can be what you describe above, because it seems like 1x2 and 2x1 are possible (and even 1x1 with 4:4:4).\n\nIt would also be really great if it were clear here that b_width and b_height are the width/height of the chroma plane_bsize, and not the luma bsize. I had to work back up the callstack to verify that was true.",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1fad12ee_0fcd1756",
        "filename": "av1/common/cfl.c",
        "patchSetId": 6
      },
      "lineNbr": 503,
      "author": {
        "id": 7105
      },
      "writtenOn": "2017-10-14T03:00:09Z",
      "side": 1,
      "message": "I think you are highlighting another issue. The sub8x8 code should be used for 4:4:4. My understanding is that chroma_sub8x8 does not apply to 4:4:4 (please confirm with me that this is so)",
      "parentUuid": "9e16461e_c56cfea3",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b571fe0e_fdb01547",
        "filename": "av1/common/cfl.c",
        "patchSetId": 6
      },
      "lineNbr": 503,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-10-17T00:30:56Z",
      "side": 1,
      "message": "AFAIK, all of the chroma_sub8x8 code still runs, it\u0027s just that every chroma block is a \"chroma reference block\". I didn\u0027t see what would cause any of this code here to get skipped, but I may have missed it.\n\nIn any case, I\u0027d love to see this expressed in terms of other constructs we use elsewhere for chroma_sub8x8 code. See changes like https://aomedia-review.googlesource.com/27381 for an example of why.",
      "parentUuid": "1fad12ee_0fcd1756",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b2c4e11_4d1170c1",
        "filename": "av1/common/cfl.c",
        "patchSetId": 6
      },
      "lineNbr": 503,
      "author": {
        "id": 7105
      },
      "writtenOn": "2017-10-17T03:46:00Z",
      "side": 1,
      "message": "Not sure I understand. Let me know if val_block_size_wide[BLOCK_SIZES_ALL][2] and val_block_size_high[BLOCK_SIZES_ALL][2] are what you want.",
      "parentUuid": "b571fe0e_fdb01547",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dedb041a_46d72b6b",
        "filename": "av1/common/cfl.c",
        "patchSetId": 6
      },
      "lineNbr": 507,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-10-14T00:39:08Z",
      "side": 1,
      "message": "This all seems really complicated. What is driving this requirement?\n\nThe only picture I could come up with in my head where this mattered for the actual order transform blocks are traversed was an 8x16 partition that used 4x8 luma transforms (I\u0027m not sure we allow that, but I know it\u0027s been talked about making it possible to signal with var_tx), in which case it seems like this does the wrong thing.\n\nWhat cases were you thinking of?",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56d9dc28_4841d8c0",
        "filename": "av1/common/cfl.c",
        "patchSetId": 6
      },
      "lineNbr": 507,
      "author": {
        "id": 7105
      },
      "writtenOn": "2017-10-14T03:00:09Z",
      "side": 1,
      "message": "Because these are sub8x8 non-reference blocks, I need to know if the ordering is horizontal or vertical. When I traverse my storage validation buffer order this is important or else the counters don\u0027t match. A simple example of this issue is a BLOCK_4x8 with TX_4X4, this will lead to a vertical ordering whereas a BLOCK8x4 with TX_4X4 will lead to an horizontal ordering. There might be a simpler solution, I originally had two functions (one for horizontal and one for vertical) to reduced code duplication, I merged them into this complicated thing.",
      "parentUuid": "dedb041a_46d72b6b",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05a6ba0c_50ea3666",
        "filename": "av1/common/cfl.c",
        "patchSetId": 6
      },
      "lineNbr": 507,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-10-17T00:30:56Z",
      "side": 1,
      "message": "Okay, I didn\u0027t actually understand your example until I read the comment below about \"multiple sub8x8 blocks\".\n\nWhat you actually mean is you have _two_ 4x8 luma partitions with 4x4 TX blocks in them. Which may sound obvious in retrospect, but clearly wasn\u0027t to my Friday-afternoon brain. It might be helpful to have a comment that explains \"why\" rather than just declaring \"We must do X\" with no reason.\n\nIt also somewhat bothers me that with ext_partition_types bsize will not necessarily be the same for all of the luma partitions corresponding to a single chroma reference block, meaning \"is_horizontal\" can change for different calls to sub8x8_set_val() in the same buffer. I couldn\u0027t construct a case where that broke anything, but it feels very fragile. I don\u0027t have better suggestions.",
      "parentUuid": "56d9dc28_4841d8c0",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "292feb64_00212c54",
        "filename": "av1/common/cfl.c",
        "patchSetId": 6
      },
      "lineNbr": 518,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-10-14T00:39:08Z",
      "side": 1,
      "message": "Can\u0027t this just be tx_size_wide_unit[tx_size]*tx_size_high_unit[tx_size]? That seems a lot less fragile than what you\u0027re doing here.\n\nAlso, based on the name, I would expect num_val_blk to be val_width*val_height, but that\u0027s clearly not true.",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd06711c_3345a05e",
        "filename": "av1/common/cfl.c",
        "patchSetId": 6
      },
      "lineNbr": 518,
      "author": {
        "id": 7105
      },
      "writtenOn": "2017-10-14T03:00:09Z",
      "side": 1,
      "message": "tx_size_wide_unit[tx_size]*tx_size_high_unit[tx_size] is perfect. Also, I renamed num_val_blk to val_unit_len.",
      "parentUuid": "292feb64_00212c54",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6cad2f04_d69836f5",
        "filename": "av1/common/cfl.c",
        "patchSetId": 6
      },
      "lineNbr": 522,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-10-14T00:39:08Z",
      "side": 1,
      "message": "I\u0027m not sure what \"represents\" means here. What happens if this is merely incremented instead of adding num_val_blk?",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3af29aaf_fc2bdf3c",
        "filename": "av1/common/cfl.c",
        "patchSetId": 6
      },
      "lineNbr": 522,
      "author": {
        "id": 7105
      },
      "writtenOn": "2017-10-14T03:00:09Z",
      "side": 1,
      "message": "That\u0027s not needed anymore. In a previous version the counter increment was not shared and was determined based on the number of 4x4 in the block. That turned out to be way too hard to maintain.",
      "parentUuid": "6cad2f04_d69836f5",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05f8b82b_59b84f43",
        "filename": "av1/common/cfl.c",
        "patchSetId": 6
      },
      "lineNbr": 526,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-10-14T00:39:08Z",
      "side": 1,
      "message": "My spellchecker tells me that even in Canadian English, \"outer\" only has one t.",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "780bf6f6_add9c37f",
        "filename": "av1/common/cfl.c",
        "patchSetId": 6
      },
      "lineNbr": 526,
      "author": {
        "id": 7105
      },
      "writtenOn": "2017-10-14T03:00:09Z",
      "side": 1,
      "message": "Funny how inner requires two n whereas outer requires a single t. One would think it needs more ts to wrap around the two n of inner, I\u0027m over thinking this.",
      "parentUuid": "05f8b82b_59b84f43",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "852a00a1_1e3c13ec",
        "filename": "av1/common/cfl.c",
        "patchSetId": 6
      },
      "lineNbr": 530,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-10-14T00:39:08Z",
      "side": 1,
      "message": "I don\u0027t really understand what\u0027s going on here. You have a limit here defined as a 2D index with a stride, but you\u0027re adding to it, num_val_blk, which is a TX size area without a stride. Is this hard-coding the assumption that the inner dimension of the transform size is always 1? Is that the reason for swapping everything around based on is_horizontal?",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c57ff09a_c23f4945",
        "filename": "av1/common/cfl.c",
        "patchSetId": 6
      },
      "lineNbr": 530,
      "author": {
        "id": 7105
      },
      "writtenOn": "2017-10-14T03:00:09Z",
      "side": 1,
      "message": "As explained before, these are not TX blocks inside a partition, but multiple TX blocks inside multiple sub8x8 blocks.",
      "parentUuid": "852a00a1_1e3c13ec",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4c80100c_412b9053",
        "filename": "av1/common/cfl.c",
        "patchSetId": 6
      },
      "lineNbr": 542,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-10-14T00:39:08Z",
      "side": 1,
      "message": "I don\u0027t get why you subtract 1 from the value of stop, but add 1 almost everywhere you use it. Would it be easier to just change the \u003e to \u003e\u003d in the assert above?",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6096282_698b2d68",
        "filename": "av1/common/cfl.c",
        "patchSetId": 6
      },
      "lineNbr": 542,
      "author": {
        "id": 7105
      },
      "writtenOn": "2017-10-14T03:00:09Z",
      "side": 1,
      "message": "The issue I was having is that if I used stop as the exit criteria I could hit the outer break and never hit the inner break. I rewrote it to use a countdown instead.",
      "parentUuid": "4c80100c_412b9053",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e0829bf_ad515a8f",
        "filename": "av1/common/cfl.c",
        "patchSetId": 6
      },
      "lineNbr": 583,
      "author": {
        "id": 5075
      },
      "writtenOn": "2017-10-14T00:39:08Z",
      "side": 1,
      "message": "This seems like it\u0027s hard-coding that transform dimensions are at least half block-size dimensions? What happens with a 16x4 block with 4x4 transforms?",
      "revId": "6d192e6c84d0119d5baaafa399eb8400e585c567",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4771bd73_33eb90d6",
        "filename": "test/wiener_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1727,
      "author": {
        "id": 26732
      },
      "writtenOn": "2024-05-08T17:25:25Z",
      "side": 1,
      "message": "Not sure why static is needed.Why not just constexpr?",
      "range": {
        "startLine": 1727,
        "startChar": 2,
        "endLine": 1727,
        "endChar": 14
      },
      "revId": "2a34a3fc8b10accaf14a1430f9206a4f46cbd5b3",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5410d732_6834c5bb",
        "filename": "test/wiener_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1727,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-05-08T17:41:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4771bd73_33eb90d6",
      "range": {
        "startLine": 1727,
        "startChar": 2,
        "endLine": 1727,
        "endChar": 14
      },
      "revId": "2a34a3fc8b10accaf14a1430f9206a4f46cbd5b3",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce8c4695_fa498cf4",
        "filename": "test/wiener_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1731,
      "author": {
        "id": 26732
      },
      "writtenOn": "2024-05-08T17:25:25Z",
      "side": 1,
      "message": "Not sure why the cast is needed. buffer already looks to be uint8_t, maybe make buffer unsigned char?",
      "range": {
        "startLine": 1731,
        "startChar": 38,
        "endLine": 1731,
        "endChar": 50
      },
      "revId": "2a34a3fc8b10accaf14a1430f9206a4f46cbd5b3",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5abfc77f_819100ba",
        "filename": "test/wiener_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1731,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-05-08T17:41:45Z",
      "side": 1,
      "message": "The important part of this cast is to cast away the `const`. The data type is actually the same (it assumed `uint8_t` is a typedef of `unsigned char`). I made the buffer `unsigned char` as you suggested.\n\nThe reason we need to cast away the `const` is that the `aom_image_t` struct is used for both reading and writing, so its buffer points have the non-const `unsigned char *` type.",
      "parentUuid": "ce8c4695_fa498cf4",
      "range": {
        "startLine": 1731,
        "startChar": 38,
        "endLine": 1731,
        "endChar": 50
      },
      "revId": "2a34a3fc8b10accaf14a1430f9206a4f46cbd5b3",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be034911_ed952634",
        "filename": "test/wiener_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1793,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-05-08T01:45:14Z",
      "side": 1,
      "message": "If this was the sequence then it makes sense. The extra flushes aren\u0027t technically necessary without a frame encode in between.",
      "revId": "2a34a3fc8b10accaf14a1430f9206a4f46cbd5b3",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e47e32b4_2d38eeb2",
        "filename": "test/wiener_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1793,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-05-08T16:39:14Z",
      "side": 1,
      "message": "This test uses the default `cfg.g_lag_in_frames` value of 35 in `AOM_USAGE_GOOD_QUALITY` mode, so the encoder doesn not output the encoded packets until we flush the encoder.\n\nThis test checks for the current behavior of libaom, so the test does \"over-check\" and ideally should be rewritten to allow for other behaviors that also meet the API specification of `aom_codec_encode()`:\n\n```\n * When the last frame has been passed to the encoder, this function should\n * continue to be called in a loop, with the img parameter set to NULL. This\n * will signal the end-of-stream condition to the encoder and allow it to\n * encode any held buffers. Encoding is complete when aom_codec_encode() is\n * called with img set to NULL and aom_codec_get_cx_data() returns no data.\n```\n\nThe code in libavif flushes the encoder in a loop as suggested by this comment. This test unrolls that loop. As this test shows, that loop has three iterations. The first and second iterations each output a single encoded packet. The third iteration outputs nothing, which terminates the loop.",
      "parentUuid": "be034911_ed952634",
      "revId": "2a34a3fc8b10accaf14a1430f9206a4f46cbd5b3",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "41930e1b_9b50f666",
        "filename": "test/wiener_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1793,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-05-08T20:18:31Z",
      "side": 1,
      "message": "\u003e This test uses the default `cfg.g_lag_in_frames` value of 35 in `AOM_USAGE_GOOD_QUALITY` mode, so the encoder doesn not output the encoded packets until we flush the encoder.\n\u003e \n\u003e This test checks for the current behavior of libaom, so the test does \"over-check\" and ideally should be rewritten to allow for other behaviors that also meet the API specification of `aom_codec_encode()`:\n\u003e \n\u003e ```\n\u003e  * When the last frame has been passed to the encoder, this function should\n\u003e  * continue to be called in a loop, with the img parameter set to NULL. This\n\u003e  * will signal the end-of-stream condition to the encoder and allow it to\n\u003e  * encode any held buffers. Encoding is complete when aom_codec_encode() is\n\u003e  * called with img set to NULL and aom_codec_get_cx_data() returns no data.\n\u003e ```\n\u003e \n\u003e The code in libavif flushes the encoder in a loop as suggested by this comment. This test unrolls that loop. As this test shows, that loop has three iterations. The first and second iterations each output a single encoded packet. The third iteration outputs nothing, which terminates the loop.\n\nYou\u0027re right, I forgot about this implementation detail.",
      "parentUuid": "e47e32b4_2d38eeb2",
      "revId": "2a34a3fc8b10accaf14a1430f9206a4f46cbd5b3",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cd30fc3d_abda3dd6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 15030
      },
      "writtenOn": "2021-06-04T13:46:35Z",
      "side": 1,
      "message": "\nHi Yunqing,\nThis patch adds a speed feature that disables reconstruction in first pass for speed 5 and 6. When the SF is enabled, the source frame is used instead of reconstructed frame, for intra and inter prediction.\n\nPlease find the detailed borg results for speed 5 and 6 below.\n\n         |            | Instruction Count |        BD-Rate Loss(%)       |\ncpu-used | Resolution |    Reduction(%)   | avg.psnr  ovr.psnr   ssim    |\n-------- | ---------- | ----------------- | --------  --------  -------- |\n   5     |  LOW RES   |       1.559       |  0.0606    0.0774    0.1002  |\n   5     |  MID RES   |       2.326       | -0.1406   -0.0869   -0.2944  |\n   5     |  HD RES    |       2.623       |  0.1420    0.1970    0.1944  |\n   5     |  Average   |       2.017       |  0.0265    0.0658    0.0134  |\n   \n         |            | Instruction Count |        BD-Rate Loss(%)       |\ncpu-used | Resolution |    Reduction(%)   | avg.psnr  ovr.psnr   ssim    |\n-------- | ---------- | ----------------- | --------  --------  -------- |\n   6     |  LOW RES   |       2.361       |  0.0732    0.1443   0.1594   |\n   6     |  MID RES   |       3.411       | -0.1167   -0.0999  -0.1566   |\n   6     |  HD RES    |       3.892       | -0.0496    0.0199  -0.0051   |\n   6     |  Average   |       3.006       | -0.0198    0.0349   0.0167   |\n   \n\n\nIn the commit message, BD rate impact column: [+] sign is for BD-Rate drop [-] sign is for BD-Rate improvement.\nThe instruction count reduction specified has been measured using command: $ perf stat -e instructions:u ./aomenc … \nFor other speed levels, this is a bit-exact change with no impact on speed (verified locally on a few test cases). \n\nWe have verified that the first pass unit test merged recently, passes as well. Please review the patch.\n\n   ",
      "revId": "0258d5753e91d02a714c8660716eafd1edaf5ea7",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c1f645b0_637481be",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 5185
      },
      "writtenOn": "2021-06-04T17:12:00Z",
      "side": 1,
      "message": "Good speedup.",
      "revId": "0258d5753e91d02a714c8660716eafd1edaf5ea7",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ef4f281_df7b4365",
        "filename": "av1/encoder/firstpass.c",
        "patchSetId": 12
      },
      "lineNbr": 394,
      "author": {
        "id": 5185
      },
      "writtenOn": "2021-06-04T17:12:00Z",
      "side": 1,
      "message": "This function name can be changed - looks like this only calculated diff block, but didn\u0027t calculate error?",
      "range": {
        "startLine": 394,
        "startChar": 12,
        "endLine": 394,
        "endChar": 48
      },
      "revId": "0258d5753e91d02a714c8660716eafd1edaf5ea7",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f43ddb1b_442cab86",
        "filename": "av1/encoder/firstpass.c",
        "patchSetId": 12
      },
      "lineNbr": 394,
      "author": {
        "id": 15030
      },
      "writtenOn": "2021-06-07T15:43:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8ef4f281_df7b4365",
      "range": {
        "startLine": 394,
        "startChar": 12,
        "endLine": 394,
        "endChar": 48
      },
      "revId": "0258d5753e91d02a714c8660716eafd1edaf5ea7",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e539fd58_c98f3084",
        "filename": "av1/encoder/firstpass.c",
        "patchSetId": 12
      },
      "lineNbr": 440,
      "author": {
        "id": 5185
      },
      "writtenOn": "2021-06-04T17:12:00Z",
      "side": 1,
      "message": "When disable_recon is true, can reference frame point to source frame directly instead of getting a copy? This could further speed up 1st pass.",
      "range": {
        "startLine": 440,
        "startChar": 2,
        "endLine": 440,
        "endChar": 11
      },
      "revId": "0258d5753e91d02a714c8660716eafd1edaf5ea7",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59c651f7_c5dca1cf",
        "filename": "av1/encoder/firstpass.c",
        "patchSetId": 12
      },
      "lineNbr": 440,
      "author": {
        "id": 15030
      },
      "writtenOn": "2021-06-07T15:43:04Z",
      "side": 1,
      "message": "Hi Yunqing,\nAs per our understanding, the golden reference frame (GOLDEN_FRAME ) in first pass, usually points to the second last frame. In some cases , it could go up to 4 frames in the past. For frame number x, GOLDEN_FRAME will point x – 2, x- 3 or x- 4. Since the maximum number of past frames available in lookahead context(lookahead_ctx) will be MAX_PRE_FRAMES ( which is 1 currently), the source frame  corresponding to the GOLDEN_FRAME, will not be available. Increasing MAX_PRE_FRAMES  would lead to increase in memory of lookahead queue, in the case of first pass and single pass using LAP. So, we did not explore / pursue this option further. Hence , we are copying the source to the recon buffer at block level. \nPlease let us know your thoughts on our approach.",
      "parentUuid": "e539fd58_c98f3084",
      "range": {
        "startLine": 440,
        "startChar": 2,
        "endLine": 440,
        "endChar": 11
      },
      "revId": "0258d5753e91d02a714c8660716eafd1edaf5ea7",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
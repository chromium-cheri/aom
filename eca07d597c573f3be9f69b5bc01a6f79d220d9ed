{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2bd67eed_66489041",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-09-07T02:47:42Z",
      "side": 1,
      "message": "LGTM.",
      "revId": "eca07d597c573f3be9f69b5bc01a6f79d220d9ed",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed717256_39e7ce34",
        "filename": "aom_dsp/simd/v64_intrinsics_x86.h",
        "patchSetId": 1
      },
      "lineNbr": 185,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-09-07T02:23:34Z",
      "side": 1,
      "message": "this was one of the worst examples:\n\n```\n  return v64_from_16(ah \u003e 65535 ? 65535\n                     : ah \u003c 0   ? 0\n                                : ah,\n                     al \u003e 65535 ? 65535\n                     : al \u003c 0   ? 0\n                                : al,\n                     bh \u003e 65535 ? 65535\n                     : bh \u003c 0   ? 0\n                                : bh,\n                     bl \u003e 65535 ? 65535\n                     : bl \u003c 0   ? 0\n                                : bl);\n\n```\n\nAn alternative would be to add a dependency on aom_dsp/aom_dsp_common.h and use clamp(). These have been treated as somewhat independent headers, but I\u0027m ok either way.",
      "revId": "eca07d597c573f3be9f69b5bc01a6f79d220d9ed",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a544ca2_e7ce0563",
        "filename": "aom_dsp/simd/v64_intrinsics_x86.h",
        "patchSetId": 1
      },
      "lineNbr": 185,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-09-07T02:47:42Z",
      "side": 1,
      "message": "I think it is also okay to use clang-format off / clang-format on here.\n\nOr save the results of these expressions in local variables.",
      "parentUuid": "ed717256_39e7ce34",
      "revId": "eca07d597c573f3be9f69b5bc01a6f79d220d9ed",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "795382da_92674ffc",
        "filename": "aom_dsp/simd/v64_intrinsics_x86.h",
        "patchSetId": 1
      },
      "lineNbr": 185,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-09-07T05:07:06Z",
      "side": 1,
      "message": "\u003e I think it is also okay to use clang-format off / clang-format on here.\n\u003e \n\nI\u0027m not all that partial to clang-format off except around tables, but we can go in that direction. I\u0027ll leave this open for now and when I post the clang-format update I\u0027ll add the lines.\n\n\u003e Or save the results of these expressions in local variables.\n\nIn a variable they may still be broken up in the same way.",
      "parentUuid": "8a544ca2_e7ce0563",
      "revId": "eca07d597c573f3be9f69b5bc01a6f79d220d9ed",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89053d09_64d28686",
        "filename": "aom_dsp/simd/v64_intrinsics_x86.h",
        "patchSetId": 1
      },
      "lineNbr": 185,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-09-07T16:03:42Z",
      "side": 1,
      "message": "I found more expressions like this in aom_dsp/simd/v64_intrinsics_c.h, e.g.,\n\n```\nSIMD_INLINE c_v64 c_v64_sadd_s16(c_v64 a, c_v64 b) {\n  c_v64 t;\n  int c;\n  for (c \u003d 0; c \u003c 4; c++)\n    t.s16[c] \u003d (int32_t)a.s16[c] + (int32_t)b.s16[c] \u003e 32767\n                   ? 32767\n                   : (int32_t)a.s16[c] + (int32_t)b.s16[c] \u003c -32768\n                         ? -32768\n                         : (int32_t)a.s16[c] + (int32_t)b.s16[c];\n  return t;\n}\n\n...\n\nSIMD_INLINE c_v64 c_v64_pack_s32_u16(c_v64 a, c_v64 b) {\n  c_v64 t;\n  if (CONFIG_BIG_ENDIAN) {\n    c_v64 u \u003d a;\n    a \u003d b;\n    b \u003d u;\n  }\n  t.u16[3] \u003d a.s32[1] \u003e 65535 ? 65535 : a.s32[1] \u003c 0 ? 0 : a.s32[1];\n  t.u16[2] \u003d a.s32[0] \u003e 65535 ? 65535 : a.s32[0] \u003c 0 ? 0 : a.s32[0];\n  t.u16[1] \u003d b.s32[1] \u003e 65535 ? 65535 : b.s32[1] \u003c 0 ? 0 : b.s32[1];\n  t.u16[0] \u003d b.s32[0] \u003e 65535 ? 65535 : b.s32[0] \u003c 0 ? 0 : b.s32[0];\n  return t;\n}\n```\n\nI suggest we define a SIMD_CLAMP macro in either aom_dsp/aom_simd.h or aom_dsp/aom_simd_inline.h and use SIMD_CLAMP in these files.\n\nWe can also report this example to the maintainers of clang-format and ask for their suggestions. Although the expression `ah \u003e 65535 ? 65535 : ah \u003c 0 ? 0 : ah` looks complicated at first, it is equivalent to the familiar if-else-if-else structure, so it\u0027s easy to learn to parse it without any parentheses or formatting aid. Maybe there is a configuration setting we can set in our clang-format style file.",
      "parentUuid": "795382da_92674ffc",
      "revId": "eca07d597c573f3be9f69b5bc01a6f79d220d9ed",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da261554_1b54c44c",
        "filename": "aom_dsp/simd/v64_intrinsics_x86.h",
        "patchSetId": 1
      },
      "lineNbr": 185,
      "author": {
        "id": 5020
      },
      "writtenOn": "2022-09-07T17:16:04Z",
      "side": 1,
      "message": "\u003e I found more expressions like this in aom_dsp/simd/v64_intrinsics_c.h, e.g.,\n\u003e \n\u003e ```\n\u003e SIMD_INLINE c_v64 c_v64_sadd_s16(c_v64 a, c_v64 b) {\n\u003e   c_v64 t;\n\u003e   int c;\n\u003e   for (c \u003d 0; c \u003c 4; c++)\n\u003e     t.s16[c] \u003d (int32_t)a.s16[c] + (int32_t)b.s16[c] \u003e 32767\n\u003e                    ? 32767\n\u003e                    : (int32_t)a.s16[c] + (int32_t)b.s16[c] \u003c -32768\n\u003e                          ? -32768\n\u003e                          : (int32_t)a.s16[c] + (int32_t)b.s16[c];\n\u003e   return t;\n\u003e }\n\u003e \n\u003e ...\n\u003e \n\u003e SIMD_INLINE c_v64 c_v64_pack_s32_u16(c_v64 a, c_v64 b) {\n\u003e   c_v64 t;\n\u003e   if (CONFIG_BIG_ENDIAN) {\n\u003e     c_v64 u \u003d a;\n\u003e     a \u003d b;\n\u003e     b \u003d u;\n\u003e   }\n\u003e   t.u16[3] \u003d a.s32[1] \u003e 65535 ? 65535 : a.s32[1] \u003c 0 ? 0 : a.s32[1];\n\u003e   t.u16[2] \u003d a.s32[0] \u003e 65535 ? 65535 : a.s32[0] \u003c 0 ? 0 : a.s32[0];\n\u003e   t.u16[1] \u003d b.s32[1] \u003e 65535 ? 65535 : b.s32[1] \u003c 0 ? 0 : b.s32[1];\n\u003e   t.u16[0] \u003d b.s32[0] \u003e 65535 ? 65535 : b.s32[0] \u003c 0 ? 0 : b.s32[0];\n\u003e   return t;\n\u003e }\n\u003e ```\n\u003e \n\u003e I suggest we define a SIMD_CLAMP macro in either aom_dsp/aom_simd.h or aom_dsp/aom_simd_inline.h and use SIMD_CLAMP in these files.\n\u003e \n\u003e We can also report this example to the maintainers of clang-format and ask for their suggestions. Although the expression `ah \u003e 65535 ? 65535 : ah \u003c 0 ? 0 : ah` looks complicated at first, it is equivalent to the familiar if-else-if-else structure, so it\u0027s easy to learn to parse it without any parentheses or formatting aid. Maybe there is a configuration setting we can set in our clang-format style file.\n\nThe only one that mentions ternaries is: BreakBeforeTernaryOperators:\n\n```\nreturn v64_from_16(ah \u003e 65535 ? 65535 :\n                   ah \u003c 0     ? 0 :\n                                ah,\n                   al \u003e 65535 ? 65535 :\n                   al \u003c 0     ? 0 :\n                                al,\n                   bh \u003e 65535 ? 65535 :\n                   bh \u003c 0     ? 0 :\n                                bh,\n                   bl \u003e 65535 ? 65535 :\n                   bl \u003c 0     ? 0 :\n                                bl);\n```",
      "parentUuid": "89053d09_64d28686",
      "revId": "eca07d597c573f3be9f69b5bc01a6f79d220d9ed",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
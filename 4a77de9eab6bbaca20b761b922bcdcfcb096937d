{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8c7f0241_73973639",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-04-07T19:14:07Z",
      "side": 1,
      "message": "LGTM.",
      "revId": "4a77de9eab6bbaca20b761b922bcdcfcb096937d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a937da64_7c88134f",
        "filename": "aom_dsp/arm/avg_pred_neon.c",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-04-07T18:39:48Z",
      "side": 1,
      "message": "Use of this function is more motivation to check the usefulness of the `stride \u003d\u003d 4` test. I have a feeling that it will only be true in the unit tests and not in other cases.",
      "revId": "4a77de9eab6bbaca20b761b922bcdcfcb096937d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de498655_a468f2e1",
        "filename": "aom_dsp/arm/avg_pred_neon.c",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-04-07T19:54:28Z",
      "side": 1,
      "message": "Are you suggesting we can remove the `stride \u003d\u003d 4` special case at the beginning of the `load_unaligned_u8q()` function?\n\n```\n// Load 4 sets of 4 bytes when alignment is not guaranteed.\nstatic INLINE uint8x16_t load_unaligned_u8q(const uint8_t *buf, int stride) {\n  uint32_t a;\n  uint32x4_t a_u32;\n  if (stride \u003d\u003d 4) return vld1q_u8(buf);\n  memcpy(\u0026a, buf, 4);\n  buf +\u003d stride;\n  a_u32 \u003d vdupq_n_u32(a);\n  ...\n  memcpy(\u0026a, buf, 4);\n  a_u32 \u003d vsetq_lane_u32(a, a_u32, 3);\n  return vreinterpretq_u8_u32(a_u32);\n}\n```",
      "parentUuid": "a937da64_7c88134f",
      "revId": "4a77de9eab6bbaca20b761b922bcdcfcb096937d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "77905198_30b0dd5e",
        "filename": "aom_dsp/arm/avg_pred_neon.c",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-04-07T20:46:24Z",
      "side": 1,
      "message": "\u003e Are you suggesting we can remove the `stride \u003d\u003d 4` special case at the beginning of the `load_unaligned_u8q()` function?\n\u003e \n\nYes. Sorry that wasn\u0027t clear.\n\n\u003e ```\n\u003e // Load 4 sets of 4 bytes when alignment is not guaranteed.\n\u003e static INLINE uint8x16_t load_unaligned_u8q(const uint8_t *buf, int stride) {\n\u003e   uint32_t a;\n\u003e   uint32x4_t a_u32;\n\u003e   if (stride \u003d\u003d 4) return vld1q_u8(buf);\n\u003e   memcpy(\u0026a, buf, 4);\n\u003e   buf +\u003d stride;\n\u003e   a_u32 \u003d vdupq_n_u32(a);\n\u003e   ...\n\u003e   memcpy(\u0026a, buf, 4);\n\u003e   a_u32 \u003d vsetq_lane_u32(a, a_u32, 3);\n\u003e   return vreinterpretq_u8_u32(a_u32);\n\u003e }\n\u003e ```",
      "parentUuid": "de498655_a468f2e1",
      "revId": "4a77de9eab6bbaca20b761b922bcdcfcb096937d",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "4a77de9eab6bbaca20b761b922bcdcfcb096937d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "4a77de9eab6bbaca20b761b922bcdcfcb096937d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "4a77de9eab6bbaca20b761b922bcdcfcb096937d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
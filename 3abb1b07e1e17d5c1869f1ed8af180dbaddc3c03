{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7efec5dc_18efb787",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-18T03:39:47Z",
      "side": 1,
      "message": "Cheng: Thanks for the fix. I suggest three small changes.",
      "revId": "3abb1b07e1e17d5c1869f1ed8af180dbaddc3c03",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cdab7acc_29504ed3",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 7
      },
      "lineNbr": 1485,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-18T03:39:47Z",
      "side": 1,
      "message": "I modified the code here before to consider `oxcf-\u003efrm_dim_cfg.forced_max_frame_width/height`. This CL shows that I missed the fact that the max frame width and height in the sequence header OBU are not determined at this point but rather in the first aom_codec_encode() call, so a later `aom_codec_enc_config_set()` call may still change the frame size. I probably should redo my previous fixes given the new understanding.",
      "revId": "3abb1b07e1e17d5c1869f1ed8af180dbaddc3c03",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63b14984_f83b5a0b",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 7
      },
      "lineNbr": 1490,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-18T03:39:47Z",
      "side": 1,
      "message": "Nit: The expression `(max_mi_rows * max_mi_cols) \u003e\u003e 2` appears twice. It would be good to save its value in a local variable.\n\n```\n  const int consec_zero_mv_alloc_size \u003d (max_mi_rows * max_mi_cols) \u003e\u003e 2;\n  CHECK_MEM_ERROR(cm, cpi-\u003econsec_zero_mv,\n                  aom_calloc(consec_zero_mv_alloc_size,\n                             sizeof(*cpi-\u003econsec_zero_mv)));\n  cpi-\u003econsec_zero_mv_alloc_size \u003d consec_zero_mv_alloc_size;\n```",
      "revId": "3abb1b07e1e17d5c1869f1ed8af180dbaddc3c03",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80bb4cc9_c845decf",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 7
      },
      "lineNbr": 1507,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-18T03:39:47Z",
      "side": 1,
      "message": "These two buffers (and the VMAP, BUTTERAUGLI, and SALIENCY_MAP buffers below) also depend on the frame size. We should find out if they also need to be reallocated on frame size changes.",
      "revId": "3abb1b07e1e17d5c1869f1ed8af180dbaddc3c03",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56ab37c5_3abf9461",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 7
      },
      "lineNbr": 2570,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-18T03:39:47Z",
      "side": 1,
      "message": "Add the following after this line:\n\n```\n      cpi-\u003econsec_zero_mv_alloc_size \u003d 0;\n```\n\nThe reason is that CHECK_MEM_ERROR will does a long jump if `cpi-\u003econsec_zero_mv` is NULL. In that case we want `cpi-\u003econsec_zero_mv_alloc_size` to be 0 before we do the long jump.",
      "revId": "3abb1b07e1e17d5c1869f1ed8af180dbaddc3c03",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59bbedda_38d64050",
        "filename": "av1/encoder/encoder.c",
        "patchSetId": 7
      },
      "lineNbr": 2576,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-10-18T03:39:47Z",
      "side": 1,
      "message": "Could you replace the expression `((cm-\u003emi_params.mi_rows * cm-\u003emi_params.mi_cols) \u003e\u003e 2)` with `current_size`?",
      "revId": "3abb1b07e1e17d5c1869f1ed8af180dbaddc3c03",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
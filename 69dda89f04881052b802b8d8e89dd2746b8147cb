{
  "comments": [
    {
      "key": {
        "uuid": "cdb45a51_ef15551b",
        "filename": "av1/encoder/temporal_filter.c",
        "patchSetId": 3
      },
      "lineNbr": 647,
      "author": {
        "id": 6585
      },
      "writtenOn": "2020-04-14T01:11:00Z",
      "side": 1,
      "message": "QP (quantization parameter) --\u003e qindex --\u003e q (q_factor here).\nLibaom has conversion of these three different quantization related factors.\nq_factor is \"q\", used elsewhere in libaom.\n\nOption:\nYou could add a basic comment here.",
      "range": {
        "startLine": 647,
        "startChar": 0,
        "endLine": 647,
        "endChar": 35
      },
      "revId": "69dda89f04881052b802b8d8e89dd2746b8147cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e908ea63_0dace847",
        "filename": "av1/encoder/temporal_filter.c",
        "patchSetId": 3
      },
      "lineNbr": 647,
      "author": {
        "id": 15195
      },
      "writtenOn": "2020-04-14T02:48:58Z",
      "side": 1,
      "message": "You are right. `q` is used here. But I don\u0027t know the concrete name of `q`. I think using an alphabet as the name of arguments is a bad habit. Any advice about the name?",
      "parentUuid": "cdb45a51_ef15551b",
      "range": {
        "startLine": 647,
        "startChar": 0,
        "endLine": 647,
        "endChar": 35
      },
      "revId": "69dda89f04881052b802b8d8e89dd2746b8147cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16e1f63f_d9ca8eb6",
        "filename": "av1/encoder/temporal_filter.c",
        "patchSetId": 3
      },
      "lineNbr": 647,
      "author": {
        "id": 6585
      },
      "writtenOn": "2020-04-14T03:48:06Z",
      "side": 1,
      "message": "q_factor is good to me.\nYou can just add a comment, this is q.",
      "parentUuid": "e908ea63_0dace847",
      "range": {
        "startLine": 647,
        "startChar": 0,
        "endLine": 647,
        "endChar": 35
      },
      "revId": "69dda89f04881052b802b8d8e89dd2746b8147cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb199704_b4803bf3",
        "filename": "av1/encoder/temporal_filter.c",
        "patchSetId": 3
      },
      "lineNbr": 750,
      "author": {
        "id": 6585
      },
      "writtenOn": "2020-04-14T01:11:00Z",
      "side": 1,
      "message": "why divided by 256? Is this a parameter to tune? Or it has some specific meaning?",
      "range": {
        "startLine": 750,
        "startChar": 64,
        "endLine": 750,
        "endChar": 69
      },
      "revId": "69dda89f04881052b802b8d8e89dd2746b8147cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96c32bf9_d98fad5e",
        "filename": "av1/encoder/temporal_filter.c",
        "patchSetId": 3
      },
      "lineNbr": 750,
      "author": {
        "id": 15195
      },
      "writtenOn": "2020-04-14T02:48:58Z",
      "side": 1,
      "message": "It is pow(q/16, 2). Will revise it in the next version since I am still doing further optimization of the formula.",
      "parentUuid": "eb199704_b4803bf3",
      "range": {
        "startLine": 750,
        "startChar": 64,
        "endLine": 750,
        "endChar": 69
      },
      "revId": "69dda89f04881052b802b8d8e89dd2746b8147cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49349bc4_80d2a522",
        "filename": "av1/encoder/temporal_filter.c",
        "patchSetId": 3
      },
      "lineNbr": 750,
      "author": {
        "id": 6585
      },
      "writtenOn": "2020-04-14T03:48:06Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "96c32bf9_d98fad5e",
      "range": {
        "startLine": 750,
        "startChar": 64,
        "endLine": 750,
        "endChar": 69
      },
      "revId": "69dda89f04881052b802b8d8e89dd2746b8147cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "396b8527_411eb86a",
        "filename": "av1/encoder/temporal_filter.c",
        "patchSetId": 3
      },
      "lineNbr": 1033,
      "author": {
        "id": 6585
      },
      "writtenOn": "2020-04-14T01:11:00Z",
      "side": 1,
      "message": "It could be:\nconst FRAME_TYPE frame_type \u003d cpi-\u003ecommon.current_frame.frame_type;",
      "range": {
        "startLine": 1031,
        "startChar": 10,
        "endLine": 1033,
        "endChar": 71
      },
      "revId": "69dda89f04881052b802b8d8e89dd2746b8147cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2bfc7a4f_f9efc577",
        "filename": "av1/encoder/temporal_filter.c",
        "patchSetId": 3
      },
      "lineNbr": 1033,
      "author": {
        "id": 15195
      },
      "writtenOn": "2020-04-14T02:48:58Z",
      "side": 1,
      "message": "I am not familiar with the frame type API. I just copy it from Line 1158. If they are the same, I can replace them without running a new borg test.",
      "parentUuid": "396b8527_411eb86a",
      "range": {
        "startLine": 1031,
        "startChar": 10,
        "endLine": 1033,
        "endChar": 71
      },
      "revId": "69dda89f04881052b802b8d8e89dd2746b8147cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91fe49b3_1bba30fb",
        "filename": "av1/encoder/temporal_filter.c",
        "patchSetId": 3
      },
      "lineNbr": 1033,
      "author": {
        "id": 6585
      },
      "writtenOn": "2020-04-14T03:48:06Z",
      "side": 1,
      "message": "They are the same. You can replace it.",
      "parentUuid": "2bfc7a4f_f9efc577",
      "range": {
        "startLine": 1031,
        "startChar": 10,
        "endLine": 1033,
        "endChar": 71
      },
      "revId": "69dda89f04881052b802b8d8e89dd2746b8147cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5fb3bf5_40143847",
        "filename": "av1/encoder/temporal_filter.c",
        "patchSetId": 3
      },
      "lineNbr": 1033,
      "author": {
        "id": 6585
      },
      "writtenOn": "2020-04-14T03:57:15Z",
      "side": 1,
      "message": "Well, let\u0027s keep it safe. Do not change it for now.",
      "parentUuid": "91fe49b3_1bba30fb",
      "range": {
        "startLine": 1031,
        "startChar": 10,
        "endLine": 1033,
        "endChar": 71
      },
      "revId": "69dda89f04881052b802b8d8e89dd2746b8147cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0",
      "unresolved": false
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cb76a121_0fe0ec79",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-01-23T23:38:53Z",
      "side": 1,
      "message": "LGTM.",
      "revId": "dfca5c90edc72abae400513e00068839d5617c7f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df896cf3_44f015dd",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 1
      },
      "lineNbr": 772,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-01-23T23:38:53Z",
      "side": 1,
      "message": "It should be easy to add a test for this check.",
      "revId": "dfca5c90edc72abae400513e00068839d5617c7f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c3c3962_57a48382",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 1
      },
      "lineNbr": 772,
      "author": {
        "id": 9823
      },
      "writtenOn": "2023-01-24T00:33:08Z",
      "side": 1,
      "message": "I just noticed that our encoder cannot handle parameters of the form \"--foo\" with its set_option API. Let me fix that first before adding a test.",
      "parentUuid": "df896cf3_44f015dd",
      "revId": "dfca5c90edc72abae400513e00068839d5617c7f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c0f8fef_18b7f425",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 1
      },
      "lineNbr": 772,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-01-24T01:29:30Z",
      "side": 1,
      "message": "I am afraid that you misunderstood my request. You just need to add a simple test like this:\n\n```\ndiff --git a/test/encode_api_test.cc b/test/encode_api_test.cc\nindex 830388043..ca62f91ac 100644\n--- a/test/encode_api_test.cc\n+++ b/test/encode_api_test.cc\n@@ -106,6 +106,18 @@ TEST(EncodeAPI, SetSFrameOnFirstFrame) {\n   EXPECT_EQ(aom_codec_destroy(\u0026enc), AOM_CODEC_OK);\n }\n \n+TEST(EncodeAPI, MonochromeInProfile1) {\n+  aom_codec_iface_t *iface \u003d aom_codec_av1_cx();\n+  aom_codec_enc_cfg_t cfg;\n+  ASSERT_EQ(aom_codec_enc_config_default(iface, \u0026cfg, kUsage), AOM_CODEC_OK);\n+  cfg.g_w \u003d 128;\n+  cfg.g_h \u003d 128;\n+  cfg.g_profile \u003d 1;\n+  cfg.monochrome \u003d 1;\n+  aom_codec_ctx_t enc;\n+  ASSERT_EQ(aom_codec_enc_init(\u0026enc, iface, \u0026cfg, 0), AOM_CODEC_INVALID_PARAM);\n+}\n+\n #if !CONFIG_REALTIME_ONLY\n TEST(EncodeAPI, AllIntraMode) {\n   aom_codec_iface_t *iface \u003d aom_codec_av1_cx();\n```\n\nAre you trying to add a more sophisticated test?",
      "parentUuid": "1c3c3962_57a48382",
      "revId": "dfca5c90edc72abae400513e00068839d5617c7f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "dfca5c90edc72abae400513e00068839d5617c7f",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "dfca5c90edc72abae400513e00068839d5617c7f",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "dfca5c90edc72abae400513e00068839d5617c7f",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f43640f5_cc8a2879",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5020
      },
      "writtenOn": "2021-09-02T17:32:09Z",
      "side": 1,
      "message": "Will this break 3 pass encoding? With my comment I guess I was thinking to add a configuration for that while it\u0027s under development.",
      "revId": "d3e4e07dce4b8e584fc19bcea2113cf7c94b065f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dee15815_d9657b69",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 7525
      },
      "writtenOn": "2021-09-02T19:56:14Z",
      "side": 1,
      "message": "If CONFIG_THREE_PASS_IVF is set to 0 then when encoding the third pass the encoder will emit an error message stating that CONFIG_THREE_PASS_IVF is needed to read the bitstream. \nI did not include the whole three-pass encoding stuff with the flag because it is very possible that this is going to be an on-going effort that could take quite a while. As some codes are \"tangled\" with two pass encoding, it would make it harder to maintain with upstream changes that may not care too much about what is in a disabled config flag. \nSo in the end I included everything related to ivf parsing with the flag, and in the future if we want to go with the path to include them into the main library, we can just remove the flags, or if we have better alternatives we just need to change these parts. Meanwhile, all other efforts that uses this three-pass encoding \"framework\" do not need to worry too much about the config flag and such.",
      "parentUuid": "f43640f5_cc8a2879",
      "revId": "d3e4e07dce4b8e584fc19bcea2113cf7c94b065f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f769633_727fb647",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5020
      },
      "writtenOn": "2021-09-02T20:27:28Z",
      "side": 1,
      "message": "\u003e If CONFIG_THREE_PASS_IVF is set to 0 then when encoding the third pass the encoder will emit an error message stating that CONFIG_THREE_PASS_IVF is needed to read the bitstream. \n\nIn this case CONFIG_THREE_PASS might be more useful going forward if we decide to remove other portions of the code.\n\n\u003e I did not include the whole three-pass encoding stuff with the flag because it is very possible that this is going to be an on-going effort that could take quite a while. As some codes are \"tangled\" with two pass encoding, it would make it harder to maintain with upstream changes that may not care too much about what is in a disabled config flag. \n\nThat might be an argument to make a cleanup pass to rationalize the multi-pass encoding, though that would likely be a large effort.\n\n\u003e So in the end I included everything related to ivf parsing with the flag, and in the future if we want to go with the path to include them into the main library, we can just remove the flags, or if we have better alternatives we just need to change these parts. Meanwhile, all other efforts that uses this three-pass encoding \"framework\" do not need to worry too much about the config flag and such.",
      "parentUuid": "dee15815_d9657b69",
      "revId": "d3e4e07dce4b8e584fc19bcea2113cf7c94b065f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a166571_1a73a61f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 7525
      },
      "writtenOn": "2021-09-02T21:04:07Z",
      "side": 1,
      "message": "Sorry but I\u0027m not really sure if I fully understand the comments. Are you suggesting that we should have a flag CONFIG_THREE_PASS flag that covers everything related to three-pass encoding? That is doable I think, although we do need to cover many changes that we\u0027ve introduced over the last few months.",
      "parentUuid": "3f769633_727fb647",
      "revId": "d3e4e07dce4b8e584fc19bcea2113cf7c94b065f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b7cc0ef_23ec6fcd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5020
      },
      "writtenOn": "2021-09-03T02:07:26Z",
      "side": 1,
      "message": "\u003e Sorry but I\u0027m not really sure if I fully understand the comments. Are you suggesting that we should have a flag CONFIG_THREE_PASS flag that covers everything related to three-pass encoding? That is doable I think, although we do need to cover many changes that we\u0027ve introduced over the last few months.\n\nGiven your other comment about it being difficult to remove all of the 3 pass code with a CONFIG at the moment and that using CONFIG_THREE_PASS_IVF would break the implementation, I was just suggesting you use CONFIG_THREE_PASS as the name. Even if everything isn\u0027t stripped out three pass won\u0027t work without it being set.",
      "parentUuid": "4a166571_1a73a61f",
      "revId": "d3e4e07dce4b8e584fc19bcea2113cf7c94b065f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f10cd725_2d536a6f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 7525
      },
      "writtenOn": "2021-09-03T18:26:29Z",
      "side": 1,
      "message": "Thanks for the explanation! Yeah I agree in terms of functionality this name is more suitable. I uploaded a new patch changing the flag to CONFIG_THREE_PASS.",
      "parentUuid": "0b7cc0ef_23ec6fcd",
      "revId": "d3e4e07dce4b8e584fc19bcea2113cf7c94b065f",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
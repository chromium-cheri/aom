{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d34001d6_dc2e51d3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-04-04T20:28:19Z",
      "side": 1,
      "message": "Motivation for this change: I use libavif as an example.\n\nBecause I know the extra work that aom_codec_control() does, I guard the aom_codec_control() calls in libavif like this:\n\n```\n        avifBool lossless \u003d (quantizer \u003d\u003d AVIF_QUANTIZER_LOSSLESS);\n        if (lossless) {\n            aom_codec_control(\u0026codec-\u003einternal-\u003eencoder, AV1E_SET_LOSSLESS, 1);\n        }\n        ...\n        if (tileRowsLog2 !\u003d 0) {\n            aom_codec_control(\u0026codec-\u003einternal-\u003eencoder, AV1E_SET_TILE_ROWS, tileRowsLog2);\n        }\n        if (tileColsLog2 !\u003d 0) {\n            aom_codec_control(\u0026codec-\u003einternal-\u003eencoder, AV1E_SET_TILE_COLUMNS, tileColsLog2);\n        }\n```\n\nI.e., I only call aom_codec_control when I know the new value is not the default value.\n\nWith this change, we will be able to simplify the above code and the overhead of unnecessary aom_codec_control() calls will be kept at a minimum:\n\n```\n        avifBool lossless \u003d (quantizer \u003d\u003d AVIF_QUANTIZER_LOSSLESS);\n        aom_codec_control(\u0026codec-\u003einternal-\u003eencoder, AV1E_SET_LOSSLESS, lossless);\n        ...\n        aom_codec_control(\u0026codec-\u003einternal-\u003eencoder, AV1E_SET_TILE_ROWS, tileRowsLog2);\n        aom_codec_control(\u0026codec-\u003einternal-\u003eencoder, AV1E_SET_TILE_COLUMNS, tileColsLog2);\n```",
      "revId": "055657d55d1286dbc319715b3b5013f3e711ace9",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52e85ba0_a6bd54b7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2023-04-04T20:22:31Z",
      "side": 1,
      "message": "In this CL I modified only three codec controls to demonstrate this approach. Please check how I did it and see if it is okay.\n\nOnce you approve this, I can apply it to the other codec controls. There are a lot of codec controls, so I wanted to wait until this approach has been reviewed before I modify the other codec controls.",
      "revId": "055657d55d1286dbc319715b3b5013f3e711ace9",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "055657d55d1286dbc319715b3b5013f3e711ace9",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "055657d55d1286dbc319715b3b5013f3e711ace9",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "055657d55d1286dbc319715b3b5013f3e711ace9",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
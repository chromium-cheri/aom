{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d8387b7e_da3ba426",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-07-26T19:41:29Z",
      "side": 1,
      "message": "This is the diff",
      "revId": "240e8f2c8b9aac329f87c3c3211d3392dd246959",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5cd3e0ae_35a642ac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5020
      },
      "writtenOn": "2023-07-26T19:43:20Z",
      "side": 1,
      "message": "\u003e This is the diff\n\nPart of the diff from clang-tidy; there\u0027s a character limit...\n\n```\ndiff --git a/test/allintra_end_to_end_test.cc b/test/allintra_end_to_end_test.cc\nindex e1da0353a0..3de29195e1 100644\n--- a/test/allintra_end_to_end_test.cc\n+++ b/test/allintra_end_to_end_test.cc\n@@ -24,7 +24,7 @@ namespace {\n \n const unsigned int kFrames \u003d 20;\n const int kBitrate \u003d 500;\n-using TestVideoParam \u003d struct {\n+struct TestVideoParam {\n   const char *filename;\n   unsigned int input_bit_depth;\n   aom_img_fmt fmt;\ndiff --git a/test/altref_test.cc b/test/altref_test.cc\nindex 7eae79bfb6..48ee9d90ee 100644\n--- a/test/altref_test.cc\n+++ b/test/altref_test.cc\n@@ -15,7 +15,7 @@\n #include \"test/i420_video_source.h\"\n #include \"test/util.h\"\n namespace {\n-using AltRefTestParams \u003d struct {\n+struct AltRefTestParams {\n   const unsigned int min_kf_dist;\n   const unsigned int max_kf_dist;\n   const unsigned int min_gf_interval;\n@@ -113,7 +113,7 @@ AV1_INSTANTIATE_TEST_SUITE(AltRefFramePresenceTestLarge,\n                            ::testing::ValuesIn(TestParams),\n                            ::testing::Values(AOM_Q, AOM_VBR, AOM_CBR, AOM_CQ));\n \n-using gfIntervalParam \u003d struct {\n+struct gfIntervalParam {\n   const ::libaom_test::TestMode encoding_mode;\n   const unsigned int min_gf_interval;\n   const unsigned int max_gf_interval;\ndiff --git a/test/arf_freq_test.cc b/test/arf_freq_test.cc\nindex a06611f4f7..681979d273 100644\n--- a/test/arf_freq_test.cc\n+++ b/test/arf_freq_test.cc\n@@ -28,7 +28,7 @@ const int kBitrate \u003d 500;\n #define ARF_NOT_SEEN 1000001\n #define ARF_SEEN_ONCE 1000000\n \n-using TestVideoParam \u003d struct {\n+struct TestVideoParam {\n   const char *filename;\n   unsigned int width;\n   unsigned int height;\n@@ -40,7 +40,7 @@ using TestVideoParam \u003d struct {\n   unsigned int profile;\n };\n \n-using TestEncodeParam \u003d struct {\n+struct TestEncodeParam {\n   libaom_test::TestMode mode;\n   int cpu_used;\n };\ndiff --git a/test/av1_highbd_iht_test.cc b/test/av1_highbd_iht_test.cc\nindex 64f5a71262..0899f7d9a5 100644\n--- a/test/av1_highbd_iht_test.cc\n+++ b/test/av1_highbd_iht_test.cc\n@@ -31,7 +31,6 @@ using std::tuple;\n \n using HbdHtFunc \u003d void (*)(const int16_t *, int32_t *, int, TX_TYPE, int);\n \n-typed;\n using IHbdHtFunc \u003d void (*)(const int32_t *, uint16_t *, int, TX_TYPE, int);\n static const char *tx_type_name[] \u003d {\n   \"DCT_DCT\",\n@@ -194,7 +193,6 @@ INSTANTIATE_TEST_SUITE_P(SSE4_1, AV1HighbdInvHTNxN,\n \n using HighbdInvTxfm2dFunc \u003d void (*)(const int32_t *, uint8_t *, int, const TxfmParam *);\n \n-typedef std::tu;\n using AV1HighbdInvTxfm2dParam \u003d std::tuple\u003cconst HighbdInvTxfm2dFunc\u003e;\n class AV1HighbdInvTxfm2d\n     : public ::testing::TestWithParam\u003cAV1HighbdInvTxfm2dParam\u003e {\ndiff --git a/test/av1_k_means_test.cc b/test/av1_k_means_test.cc\nindex f40ddb1d4e..ea2f953606 100644\n--- a/test/av1_k_means_test.cc\n+++ b/test/av1_k_means_test.cc\n@@ -29,10 +29,8 @@\n \n namespace AV1Kmeans {\n using av1_calc_indices_dim1_func \u003d void (*)(const int16_t *, const int16_t *, uint8_t *, int64_t *, int, int);\n-typedef void (*av1_calc;\n using av1_calc_indices_dim2_func \u003d void (*)(const int16_t *, const int16_t *, uint8_t *, int64_t *, int, int);\n \n-typedef std::tuple\u003cav1;\n using av1_calc_indices_dim1Param \u003d std::tuple\u003cav1_calc_indices_dim1_func, BLOCK_SIZE\u003e;\n \n using av1_calc_indices_dim2Param \u003d std::tuple\u003cav1_calc_indices_dim2_func, BLOCK_SIZE\u003e;\ndiff --git a/test/av1_nn_predict_test.cc b/test/av1_nn_predict_test.cc\nindex c88bbd7153..fd712522c6 100644\n--- a/test/av1_nn_predict_test.cc\n+++ b/test/av1_nn_predict_test.cc\n@@ -26,7 +26,6 @@\n namespace {\n using NnPredict_Func \u003d void (*)(const float *const, const NN_CONFIG *const, int, float *const);\n \n-typedef st;\n using NnPredictTestParam \u003d std::tuple\u003cconst NnPredict_Func\u003e;\n \n const float epsilon \u003d 1e-3f;  // Error threshold for functional equivalence\ndiff --git a/test/av1_temporal_denoiser_test.cc b/test/av1_temporal_denoiser_test.cc\nindex 93d4be5af6..b8da8a0266 100644\n--- a/test/av1_temporal_denoiser_test.cc\n+++ b/test/av1_temporal_denoiser_test.cc\n@@ -33,7 +33,6 @@ namespace {\n const int kNumPixels \u003d 128 * 128;\n \n using Av1DenoiserFilterFunc \u003d int (*)(const uint8_t *, int, const uint8_t *, int, uint8_t *, int, int, BLOCK_SIZE, int);\n-typedef std::tuple;\n using AV1DenoiserTestParam \u003d std::tuple\u003cAv1DenoiserFilterFunc, BLOCK_SIZE\u003e;\n \n class AV1DenoiserTest\ndiff --git a/test/av1_wedge_utils_test.cc b/test/av1_wedge_utils_test.cc\nindex 4e3ef4e4ce..2db2eab1fc 100644\n--- a/test/av1_wedge_utils_test.cc\n+++ b/test/av1_wedge_utils_test.cc\n@@ -157,7 +157,6 @@ TEST_F(WedgeUtilsSSEFuncTest, ResidualBlendingMethod) {\n //////////////////////////////////////////////////////////////////////////////\n \n using FSSE \u003d uint64_t (*)(const int16_t *, const int16_t *, const uint8_t *, int);\n-t;\n using TestFuncsFSSE \u003d libaom_test::FuncParam\u003cFSSE\u003e;\n \n class WedgeUtilsSSEOptTest : public FunctionEquivalenceTest\u003cFSSE\u003e {\n@@ -223,7 +222,6 @@ TEST_P(WedgeUtilsSSEOptTest, ExtremeValues) {\n //////////////////////////////////////////////////////////////////////////////\n \n using FSign \u003d int8_t (*)(const int16_t *, const uint8_t *, int, int64_t);\n-ty;\n using TestFuncsFSign \u003d libaom_test::FuncParam\u003cFSign\u003e;\n \n class WedgeUtilsSignOptTest : public FunctionEquivalenceTest\u003cFSign\u003e {\ndiff --git a/test/avg_test.cc b/test/avg_test.cc\nindex dafe1bd85a..1fa80e0088 100644\n--- a/test/avg_test.cc\n+++ b/test/avg_test.cc\n@@ -628,7 +628,6 @@ class VectorVarTestBase : public ::testing::Test {\n \n using VectorVarFunc \u003d int (*)(const int16_t *, const int16_t *, const int);\n \n-typedef s;\n using VecVarFunc \u003d std::tuple\u003cint, VectorVarFunc, VectorVarFunc\u003e;\n \n class VectorVarTest : public VectorVarTestBase,\n@@ -852,7 +851,6 @@ INSTANTIATE_TEST_SUITE_P(\n #endif  // CONFIG_AV1_HIGHBITDEPTH\n \n using SatdFunc \u003d int (*)(const tran_low_t *, int);\n-typed;\n using SatdLpFunc \u003d int (*)(const int16_t *, int);\n \n template \u003ctypename SatdFuncType\u003e\ndiff --git a/test/blend_a64_mask_1d_test.cc b/test/blend_a64_mask_1d_test.cc\nindex bff0d33f46..8bcc838d81 100644\n--- a/test/blend_a64_mask_1d_test.cc\n+++ b/test/blend_a64_mask_1d_test.cc\n@@ -218,7 +218,6 @@ INSTANTIATE_TEST_SUITE_P(\n //////////////////////////////////////////////////////////////////////////////\n #if CONFIG_AV1_HIGHBITDEPTH\n using FHBD \u003d void (*)(uint8_t *, uint32_t, const uint8_t *, uint32_t, const uint8_t *, uint32_t, const uint8_t *, int, int, int);\n-t;\n using TestFuncsHBD \u003d libaom_test::FuncParam\u003cFHBD\u003e;\n \n class BlendA64Mask1DTestHBD : public BlendA64Mask1DTest\u003cFHBD, uint16_t\u003e {\ndiff --git a/test/blend_a64_mask_test.cc b/test/blend_a64_mask_test.cc\nindex 0ee72a0750..47ca6c88ed 100644\n--- a/test/blend_a64_mask_test.cc\n+++ b/test/blend_a64_mask_test.cc\n@@ -261,7 +261,6 @@ INSTANTIATE_TEST_SUITE_P(AVX2, BlendA64MaskTest8B,\n //////////////////////////////////////////////////////////////////////////////\n \n using F8B_D16 \u003d void (*)(uint8_t *, uint32_t, const uint16_t *, uint32_t, const uint16_t *, uint32_t, const uint8_t *, uint32_t, int, int, int, int, ConvolveParams *);\n-type;\n using TestFuncs_d16 \u003d libaom_test::FuncParam\u003cF8B_D16\u003e;\n \n class BlendA64MaskTest8B_d16\n@@ -365,7 +364,6 @@ INSTANTIATE_TEST_SUITE_P(\n //////////////////////////////////////////////////////////////////////////////\n #if CONFIG_AV1_HIGHBITDEPTH\n using FHBD \u003d void (*)(uint8_t *, uint32_t, const uint8_t *, uint32_t, const uint8_t *, uint32_t, const uint8_t *, uint32_t, int, int, int, int, int);\n-t;\n using TestFuncsHBD \u003d libaom_test::FuncParam\u003cFHBD\u003e;\n \n class BlendA64MaskTestHBD : public BlendA64MaskTest\u003cFHBD, uint16_t, uint16_t\u003e {\n@@ -465,7 +463,6 @@ INSTANTIATE_TEST_SUITE_P(\n //////////////////////////////////////////////////////////////////////////////\n \n using FHBD_D16 \u003d void (*)(uint8_t *, uint32_t, const CONV_BUF_TYPE *, uint32_t, const CONV_BUF_TYPE *, uint32_t, const uint8_t *, uint32_t, int, int, int, int, ConvolveParams *, const int);\n-typed;\n using TestFuncsHBD_d16 \u003d libaom_test::FuncParam\u003cFHBD_D16\u003e;\n \n class BlendA64MaskTestHBD_d16\ndiff --git a/test/cdef_test.cc b/test/cdef_test.cc\nindex b4729af340..4ff754e02c 100644\n--- a/test/cdef_test.cc\n+++ b/test/cdef_test.cc\n@@ -206,7 +206,6 @@ void test_cdef_speed(int bsize, int iterations, CdefFilterBlockFunctions cdef,\n \n using find_dir_t \u003d int (*)(const uint16_t *, int, int32_t *, int);\n \n-typede;\n using find_dir_param_t \u003d std::tuple\u003cfind_dir_t, find_dir_t\u003e;\n \n class CDEFFindDirTest : public ::testing::TestWithParam\u003cfind_dir_param_t\u003e {\n@@ -295,7 +294,6 @@ void test_finddir_speed(int (*finddir)(const uint16_t *img, int stride,\n \n using find_dir_dual_t \u003d void (*)(const uint16_t *, const uint16_t *, int, int32_t *, int32_t *, int, int *, int *);\n \n-typedef std;\n using find_dir_dual_param_t \u003d std::tuple\u003cfind_dir_dual_t, find_dir_dual_t\u003e;\n \n class CDEFFindDirDualTest\ndiff --git a/test/cfl_test.cc b/test/cfl_test.cc\nindex 633417dde8..baef79e3c3 100644\n--- a/test/cfl_test.cc\n+++ b/test/cfl_test.cc\n@@ -173,7 +173,6 @@ class CFLTestWithAlignedData : public CFLTest {\n };\n \n using sub_avg_fn \u003d cfl_subtract_average_fn (*)(TX_SIZE);\n-typedef;\n using sub_avg_param \u003d std::tuple\u003cTX_SIZE, sub_avg_fn\u003e;\n class CFLSubAvgTest : public ::testing::TestWithParam\u003csub_avg_param\u003e,\n                       public CFLTestWithData\u003cint16_t\u003e {\n@@ -278,7 +277,6 @@ class CFLSubsampleTest : public ::testing::TestWithParam\u003cS\u003e,\n };\n \n using get_subsample_lbd_fn \u003d cfl_subsample_lbd_fn (*)(TX_SIZE);\n-typedef std::tupl;\n using subsample_lbd_param \u003d std::tuple\u003cTX_SIZE, get_subsample_lbd_fn, get_subsample_lbd_fn, get_subsample_lbd_fn\u003e;\n class CFLSubsampleLBDTest\n     : public CFLSubsampleTest\u003csubsample_lbd_param, cfl_subsample_lbd_fn,\n@@ -321,7 +319,6 @@ TEST_P(CFLSubsampleLBDTest, DISABLED_SubsampleLBD444SpeedTest) {\n \n #if CONFIG_AV1_HIGHBITDEPTH\n using get_subsample_hbd_fn \u003d cfl_subsample_hbd_fn (*)(TX_SIZE);\n-typedef std::tupl;\n using subsample_hbd_param \u003d std::tuple\u003cTX_SIZE, get_subsample_hbd_fn, get_subsample_hbd_fn, get_subsample_hbd_fn\u003e;\n class CFLSubsampleHBDTest\n     : public CFLSubsampleTest\u003csubsample_hbd_param, cfl_subsample_hbd_fn,\n@@ -364,7 +361,6 @@ TEST_P(CFLSubsampleHBDTest, DISABLED_SubsampleHBD444SpeedTest) {\n #endif  // CONFIG_AV1_HIGHBITDEPTH\n \n using get_predict_fn \u003d cfl_predict_lbd_fn (*)(TX_SIZE);\n-typedef std;\n using predict_param \u003d std::tuple\u003cTX_SIZE, get_predict_fn\u003e;\n class CFLPredictTest : public ::testing::TestWithParam\u003cpredict_param\u003e,\n                        public CFLTestWithAlignedData\u003cuint8_t\u003e {\n@@ -414,7 +410,6 @@ TEST_P(CFLPredictTest, DISABLED_PredictSpeedTest) {\n \n #if CONFIG_AV1_HIGHBITDEPTH\n using get_predict_fn_hbd \u003d cfl_predict_hbd_fn (*)(TX_SIZE);\n-typedef std::tu;\n using predict_param_hbd \u003d std::tuple\u003cTX_SIZE, get_predict_fn_hbd\u003e;\n class CFLPredictHBDTest : public ::testing::TestWithParam\u003cpredict_param_hbd\u003e,\n                           public CFLTestWithAlignedData\u003cuint16_t\u003e {\ndiff --git a/test/cnn_test.cc b/test/cnn_test.cc\nindex a9dc11c4ed..ab462d7c92 100644\n--- a/test/cnn_test.cc\n+++ b/test/cnn_test.cc\n@@ -2512,7 +2512,6 @@ namespace {\n \n using CNNConvolveNoMaxpoolPaddingValidFunc \u003d void (*)(const float **, int, int, int, const CNN_LAYER_CONFIG *, float **, int, int, int, int);\n \n-typedef libaom_test::FuncParam\u003cC;\n using CNNConvolveTestFuncs \u003d libaom_test::FuncParam\u003cCNNConvolveNoMaxpoolPaddingValidFunc\u003e;\n \n class CNNConvolveTest : public ::testing::TestWithParam\u003cCNNConvolveTestFuncs\u003e {\ndiff --git a/test/comp_mask_pred_test.cc b/test/comp_mask_pred_test.cc\nindex 282452cada..a1ca67555c 100644\n--- a/test/comp_mask_pred_test.cc\n+++ b/test/comp_mask_pred_test.cc\n@@ -32,7 +32,6 @@\n namespace {\n using comp_mask_pred_func \u003d void (*)(uint8_t *, const uint8_t *, int, int, const uint8_t *, int, const uint8_t *, int, int);\n \n-typedef void (*;\n using comp_avg_pred_func \u003d void (*)(uint8_t *, const uint8_t *, int, int, const uint8_t *, int);\n \n #if HAVE_SSSE3 || HAVE_SSE2 || HAVE_AVX2 || HAVE_NEON\n@@ -205,7 +204,6 @@ const BLOCK_SIZE kValidBlockSize[] \u003d {\n \n using upsampled_pred_func \u003d void (*)(MACROBLOCKD *, const AV1_COMMON *const, int, int, const MV *const, uint8_t *, int, int, int, int, const uint8_t *, int, int);\n \n-typedef std::tu;\n using UpsampledPredParam \u003d std::tuple\u003cupsampled_pred_func, BLOCK_SIZE\u003e;\n \n class AV1UpsampledPredTest\n@@ -475,7 +473,6 @@ void AV1HighbdCompMaskPredTestBase::TearDown() {\n \n using highbd_comp_mask_pred_func \u003d void (*)(uint8_t *, const uint8_t *, int, int, const uint8_t *, int, const uint8_t *, int, int);\n \n-typedef std::tuple\u003chig;\n using HighbdCompMaskPredParam \u003d std::tuple\u003chighbd_comp_mask_pred_func, BLOCK_SIZE, int\u003e;\n \n class AV1HighbdCompMaskPredTest\n@@ -597,7 +594,6 @@ INSTANTIATE_TEST_SUITE_P(\n \n using highbd_upsampled_pred_func \u003d void (*)(MACROBLOCKD *, const struct AV1Common *const, int, int, const MV *const, uint8_t *, int, int, int, int, const uint8_t *, int, int, int);\n \n-typedef std::tuple\u003chig;\n using HighbdUpsampledPredParam \u003d std::tuple\u003chighbd_upsampled_pred_func, BLOCK_SIZE, int\u003e;\n \n class AV1HighbdUpsampledPredTest\n@@ -714,7 +710,6 @@ INSTANTIATE_TEST_SUITE_P(\n \n using highbd_comp_avg_pred_func \u003d void (*)(uint8_t *, const uint8_t *, int, int, const uint8_t *, int);\n \n-typedef std::tuple\u003chi;\n using HighbdCompAvgPredParam \u003d std::tuple\u003chighbd_comp_avg_pred_func, BLOCK_SIZE, int\u003e;\n \n class AV1HighbdCompAvgPredTest\ndiff --git a/test/dr_prediction_test.cc b/test/dr_prediction_test.cc\nindex cefe42ba2f..fef5b61548 100644\n--- a/test/dr_prediction_test.cc\n+++ b/test/dr_prediction_test.cc\n@@ -47,10 +47,8 @@ using libaom_test::ACMRandom;\n \n using DrPred_Hbd \u003d void (*)(uint16_t *, ptrdiff_t, int, int, const uint16_t *, const uint16_t *, int, int, int, int, int);\n \n-typede;\n using DrPred \u003d void (*)(uint8_t *, ptrdiff_t, int, int, const uint8_t *, const uint8_t *, int, int, int, int, int);\n \n-ty;\n using Z1_Lbd \u003d void (*)(uint8_t *, ptrdiff_t, int, int, const uint8_t *, const uint8_t *, int, int, int);\n template \u003cZ1_Lbd fn\u003e\n void z1_wrapper(uint8_t *dst, ptrdiff_t stride, int bw, int bh,\ndiff --git a/test/encodetxb_test.cc b/test/encodetxb_test.cc\nindex 6a7ffad541..d5265cd9f1 100644\n--- a/test/encodetxb_test.cc\n+++ b/test/encodetxb_test.cc\n@@ -200,7 +200,6 @@ INSTANTIATE_TEST_SUITE_P(NEON, EncodeTxbTest,\n \n using av1_txb_init_levels_func \u003d void (*)(const tran_low_t *const, const int, const int, uint8_t *const);\n \n-typedef std::tuple\u003ca;\n using TxbInitLevelParam \u003d std::tuple\u003cav1_txb_init_levels_func, int\u003e;\n \n class EncodeTxbInitLevelTest\ndiff --git a/test/end_to_end_psnr_test.cc b/test/end_to_end_psnr_test.cc\nindex 3d8bd16bee..bf42eef1d3 100644\n--- a/test/end_to_end_psnr_test.cc\n+++ b/test/end_to_end_psnr_test.cc\n@@ -37,7 +37,7 @@ const double kPsnrThreshold[][4] \u003d {\n   { 34.9, 44.3, 38.5, 40.8 }\n };\n \n-using TestVideoParam \u003d struct {\n+struct TestVideoParam {\n   const char *filename;\n   unsigned int input_bit_depth;\n   aom_img_fmt fmt;\ndiff --git a/test/end_to_end_qmpsnr_test.cc b/test/end_to_end_qmpsnr_test.cc\nindex 22e64bed54..2bf2053309 100644\n--- a/test/end_to_end_qmpsnr_test.cc\n+++ b/test/end_to_end_qmpsnr_test.cc\n@@ -28,7 +28,7 @@ const unsigned int kCqLevel \u003d 18;\n const double kSsimThreshold[] \u003d { 83.4, 83.4, 83.4, 83.3, 83.3,\n                                   83.0, 82.3, 81.1, 81.1 };\n \n-using TestVideoParam \u003d struct {\n+struct TestVideoParam {\n   const char *filename;\n   unsigned int input_bit_depth;\n   aom_img_fmt fmt;\ndiff --git a/test/end_to_end_ssim_test.cc b/test/end_to_end_ssim_test.cc\nindex 55e3498401..2b442bcc8d 100644\n--- a/test/end_to_end_ssim_test.cc\n+++ b/test/end_to_end_ssim_test.cc\n@@ -26,7 +26,7 @@ const unsigned int kCqLevel \u003d 18;\n const double kSsimThreshold[] \u003d { 83.4, 83.4, 83.4, 83.3, 83.3,\n                                   83.0, 82.3, 81.1, 81.1 };\n \n-using TestVideoParam \u003d struct {\n+struct TestVideoParam {\n   const char *filename;\n   unsigned int input_bit_depth;\n   aom_img_fmt fmt;\ndiff --git a/test/frame_size_tests.cc b/test/frame_size_tests.cc\nindex 61130426fe..7fd226deb4 100644\n--- a/test/frame_size_tests.cc\n+++ b/test/frame_size_tests.cc\n@@ -190,7 +190,7 @@ INSTANTIATE_TEST_SUITE_P(\n     ::testing::Combine(::testing::Values(AOM_USAGE_ALL_INTRA),\n                        ::testing::Values(AOM_Q), ::testing::Range(6, 10)));\n \n-using FrameSizeParam \u003d struct {\n+struct FrameSizeParam {\n   unsigned int width;\n   unsigned int height;\n };\n\n```",
      "parentUuid": "d8387b7e_da3ba426",
      "revId": "240e8f2c8b9aac329f87c3c3211d3392dd246959",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}
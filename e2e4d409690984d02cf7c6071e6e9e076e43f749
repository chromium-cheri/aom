{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ba89642d_74731e15",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7525
      },
      "writtenOn": "2022-08-30T23:02:45Z",
      "side": 1,
      "message": "LGTM. Thanks for patching these!",
      "revId": "e2e4d409690984d02cf7c6071e6e9e076e43f749",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d2f412a_7e592684",
        "filename": "av1/encoder/encode_strategy.c",
        "patchSetId": 1
      },
      "lineNbr": 835,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-08-30T22:47:36Z",
      "side": 1,
      "message": "aom_copy_metadata_to_frame_buffer() starts with these checks:\n\n```\nint aom_copy_metadata_to_frame_buffer(YV12_BUFFER_CONFIG *ybf,\n                                      const aom_metadata_array_t *arr) {\n  if (!ybf || !arr || !arr-\u003emetadata_array) return -1;\n  if (ybf-\u003emetadata \u003d\u003d arr) return 0;\n  ...\n```\n\nNote that `!arr` causes the function to return -1 (indicating failure). This is why we need to check `source_buffer-\u003emetadata` before calling this function if we check this function\u0027s return value.\n\nAnd `ybf-\u003emetadata \u003d\u003d arr` causes the function to return 0 immediately. So we don\u0027t need to check `frame_input-\u003esource !\u003d source_buffer` before calling this function.",
      "revId": "e2e4d409690984d02cf7c6071e6e9e076e43f749",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad2837c1_3231b7d1",
        "filename": "av1/encoder/lookahead.c",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 9545
      },
      "writtenOn": "2022-08-30T23:10:25Z",
      "side": 1,
      "message": "Daniel: Do you think we should change aom_copy_metadata_to_frame_buffer() to simply remove any existing metadata and then return 0 if its second parameter is a null pointer? I.e., change the first three lines of the function from:\n\n```\nint aom_copy_metadata_to_frame_buffer(YV12_BUFFER_CONFIG *ybf,\n                                      const aom_metadata_array_t *arr) {\n  if (!ybf || !arr || !arr-\u003emetadata_array) return -1;\n  if (ybf-\u003emetadata \u003d\u003d arr) return 0;\n  aom_remove_metadata_from_frame_buffer(ybf);\n```\n\nto:\n\n```\nint aom_copy_metadata_to_frame_buffer(YV12_BUFFER_CONFIG *ybf,\n                                      const aom_metadata_array_t *arr) {\n  if (!ybf || (arr \u0026\u0026 !arr-\u003emetadata_array)) return -1;\n  if (ybf-\u003emetadata \u003d\u003d arr) return 0;\n  aom_remove_metadata_from_frame_buffer(ybf);\n  if (!arr) return 0;\n```",
      "revId": "e2e4d409690984d02cf7c6071e6e9e076e43f749",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2da85e2a_11dc7c3f",
        "filename": "av1/encoder/lookahead.c",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 14148
      },
      "writtenOn": "2022-09-23T21:36:29Z",
      "side": 1,
      "message": "Seems feasible, though I think the user calling aom_remove_metadata_from_frame_buffer() explicitly shows a clearer intent on the code, if we add this case to the copy function, we would need to document the behavior on the function description so it doesn\u0027t surprise a user who might expect a -1 return and no action on a NULL copy() call. For clarity I would leave it as is, though I understand that it can reduce code in here.",
      "parentUuid": "ad2837c1_3231b7d1",
      "revId": "e2e4d409690984d02cf7c6071e6e9e076e43f749",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "e2e4d409690984d02cf7c6071e6e9e076e43f749",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "e2e4d409690984d02cf7c6071e6e9e076e43f749",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "e2e4d409690984d02cf7c6071e6e9e076e43f749",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}